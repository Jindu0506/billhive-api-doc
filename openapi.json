{
  "openapi": "3.0.0",
  "info": {
    "title": "BillHive",
    "version": "0.0.1",
    "description": "facades",
    "contact": {
      "name": "Mohit Aggarwal",
      "email": "mohitetc2008@gmail.com"
    }
  },
  "paths": {
    "/accounts/count": {
      "get": {
        "x-controller-name": "AnalyticsController",
        "x-operation-name": "count",
        "tags": [
          "Analytics"
        ],
        "responses": {
          "200": {
            "description": "Account model count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/loopback.Count"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Account.WhereFilter",
                  "additionalProperties": true,
                  "x-typescript-type": "@loopback/repository#Where<Account>"
                }
              }
            }
          }
        ],
        "operationId": "AnalyticsController.count"
      }
    },
    "/accounts/{id}/billing-address": {
      "post": {
        "x-controller-name": "AccountController",
        "x-operation-name": "addBillingAddress",
        "tags": [
          "Customer"
        ],
        "summary": "Create a customer",
        "description": "Creates a customer account with an optional sold-to contact. contactPerson represents sold-to contact.<br><br>The transaction is atomic; if any part fails for any reason, the entire transaction is rolled back.",
        "responses": {
          "200": {
            "description": "Account model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewBillingAddress"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "AccountController.addBillingAddress"
      }
    },
    "/accounts/{id}/billing-addresses": {
      "get": {
        "x-controller-name": "AccountController",
        "x-operation-name": "getBillingAddresses",
        "tags": [
          "Customer"
        ],
        "summary": "Fetch a customers audit log",
        "description": "Retrieves the audit log details of the desired customer. Information about a specific action or event related to a customer. Audit logs are often used to track and monitor activities performed on customer accounts or systems.",
        "responses": {
          "200": {
            "description": "Account model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Address.Filter"
                }
              }
            }
          }
        ],
        "operationId": "AccountController.getBillingAddresses"
      }
    },
    "/accounts/{accountId}/contacts/{id}": {
      "patch": {
        "x-controller-name": "AccountController",
        "x-operation-name": "updateContact",
        "tags": [
          "Customer"
        ],
        "summary": "Update contacts for a customer",
        "description": "Updates the details of a contact for a customer.",
        "responses": {
          "204": {
            "description": "Contact PATCH success"
          }
        },
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "where",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Contact.WhereFilter",
                  "additionalProperties": true,
                  "x-typescript-type": "@loopback/repository#Where<Contact>"
                }
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactPartial"
              }
            }
          },
          "x-parameter-index": 2
        },
        "operationId": "AccountController.updateContact"
      },
      "delete": {
        "x-controller-name": "AccountController",
        "x-operation-name": "deleteContactId",
        "tags": [
          "Customer"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Contact DELETE success"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "operationId": "AccountController.deleteContactId"
      }
    },
    "/accounts/{accountId}/contacts": {
      "post": {
        "x-controller-name": "AccountController",
        "x-operation-name": "createContact",
        "tags": [
          "Customer"
        ],
        "summary": "Add contacts to a customer",
        "description": "Adds the required contact to a customer. You can give the First Name, Last Name, Email ID and more details as input parameters to add them under the desired customer.",
        "responses": {
          "200": {
            "description": "Contact model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contact"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewContact"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "AccountController.createContact"
      },
      "get": {
        "x-controller-name": "AccountController",
        "x-operation-name": "findContacts",
        "tags": [
          "Customer"
        ],
        "summary": "List of contacts for a customers",
        "description": "This API retrieves all the contacts for a customer.",
        "responses": {
          "200": {
            "description": "Array of Contact model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contact.Filter"
                }
              }
            }
          }
        ],
        "operationId": "AccountController.findContacts"
      }
    },
    "/accounts/{accountId}/payment-methods/{id}": {
      "patch": {
        "x-controller-name": "AccountController",
        "x-operation-name": "updatePaymentMethodById",
        "tags": [
          "Customer"
        ],
        "summary": "Update payment method for a customer",
        "description": "Updates payment method details for a customer.",
        "responses": {
          "204": {
            "description": "PaymentMethod PATCH success"
          }
        },
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentMethodPartial"
              }
            }
          },
          "x-parameter-index": 2
        },
        "operationId": "AccountController.updatePaymentMethodById"
      },
      "delete": {
        "x-controller-name": "AccountController",
        "x-operation-name": "deletePaymentMethodById",
        "tags": [
          "Customer"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "description": "PaymentMethod DELETE success"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "operationId": "AccountController.deletePaymentMethodById"
      }
    },
    "/accounts/{accountId}/payment-methods": {
      "get": {
        "x-controller-name": "AccountController",
        "x-operation-name": "findPaymentMethods",
        "tags": [
          "Customer"
        ],
        "summary": "List payment methods for a customer",
        "description": "Get all payment method details for a customer.",
        "responses": {
          "200": {
            "description": "Array of PaymentMethod model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentMethodWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethod.Filter"
                }
              }
            }
          }
        ],
        "operationId": "AccountController.findPaymentMethods"
      }
    },
    "/accounts/{id}": {
      "patch": {
        "x-controller-name": "AccountController",
        "x-operation-name": "updateById",
        "tags": [
          "Customer"
        ],
        "summary": "Update a customer",
        "description": "Updates the customer resource.",
        "responses": {
          "204": {
            "description": "Account PATCH success"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountPartialExcluding_accountId_"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "AccountController.updateById"
      },
      "get": {
        "x-controller-name": "AccountController",
        "x-operation-name": "findById",
        "tags": [
          "Customer"
        ],
        "summary": "Fetch a customer",
        "description": "Retrieves the details of the desired customer. You can use the unique identifier for a particular customer to retrieve the desired details.",
        "responses": {
          "200": {
            "description": "Account model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account.Filter"
                }
              }
            }
          }
        ],
        "operationId": "AccountController.findById"
      },
      "delete": {
        "x-controller-name": "AccountController",
        "x-operation-name": "deleteById",
        "tags": [
          "Customer"
        ],
        "summary": "Delete a customer",
        "description": "Deletes a specific account asynchronously.",
        "responses": {
          "204": {
            "description": "Account PATCH success"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "operationId": "AccountController.deleteById"
      }
    },
    "/accounts": {
      "post": {
        "x-controller-name": "AccountController",
        "x-operation-name": "create",
        "tags": [
          "Customer"
        ],
        "summary": "Create a customer",
        "description": "Creates a customer account with an optional sold-to contact. contactPerson represents sold-to contact.<br><br>The transaction is atomic; if any part fails for any reason, the entire transaction is rolled back.",
        "responses": {
          "200": {
            "description": "Account model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewAccountInfo"
              }
            }
          }
        },
        "operationId": "AccountController.create"
      },
      "get": {
        "x-controller-name": "AccountController",
        "x-operation-name": "find",
        "tags": [
          "Customer"
        ],
        "summary": "List customers",
        "description": "Retrieves a list of customers added.",
        "responses": {
          "200": {
            "description": "Array of Account model instances",
            "content": {
              "application/json": {}
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account.Filter1"
                }
              }
            }
          }
        ],
        "operationId": "AccountController.find"
      }
    },
    "/activity-log": {
      "get": {
        "x-controller-name": "AccountController",
        "x-operation-name": "getAuditLog",
        "tags": [
          "Customer"
        ],
        "summary": "Fetch a customers audit log",
        "description": "Retrieves the audit log details of the desired customer. Information about a specific action or event related to a customer. Audit logs are often used to track and monitor activities performed on customer accounts or systems.",
        "responses": {
          "200": {
            "description": "Account model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityLog"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityLog.Filter"
                }
              }
            }
          }
        ],
        "operationId": "AccountController.getAuditLog"
      }
    },
    "/addon-prices/{id}": {
      "patch": {
        "x-controller-name": "AddonController",
        "x-operation-name": "updatePriceById",
        "tags": [
          "Addon"
        ],
        "summary": "Update Addon Price instance based on key",
        "description": "Update Addon Price instance based on key. This key could be addon_price_key or id.",
        "responses": {
          "204": {
            "description": "Addon Price PATCH success"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddonPricePartialExcluding_id_"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "AddonController.updatePriceById"
      },
      "get": {
        "x-controller-name": "AddonController",
        "x-operation-name": "findPriceById",
        "tags": [
          "Addon"
        ],
        "summary": "Fetch a addon-price based on unique key",
        "description": "fetch a addon-price based on unique key. This key could be addon_price_key or id.",
        "responses": {
          "200": {
            "description": "Account model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddonPrice"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Addon.Filter"
                }
              }
            }
          }
        ],
        "operationId": "AddonController.findPriceById"
      }
    },
    "/addons/{id}/activate": {
      "get": {
        "x-controller-name": "AddonController",
        "x-operation-name": "activateAddon",
        "tags": [
          "Addon"
        ],
        "summary": "Activate Addon",
        "description": "Activate Addon",
        "responses": {
          "204": {
            "description": "Addon Activated Successfully"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "operationId": "AddonController.activateAddon"
      }
    },
    "/addons/{id}/deactivate": {
      "get": {
        "x-controller-name": "AddonController",
        "x-operation-name": "deactivateAddon",
        "tags": [
          "Addon"
        ],
        "summary": "Deactivate Addon",
        "description": "Deactivate Addon",
        "responses": {
          "204": {
            "description": "Addon Deactivated Successfully"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "operationId": "AddonController.deactivateAddon"
      }
    },
    "/addons/{id}/prices": {
      "post": {
        "x-controller-name": "AddonController",
        "x-operation-name": "createPrice",
        "tags": [
          "Addon"
        ],
        "responses": {
          "200": {
            "description": "Charges model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddonPrice"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewAddonPrice"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "AddonController.createPrice"
      },
      "get": {
        "x-controller-name": "AddonController",
        "x-operation-name": "findAddonPrices",
        "tags": [
          "Addon"
        ],
        "summary": "Fetch all prices of specified addon",
        "description": "Fetch all prices of specified addon",
        "responses": {
          "200": {
            "description": "Account model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddonPrices"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddonPrice.Filter"
                }
              }
            }
          }
        ],
        "operationId": "AddonController.findAddonPrices"
      }
    },
    "/addons/{id}": {
      "patch": {
        "x-controller-name": "AddonController",
        "x-operation-name": "updateById",
        "tags": [
          "Addon"
        ],
        "summary": "Update Addon instance based on key",
        "description": "Update Addon instance based on key. This key could be addon_key or id.",
        "responses": {
          "204": {
            "description": "Account PATCH success"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddonPartialExcluding_id_"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "AddonController.updateById"
      },
      "get": {
        "x-controller-name": "AddonController",
        "x-operation-name": "findById",
        "tags": [
          "Addon"
        ],
        "summary": "Fetch a addon based on unique key",
        "description": "fetch a addon based on unique key. This key could be addon_key or id.",
        "responses": {
          "200": {
            "description": "Account model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Addon"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Addon.Filter"
                }
              }
            }
          }
        ],
        "operationId": "AddonController.findById"
      },
      "delete": {
        "x-controller-name": "AddonController",
        "x-operation-name": "deleteById",
        "tags": [
          "Addon"
        ],
        "summary": "Delete a customer",
        "description": "Deletes a specific account asynchronously.",
        "responses": {
          "204": {
            "description": "Account PATCH success"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "operationId": "AddonController.deleteById"
      }
    },
    "/addons": {
      "post": {
        "x-controller-name": "AddonController",
        "x-operation-name": "create",
        "tags": [
          "Addon"
        ],
        "responses": {
          "200": {
            "description": "create a instance Addon model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Addon"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewAddon"
              }
            }
          }
        },
        "operationId": "AddonController.create"
      },
      "get": {
        "x-controller-name": "AddonController",
        "x-operation-name": "find",
        "tags": [
          "Addon"
        ],
        "responses": {
          "200": {
            "description": "fetch all addons for a specific tenant",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AddonsWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Addon.Filter1"
                }
              }
            }
          }
        ],
        "operationId": "AddonController.find"
      }
    },
    "/amendments/{amendmentId}": {
      "patch": {
        "x-controller-name": "SubscriptionController",
        "x-operation-name": "updateById",
        "tags": [
          "Subscription"
        ],
        "summary": "Update an amendment",
        "description": "Update an amendment",
        "responses": {
          "200": {
            "description": "Amendment model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Amendment"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "amendmentId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AmendmentPartial"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "SubscriptionController.updateById"
      }
    },
    "/amendments/{id}": {
      "delete": {
        "x-controller-name": "SubscriptionController",
        "x-operation-name": "deleteAmendment",
        "tags": [
          "Subscription"
        ],
        "summary": "Delete an amendment",
        "description": "Delete an amendment",
        "responses": {
          "204": {
            "description": "Amendment DELETE success"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "operationId": "SubscriptionController.deleteAmendment"
      }
    },
    "/amendments": {
      "get": {
        "x-controller-name": "SubscriptionController",
        "x-operation-name": "findAmendment",
        "tags": [
          "Subscription"
        ],
        "summary": "List amendments",
        "description": "Retrieves a list of amendments added.",
        "responses": {
          "200": {
            "description": "Amendment model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Amendments"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Amendment.Filter"
                }
              }
            }
          }
        ],
        "operationId": "SubscriptionController.findAmendment"
      }
    },
    "/analytics/billings/summary": {
      "get": {
        "x-controller-name": "AnalyticsController",
        "x-operation-name": "billingsSummary",
        "tags": [
          "Analytics"
        ],
        "responses": {
          "200": {
            "description": "Billings Summary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingsSummary"
                }
              }
            }
          }
        },
        "operationId": "AnalyticsController.billingsSummary"
      }
    },
    "/analytics/rate-plan-subscriptions": {
      "get": {
        "x-controller-name": "AnalyticsController",
        "x-operation-name": "ratePlanSubscriptionsSummary",
        "tags": [
          "Analytics"
        ],
        "responses": {
          "200": {
            "description": "Array of DailyReport model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DailyReportWithRelations"
                  }
                }
              }
            }
          }
        },
        "operationId": "AnalyticsController.ratePlanSubscriptionsSummary"
      }
    },
    "/analytics/subscribers/summary": {
      "get": {
        "x-controller-name": "AnalyticsController",
        "x-operation-name": "subscribersSummary",
        "tags": [
          "Analytics"
        ],
        "responses": {
          "200": {
            "description": "Array of DailyReport model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DailyReportWithRelations"
                  }
                }
              }
            }
          }
        },
        "operationId": "AnalyticsController.subscribersSummary"
      }
    },
    "/analytics/subscribers": {
      "post": {
        "x-controller-name": "AnalyticsController",
        "x-operation-name": "find",
        "tags": [
          "Analytics"
        ],
        "responses": {
          "200": {
            "description": "Array of DailyReport model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DailyReportWithRelations"
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnalyticsRequest"
              }
            }
          }
        },
        "operationId": "AnalyticsController.find"
      }
    },
    "/analytics/subscriptions/summary": {
      "get": {
        "x-controller-name": "AnalyticsController",
        "x-operation-name": "subscriptionsSummary",
        "tags": [
          "Analytics"
        ],
        "responses": {
          "200": {
            "description": "Subscriptions Summary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionsSummary"
                }
              }
            }
          }
        },
        "operationId": "AnalyticsController.subscriptionsSummary"
      }
    },
    "/analytics/top5-rate-plans": {
      "get": {
        "x-controller-name": "AnalyticsController",
        "x-operation-name": "top5RatePlans",
        "tags": [
          "Analytics"
        ],
        "responses": {
          "200": {
            "description": "Array of DailyReport model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DailyReportWithRelations"
                  }
                }
              }
            }
          }
        },
        "operationId": "AnalyticsController.top5RatePlans"
      }
    },
    "/api-keys/permissions": {
      "get": {
        "x-controller-name": "ApiKeyController",
        "x-operation-name": "findPermissions",
        "tags": [
          "API-Key"
        ],
        "responses": {
          "200": {
            "description": "Array of AuthKey model instances",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionsWithRelations"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Permission.Filter"
                }
              }
            }
          }
        ],
        "operationId": "ApiKeyController.findPermissions"
      }
    },
    "/api-keys": {
      "post": {
        "x-controller-name": "ApiKeyController",
        "x-operation-name": "create",
        "tags": [
          "API-Key"
        ],
        "responses": {
          "200": {
            "description": "AuthKey model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiKey"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewApiKey"
              }
            }
          }
        },
        "operationId": "ApiKeyController.create"
      },
      "get": {
        "x-controller-name": "ApiKeyController",
        "x-operation-name": "find",
        "tags": [
          "API-Key"
        ],
        "responses": {
          "200": {
            "description": "Array of AuthKey model instances",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiKeysWithRelations"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiKey.Filter"
                }
              }
            }
          }
        ],
        "operationId": "ApiKeyController.find"
      }
    },
    "/apply-transactions/{transactionId}": {
      "get": {
        "x-controller-name": "TransactionController",
        "x-operation-name": "findById",
        "tags": [
          "Transaction"
        ],
        "responses": {
          "200": {
            "description": "ApplyTransaction model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplyTransactionWithRelations"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "transactionId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplyTransaction.Filter"
                }
              }
            }
          }
        ],
        "operationId": "TransactionController.findById"
      }
    },
    "/apply-transactions": {
      "post": {
        "x-controller-name": "TransactionController",
        "x-operation-name": "createApplyTransaction",
        "tags": [
          "Transaction"
        ],
        "responses": {
          "200": {
            "description": "ApplyTransaction model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplyTransactionWithRelations"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NewApplyTransaction"
                }
              }
            }
          }
        },
        "operationId": "TransactionController.createApplyTransaction"
      }
    },
    "/billing-periods/{id}": {
      "patch": {
        "x-controller-name": "BillingPeriodController",
        "x-operation-name": "updateBillingPeriodById",
        "tags": [
          "Billing Period"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Period PATCH success"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PeriodPartial"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "BillingPeriodController.updateBillingPeriodById"
      }
    },
    "/billing-periods": {
      "post": {
        "x-controller-name": "BillingPeriodController",
        "x-operation-name": "createBillingPeriod",
        "tags": [
          "Billing Period"
        ],
        "responses": {
          "200": {
            "description": "Period model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Period"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewPeriod"
              }
            }
          }
        },
        "operationId": "BillingPeriodController.createBillingPeriod"
      },
      "get": {
        "x-controller-name": "BillingPeriodController",
        "x-operation-name": "findBillingPeriodOptions",
        "tags": [
          "Billing Period"
        ],
        "responses": {
          "200": {
            "description": "Array of Setting model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Period.Filter"
                }
              }
            }
          }
        ],
        "operationId": "BillingPeriodController.findBillingPeriodOptions"
      }
    },
    "/calculate-cost-to-pay-now": {
      "post": {
        "x-controller-name": "SubscriptionController",
        "x-operation-name": "calculateCost",
        "tags": [
          "Subscription"
        ],
        "summary": "Calculate cost for the subscription",
        "description": "Creates a subscription customer account with an optional sold-to contact. contactPerson represents sold-to contact.<br><br>The transaction is atomic; if any part fails for any reason, the entire transaction is rolled back.",
        "responses": {
          "200": {
            "description": "Subscription model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/calculateCost"
              }
            }
          }
        },
        "operationId": "SubscriptionController.calculateCost"
      }
    },
    "/cb-payment-success": {
      "post": {
        "x-controller-name": "CallbackUrlsController",
        "x-operation-name": "cbPaymentSuccess",
        "tags": [
          "CallbackUrlsController"
        ],
        "responses": {},
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "operationId": "CallbackUrlsController.cbPaymentSuccess"
      }
    },
    "/charges/{id}": {
      "delete": {
        "x-controller-name": "ChargeController",
        "x-operation-name": "deleteById",
        "tags": [
          "Charge"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "description": "product-rate-plan-components DELETE success"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "operationId": "ChargeController.deleteById"
      }
    },
    "/charges": {
      "post": {
        "x-controller-name": "ChargeController",
        "x-operation-name": "create",
        "tags": [
          "Charge"
        ],
        "responses": {
          "200": {
            "description": "Charges model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargeMaster"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewChargeMaster"
              }
            }
          }
        },
        "operationId": "ChargeController.create"
      },
      "get": {
        "x-controller-name": "ChargeController",
        "x-operation-name": "find",
        "tags": [
          "Charge"
        ],
        "responses": {
          "200": {
            "description": "Array of Charges model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChargesWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Charge.Filter"
                }
              }
            }
          }
        ],
        "operationId": "ChargeController.find"
      }
    },
    "/coupons/{couponId}": {
      "patch": {
        "x-controller-name": "CouponController",
        "x-operation-name": "updateById",
        "tags": [
          "CouponController"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "description": "RatePlan PUT success"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "couponId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CouponPartial"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "CouponController.updateById"
      },
      "get": {
        "x-controller-name": "CouponController",
        "x-operation-name": "findById",
        "tags": [
          "CouponController"
        ],
        "responses": {
          "200": {
            "description": "Array of Action model instances",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewCouponDetails"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "couponId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Coupon.Filter"
                }
              }
            }
          }
        ],
        "operationId": "CouponController.findById"
      }
    },
    "/coupons/{id}": {
      "delete": {
        "x-controller-name": "CouponController",
        "x-operation-name": "deleteById",
        "tags": [
          "CouponController"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Coupon DELETE success"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "operationId": "CouponController.deleteById"
      }
    },
    "/coupons": {
      "post": {
        "x-controller-name": "CouponController",
        "x-operation-name": "create",
        "tags": [
          "CouponController"
        ],
        "responses": {
          "200": {
            "description": "Charges model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CouponDetails"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewCoupon"
              }
            }
          }
        },
        "operationId": "CouponController.create"
      },
      "get": {
        "x-controller-name": "CouponController",
        "x-operation-name": "find",
        "tags": [
          "CouponController"
        ],
        "responses": {
          "200": {
            "description": "Array of Action model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CouponWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Coupon.Filter"
                }
              }
            }
          }
        ],
        "operationId": "CouponController.find"
      }
    },
    "/currencies": {
      "post": {
        "x-controller-name": "CurrencyController",
        "x-operation-name": "create",
        "tags": [
          "Currency"
        ],
        "summary": "Add a currency",
        "description": "Add a currency",
        "responses": {
          "200": {
            "description": "Account model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Currency"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewCurrency"
              }
            }
          }
        },
        "operationId": "CurrencyController.create"
      },
      "get": {
        "x-controller-name": "CurrencyController",
        "x-operation-name": "findCurrencies",
        "tags": [
          "Currency"
        ],
        "responses": {
          "200": {
            "description": "Array of Setting model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "operationId": "CurrencyController.findCurrencies"
      }
    },
    "/download/{filename}": {
      "get": {
        "x-controller-name": "InvoiceController",
        "x-operation-name": "downloadFile",
        "tags": [
          "Invoice"
        ],
        "responses": {
          "200": {
            "description": "Return value of InvoiceController.downloadFile"
          }
        },
        "parameters": [
          {
            "name": "filename",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "operationId": "InvoiceController.downloadFile"
      }
    },
    "/enqueue": {
      "post": {
        "x-controller-name": "RedisController",
        "x-operation-name": "sendMessage",
        "tags": [
          "RedisController"
        ],
        "responses": {
          "200": {
            "description": "Return value of RedisController.sendMessage"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationEvent"
              }
            }
          }
        },
        "operationId": "RedisController.sendMessage"
      }
    },
    "/forget-password": {
      "post": {
        "x-controller-name": "AuthController",
        "x-operation-name": "forgetPassword",
        "tags": [
          "Auth"
        ],
        "responses": {
          "200": {
            "description": "Return value of AuthController.forgetPassword"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForgetPassword"
              }
            }
          }
        },
        "operationId": "AuthController.forgetPassword"
      }
    },
    "/guestToken": {
      "post": {
        "x-controller-name": "AuthController",
        "x-operation-name": "guestToken",
        "tags": [
          "Auth"
        ],
        "responses": {
          "200": {
            "description": "Token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "accessToken": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "tenantId",
                  "productId"
                ],
                "properties": {
                  "tenantId": {
                    "type": "string",
                    "description": "The ID of the tenant"
                  },
                  "productId": {
                    "type": "string",
                    "description": "The ID of the product"
                  }
                }
              }
            }
          },
          "description": "Guest token request",
          "required": true
        },
        "operationId": "AuthController.guestToken"
      }
    },
    "/invoices/{invoiceId}/download": {
      "get": {
        "x-controller-name": "InvoiceController",
        "x-operation-name": "downloadByInvoiceId",
        "tags": [
          "Invoice"
        ],
        "responses": {
          "200": {
            "description": "Download Invoice as File",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvoiceItemWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "invoiceId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "operationId": "InvoiceController.downloadByInvoiceId"
      }
    },
    "/invoices/{invoiceId}/invoice-items": {
      "get": {
        "x-controller-name": "InvoiceController",
        "x-operation-name": "findByInvoiceId",
        "tags": [
          "Invoice"
        ],
        "responses": {
          "200": {
            "description": "Array of Invoice Item model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvoiceItemWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "invoiceId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "operationId": "InvoiceController.findByInvoiceId"
      }
    },
    "/invoices/{invoiceId}": {
      "get": {
        "x-controller-name": "InvoiceController",
        "x-operation-name": "findById",
        "tags": [
          "Invoice"
        ],
        "responses": {
          "200": {
            "description": "Array of Invoice model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvoiceWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "invoiceId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "operationId": "InvoiceController.findById"
      }
    },
    "/invoices/{id}": {
      "delete": {
        "x-controller-name": "InvoiceController",
        "x-operation-name": "deleteById",
        "tags": [
          "Invoice"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Invoice DELETE success"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "operationId": "InvoiceController.deleteById"
      }
    },
    "/invoices": {
      "post": {
        "x-controller-name": "InvoiceController",
        "x-operation-name": "create",
        "tags": [
          "Invoice"
        ],
        "responses": {
          "200": {
            "description": "Invoice model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceDetails"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewInvoice"
              }
            }
          }
        },
        "operationId": "InvoiceController.create"
      },
      "get": {
        "x-controller-name": "InvoiceController",
        "x-operation-name": "find",
        "tags": [
          "Invoice"
        ],
        "responses": {
          "200": {
            "description": "Array of Invoice model instances",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoicesWithRelations"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice.Filter"
                }
              }
            }
          }
        ],
        "operationId": "InvoiceController.find"
      }
    },
    "/login": {
      "post": {
        "x-controller-name": "AuthController",
        "x-operation-name": "login",
        "tags": [
          "Auth"
        ],
        "responses": {
          "200": {
            "description": "Users model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Credentials"
              }
            }
          }
        },
        "operationId": "AuthController.login"
      }
    },
    "/master/currencies": {
      "get": {
        "x-controller-name": "CurrencyController",
        "x-operation-name": "findMasterCurrencies",
        "tags": [
          "Currency"
        ],
        "responses": {
          "200": {
            "description": "Array of Currency Model",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "operationId": "CurrencyController.findMasterCurrencies"
      }
    },
    "/memos": {
      "post": {
        "x-controller-name": "MemoController",
        "x-operation-name": "create",
        "tags": [
          "MemoController"
        ],
        "responses": {
          "200": {
            "description": "Memo model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Memo"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewMemo"
              }
            }
          }
        },
        "operationId": "MemoController.create"
      },
      "get": {
        "x-controller-name": "MemoController",
        "x-operation-name": "find",
        "tags": [
          "MemoController"
        ],
        "responses": {
          "200": {
            "description": "Array of Memo model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MemosWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Memo.Filter"
                }
              }
            }
          }
        ],
        "operationId": "MemoController.find"
      }
    },
    "/metadata/{variable}": {
      "get": {
        "x-controller-name": "MetaDataController",
        "x-operation-name": "find",
        "tags": [
          "MetaDataController"
        ],
        "responses": {
          "200": {
            "description": "Array of Feature model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": "string"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "variable",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "operationId": "MetaDataController.find"
      }
    },
    "/mytenant": {
      "get": {
        "x-controller-name": "TenantController",
        "x-operation-name": "findMyTenant",
        "tags": [
          "TenantController"
        ],
        "responses": {
          "200": {
            "description": "Tenant model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantWithRelations"
                }
              }
            }
          }
        },
        "operationId": "TenantController.findMyTenant"
      }
    },
    "/notifications": {
      "post": {
        "x-controller-name": "NotificationController",
        "x-operation-name": "create",
        "tags": [
          "Notification"
        ],
        "summary": "Create a customer",
        "description": "Creates a customer account with an optional sold-to contact. contactPerson represents sold-to contact.<br><br>The transaction is atomic; if any part fails for any reason, the entire transaction is rolled back.",
        "responses": {
          "200": {
            "description": "Account model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Notification"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewNotification"
              }
            }
          }
        },
        "operationId": "NotificationController.create"
      },
      "get": {
        "x-controller-name": "NotificationController",
        "x-operation-name": "find",
        "tags": [
          "Notification"
        ],
        "responses": {
          "200": {
            "description": "Array of Notification model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NotificationWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Notification.Filter"
                }
              }
            }
          }
        ],
        "operationId": "NotificationController.find"
      }
    },
    "/orders/place": {
      "post": {
        "x-controller-name": "OrderController",
        "x-operation-name": "create",
        "tags": [
          "Order"
        ],
        "responses": {
          "200": {
            "description": "Charges model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderData"
              }
            }
          }
        },
        "operationId": "OrderController.create"
      }
    },
    "/orders/summary": {
      "post": {
        "x-controller-name": "OrderController",
        "x-operation-name": "orderSummary",
        "tags": [
          "Order"
        ],
        "responses": {
          "200": {
            "description": "Charges model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderSummary"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewOrderData"
              }
            }
          }
        },
        "operationId": "OrderController.orderSummary"
      }
    },
    "/orders/{orderId}": {
      "get": {
        "x-controller-name": "OrderController",
        "x-operation-name": "findById",
        "tags": [
          "Order"
        ],
        "responses": {
          "200": {
            "description": "Array of Invoice model instances",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDetails"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "operationId": "OrderController.findById"
      }
    },
    "/orders": {
      "get": {
        "x-controller-name": "OrderController",
        "x-operation-name": "find",
        "tags": [
          "Order"
        ],
        "summary": "List orders",
        "description": "Retrieves a list of orders added.",
        "responses": {
          "200": {
            "description": "Orders model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Orders"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order.Filter"
                }
              }
            }
          }
        ],
        "operationId": "OrderController.find"
      }
    },
    "/payment/auth": {
      "post": {
        "x-controller-name": "AccountController",
        "x-operation-name": "authPayment",
        "tags": [
          "Customer"
        ],
        "responses": {
          "200": {
            "description": "Payment Auth model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentAuth"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthorizePayment"
              }
            }
          }
        },
        "operationId": "AccountController.authPayment"
      }
    },
    "/payment-gateway/{id}": {
      "delete": {
        "x-controller-name": "PaymentGatewayController",
        "x-operation-name": "deleteById",
        "tags": [
          "PaymentGatewayController"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "description": "PaymentGateway DELETE success"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "operationId": "PaymentGatewayController.deleteById"
      }
    },
    "/payment-gateway": {
      "post": {
        "x-controller-name": "PaymentGatewayController",
        "x-operation-name": "create",
        "tags": [
          "PaymentGatewayController"
        ],
        "responses": {
          "200": {
            "description": "PaymentGatewaySetting model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentGateway"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewPaymentGatewaySetting"
              }
            }
          }
        },
        "operationId": "PaymentGatewayController.create"
      },
      "get": {
        "x-controller-name": "PaymentGatewayController",
        "x-operation-name": "find",
        "tags": [
          "PaymentGatewayController"
        ],
        "responses": {
          "200": {
            "description": "Array of PaymentGateway model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentGatewayWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentGateway.Filter"
                }
              }
            }
          }
        ],
        "operationId": "PaymentGatewayController.find"
      }
    },
    "/payment-gateway-masters": {
      "get": {
        "x-controller-name": "PaymentGatewayMasterController",
        "x-operation-name": "find",
        "tags": [
          "PaymentGatewayMasterController"
        ],
        "responses": {
          "200": {
            "description": "Array of PaymentGatewayMaster model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentGatewayMasterWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentGatewayMaster.Filter"
                }
              }
            }
          }
        ],
        "operationId": "PaymentGatewayMasterController.find"
      }
    },
    "/payment-gateway-metadata": {
      "get": {
        "x-controller-name": "PublicController",
        "x-operation-name": "find",
        "tags": [
          "PublicController"
        ],
        "responses": {
          "200": {
            "description": "Array of PaymentGatewayMetadata model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentGatewayMetadataWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentGatewayMetadata.Filter"
                }
              }
            }
          }
        ],
        "operationId": "PublicController.find"
      }
    },
    "/payment-method-masters": {
      "get": {
        "x-controller-name": "PaymentMethodMasterController",
        "x-operation-name": "find",
        "tags": [
          "PaymentMethodMasterController"
        ],
        "responses": {
          "200": {
            "description": "Array of PaymentMethodMaster model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentMethodMasterWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodMaster.Filter"
                }
              }
            }
          }
        ],
        "operationId": "PaymentMethodMasterController.find"
      }
    },
    "/payment-methods/{id}": {
      "get": {
        "x-controller-name": "PaymentMethodController",
        "x-operation-name": "findById",
        "tags": [
          "PaymentMethodController"
        ],
        "responses": {
          "200": {
            "description": "PaymentMethod model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodWithRelations"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethod.Filter1"
                }
              }
            }
          }
        ],
        "operationId": "PaymentMethodController.findById"
      },
      "delete": {
        "x-controller-name": "PaymentMethodController",
        "x-operation-name": "deleteById",
        "tags": [
          "PaymentMethodController"
        ],
        "summary": "Delete a Payment Method",
        "description": "Deletes a specific Payment Method asynchronously.",
        "responses": {
          "204": {
            "description": "Account PATCH success"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "operationId": "PaymentMethodController.deleteById"
      }
    },
    "/payments": {
      "post": {
        "x-controller-name": "PaymentController",
        "x-operation-name": "create",
        "tags": [
          "PaymentController"
        ],
        "responses": {
          "200": {
            "description": "Payment model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewPayment"
              }
            }
          }
        },
        "operationId": "PaymentController.create"
      },
      "get": {
        "x-controller-name": "PaymentController",
        "x-operation-name": "find",
        "tags": [
          "PaymentController"
        ],
        "responses": {
          "200": {
            "description": "Array of Payment model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payment.Filter"
                }
              }
            }
          }
        ],
        "operationId": "PaymentController.find"
      }
    },
    "/periods": {
      "get": {
        "x-controller-name": "PeriodController",
        "x-operation-name": "find",
        "tags": [
          "PeriodController"
        ],
        "responses": {
          "200": {
            "description": "Array of Period model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PeriodWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Period.Filter"
                }
              }
            }
          }
        ],
        "operationId": "PeriodController.find"
      }
    },
    "/ping": {
      "get": {
        "x-controller-name": "PingController",
        "x-operation-name": "ping",
        "tags": [
          "PingController"
        ],
        "responses": {
          "200": {
            "description": "Ping Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PingResponse"
                }
              }
            }
          }
        },
        "operationId": "PingController.ping"
      }
    },
    "/products/{id}": {
      "patch": {
        "x-controller-name": "ProductController",
        "x-operation-name": "updateById",
        "tags": [
          "Product"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Product PATCH success"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductPartial"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "ProductController.updateById"
      },
      "get": {
        "x-controller-name": "ProductController",
        "x-operation-name": "findById",
        "tags": [
          "Product"
        ],
        "responses": {
          "200": {
            "description": "Product model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductWithRelations"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "operationId": "ProductController.findById"
      },
      "delete": {
        "x-controller-name": "ProductController",
        "x-operation-name": "deleteById",
        "tags": [
          "Product"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Product DELETE success"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "operationId": "ProductController.deleteById"
      }
    },
    "/products": {
      "post": {
        "x-controller-name": "ProductController",
        "x-operation-name": "create",
        "tags": [
          "Product"
        ],
        "responses": {
          "200": {
            "description": "Product model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewProduct"
              }
            }
          }
        },
        "operationId": "ProductController.create"
      },
      "get": {
        "x-controller-name": "ProductController",
        "x-operation-name": "find",
        "tags": [
          "Product"
        ],
        "summary": "List customers",
        "description": "Retrieves a list of all products.",
        "responses": {
          "200": {
            "description": "Array of Product model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductsWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product.Filter"
                }
              }
            }
          }
        ],
        "operationId": "ProductController.find"
      }
    },
    "/public/rate-plan-prices": {
      "get": {
        "x-controller-name": "PublicController",
        "x-operation-name": "findCheckoutRatePlans",
        "tags": [
          "PublicController"
        ],
        "responses": {
          "200": {
            "description": "Array of RatePlanPrice model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RatePlanPriceDetailsWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RatePlanPrice.Filter"
                }
              }
            }
          }
        ],
        "operationId": "PublicController.findCheckoutRatePlans"
      }
    },
    "/rate-plan-charges": {
      "get": {
        "x-controller-name": "ChargeController",
        "x-operation-name": "findRatePlanCharges",
        "tags": [
          "Charge"
        ],
        "responses": {
          "200": {
            "description": "Array of Rate-Plan-Charges model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RatePlanChargeWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RatePlanCharge.Filter"
                }
              }
            }
          }
        ],
        "operationId": "ChargeController.findRatePlanCharges"
      }
    },
    "/rate-plan-prices/{id}": {
      "delete": {
        "x-controller-name": "RatePlanPriceController",
        "x-operation-name": "deleteById",
        "tags": [
          "RatePlanPriceController"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "description": "rate-plan-price DELETE success"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "operationId": "RatePlanPriceController.deleteById"
      }
    },
    "/rate-plan-prices": {
      "get": {
        "x-controller-name": "RatePlanPriceController",
        "x-operation-name": "find",
        "tags": [
          "RatePlanPriceController"
        ],
        "responses": {
          "200": {
            "description": "Array of RatePlanPrice model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RatePlanPriceDetailsWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RatePlanPrice.Filter"
                }
              }
            }
          }
        ],
        "operationId": "RatePlanPriceController.find"
      }
    },
    "/rate-plans/{ratePlanId}/charges": {
      "get": {
        "x-controller-name": "ChargeController",
        "x-operation-name": "findRatePlanChargesByRateplanId",
        "tags": [
          "Charge"
        ],
        "responses": {
          "200": {
            "description": "Array of Charges model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChargesWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "ratePlanId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Charge.Filter"
                }
              }
            }
          }
        ],
        "operationId": "ChargeController.findRatePlanChargesByRateplanId"
      }
    },
    "/rate-plans/{ratePlanId}/coupons": {
      "get": {
        "x-controller-name": "CouponController",
        "x-operation-name": "findCouponsByRatePlanId",
        "tags": [
          "CouponController"
        ],
        "responses": {
          "200": {
            "description": "Array of RatePlan model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CouponWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "ratePlanId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RatePlan.Filter"
                }
              }
            }
          }
        ],
        "operationId": "CouponController.findCouponsByRatePlanId"
      }
    },
    "/rate-plans/{id}/rate-plan-prices": {
      "post": {
        "x-controller-name": "RatePlanPriceController",
        "x-operation-name": "create",
        "tags": [
          "RatePlanPriceController"
        ],
        "responses": {
          "200": {
            "description": "RatePlan model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RatePlanPriceDetails"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewRatePlanPriceChargesAddons"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "RatePlanPriceController.create"
      }
    },
    "/rate-plans/{id}": {
      "get": {
        "x-controller-name": "RatePlanController",
        "x-operation-name": "findById",
        "tags": [
          "Rate Plan"
        ],
        "responses": {
          "200": {
            "description": "Array of RatePlan model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RatePlanWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RatePlan.Filter"
                }
              }
            }
          }
        ],
        "operationId": "RatePlanController.findById"
      },
      "delete": {
        "x-controller-name": "RatePlanController",
        "x-operation-name": "deleteById",
        "tags": [
          "Rate Plan"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "description": "rate-plan DELETE success"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "operationId": "RatePlanController.deleteById"
      }
    },
    "/rate-plans": {
      "post": {
        "x-controller-name": "RatePlanController",
        "x-operation-name": "create",
        "tags": [
          "Rate Plan"
        ],
        "responses": {
          "200": {
            "description": "RatePlan model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RatePlan"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewRatePlan"
              }
            }
          }
        },
        "operationId": "RatePlanController.create"
      },
      "get": {
        "x-controller-name": "RatePlanController",
        "x-operation-name": "find",
        "tags": [
          "Rate Plan"
        ],
        "responses": {
          "200": {
            "description": "Array of RatePlan model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RatePlansWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RatePlan.Filter"
                }
              }
            }
          }
        ],
        "operationId": "RatePlanController.find"
      }
    },
    "/refreshToken": {
      "post": {
        "x-controller-name": "AuthController",
        "x-operation-name": "refresh",
        "tags": [
          "Auth"
        ],
        "responses": {
          "200": {
            "description": "Token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "accessToken": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "refreshToken"
                ],
                "properties": {
                  "refreshToken": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "description": "Reissuing Access Token",
          "required": true
        },
        "operationId": "AuthController.refresh"
      }
    },
    "/reset-password": {
      "post": {
        "x-controller-name": "AuthController",
        "x-operation-name": "resetPassword",
        "tags": [
          "Auth"
        ],
        "responses": {
          "200": {
            "description": "Users model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "operationId": "AuthController.resetPassword"
      }
    },
    "/roles": {
      "get": {
        "x-controller-name": "RoleController",
        "x-operation-name": "find",
        "tags": [
          "Access Management"
        ],
        "responses": {
          "200": {
            "description": "Array of Action model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleWithRelations"
                  }
                }
              }
            }
          }
        },
        "operationId": "RoleController.find"
      }
    },
    "/settings": {
      "patch": {
        "x-controller-name": "SettingController",
        "x-operation-name": "updateById",
        "tags": [
          "SettingController"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Setting PATCH success"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SettingPartial"
              }
            }
          }
        },
        "operationId": "SettingController.updateById"
      }
    },
    "/smtp-server": {
      "get": {
        "x-controller-name": "ConfigureSmtpServerController",
        "x-operation-name": "find",
        "tags": [
          "Settings"
        ],
        "responses": {
          "200": {
            "description": "Array of Configured SMTP Server model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SmtpServerWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmtpServer.Filter"
                }
              }
            }
          }
        ],
        "operationId": "ConfigureSmtpServerController.find"
      }
    },
    "/subscription-settings": {
      "post": {
        "x-controller-name": "SubscriptionSettingsController",
        "x-operation-name": "create",
        "tags": [
          "SubscriptionSettingsController"
        ],
        "responses": {
          "200": {
            "description": "SubscriptionSettings model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionSettings"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewSubscriptionSettings"
              }
            }
          }
        },
        "operationId": "SubscriptionSettingsController.create"
      },
      "get": {
        "x-controller-name": "SubscriptionSettingsController",
        "x-operation-name": "find",
        "tags": [
          "SubscriptionSettingsController"
        ],
        "responses": {
          "200": {
            "description": "Array of Setting model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubscriptionSettingsWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionSettings.Filter"
                }
              }
            }
          }
        ],
        "operationId": "SubscriptionSettingsController.find"
      }
    },
    "/subscriptions/{id}/audit-log": {
      "get": {
        "x-controller-name": "SubscriptionController",
        "x-operation-name": "getAuditLog",
        "tags": [
          "Subscription"
        ],
        "summary": "Fetch a subscriptions audit log",
        "description": "Retrieves the audit log details of the desired subscription. Information about a specific action or event related to a subscription. Audit logs are often used to track and monitor activities performed on customer accounts or systems.",
        "responses": {
          "200": {
            "description": "Subscription model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditLog"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditLog.Filter"
                }
              }
            }
          }
        ],
        "operationId": "SubscriptionController.getAuditLog"
      }
    },
    "/subscriptions/{subscriptionId}/cancel": {
      "post": {
        "x-controller-name": "SubscriptionController",
        "x-operation-name": "cancelSubscription",
        "tags": [
          "Subscription"
        ],
        "summary": "Cancel a subscription",
        "description": "Cancel a subscription",
        "responses": {
          "200": {
            "description": "Subscription model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CancelSubscription"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "SubscriptionController.cancelSubscription"
      }
    },
    "/subscriptions/{id}/pause": {
      "post": {
        "x-controller-name": "SubscriptionController",
        "x-operation-name": "pauseSubscription",
        "tags": [
          "Subscription"
        ],
        "summary": "Pause a subscription",
        "description": "Pause a subscription",
        "responses": {
          "200": {
            "description": "Subscription model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PauseSubscription"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "SubscriptionController.pauseSubscription"
      }
    },
    "/subscriptions/{id}/resume": {
      "post": {
        "x-controller-name": "SubscriptionController",
        "x-operation-name": "resumeSubscription",
        "tags": [
          "Subscription"
        ],
        "summary": "Resume a subscription",
        "description": "Resume a subscription",
        "responses": {
          "200": {
            "description": "Subscription model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResumeSubscription"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "SubscriptionController.resumeSubscription"
      }
    },
    "/subscriptions/{id}": {
      "get": {
        "x-controller-name": "SubscriptionController",
        "x-operation-name": "findById",
        "tags": [
          "Subscription"
        ],
        "summary": "Fetch a subscription",
        "description": "Retrieves the details of the subscription. You can use the unique identifier to retrieve the desired details.",
        "responses": {
          "200": {
            "description": "Subscription model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription.Filter"
                }
              }
            }
          }
        ],
        "operationId": "SubscriptionController.findById"
      },
      "delete": {
        "x-controller-name": "SubscriptionController",
        "x-operation-name": "deleteById",
        "tags": [
          "Subscription"
        ],
        "summary": "Delete a subscription",
        "description": "Delete a subscription",
        "responses": {
          "204": {
            "description": "Subscription DELETE success"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "operationId": "SubscriptionController.deleteById"
      }
    },
    "/subscriptions": {
      "get": {
        "x-controller-name": "SubscriptionController",
        "x-operation-name": "find",
        "tags": [
          "Subscription"
        ],
        "summary": "List subscriptions",
        "description": "Retrieves a list of subscriptions added.",
        "responses": {
          "200": {
            "description": "Subscription model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscriptions"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription.Filter"
                }
              }
            }
          }
        ],
        "operationId": "SubscriptionController.find"
      }
    },
    "/template-configs": {
      "get": {
        "x-controller-name": "TemplateConfigController",
        "x-operation-name": "find",
        "tags": [
          "TemplateConfigController"
        ],
        "responses": {
          "200": {
            "description": "Array of Template Config model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TemplateConfigWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateConfig.Filter"
                }
              }
            }
          }
        ],
        "operationId": "TemplateConfigController.find"
      }
    },
    "/template-vars": {
      "get": {
        "x-controller-name": "TemplateVarController",
        "x-operation-name": "find",
        "tags": [
          "TemplateVarController"
        ],
        "responses": {
          "200": {
            "description": "Array of TemplateVar model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TemplateVarWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateVar.Filter"
                }
              }
            }
          }
        ],
        "operationId": "TemplateVarController.find"
      }
    },
    "/templates/getPreSignedUrl": {
      "post": {
        "x-controller-name": "TemplateController",
        "x-operation-name": "generatePreSignedUrl",
        "tags": [
          "TemplateController"
        ],
        "responses": {
          "200": {
            "description": "Return value of TemplateController.generatePreSignedUrl"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "operationId": "TemplateController.generatePreSignedUrl"
      }
    },
    "/templates/{id}/mergefields": {
      "get": {
        "x-controller-name": "TemplateController",
        "x-operation-name": "getMergedFields",
        "tags": [
          "TemplateController"
        ],
        "responses": {
          "200": {
            "description": "Return value of TemplateController.getMergedFields"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Template.Filter"
                }
              }
            }
          }
        ],
        "operationId": "TemplateController.getMergedFields"
      }
    },
    "/templates/{id}": {
      "patch": {
        "x-controller-name": "TemplateController",
        "x-operation-name": "updateById",
        "tags": [
          "TemplateController"
        ],
        "summary": "Update a Template",
        "description": "Updates the Template.",
        "responses": {
          "204": {
            "description": "Template PATCH success"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TemplatePartialExcluding_templateId_"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "TemplateController.updateById"
      },
      "delete": {
        "x-controller-name": "TemplateController",
        "x-operation-name": "deleteById",
        "tags": [
          "TemplateController"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Template DELETE success"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "operationId": "TemplateController.deleteById"
      }
    },
    "/templates": {
      "post": {
        "x-controller-name": "TemplateController",
        "x-operation-name": "login",
        "tags": [
          "TemplateController"
        ],
        "responses": {
          "200": {
            "description": "Return value of TemplateController.login"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewTemplate"
              }
            }
          }
        },
        "operationId": "TemplateController.login"
      },
      "get": {
        "x-controller-name": "TemplateController",
        "x-operation-name": "find",
        "tags": [
          "TemplateController"
        ],
        "responses": {
          "200": {
            "description": "Array of Template model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TemplateWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Template.Filter1"
                }
              }
            }
          }
        ],
        "operationId": "TemplateController.find"
      }
    },
    "/tenants/{id}": {
      "patch": {
        "x-controller-name": "TenantController",
        "x-operation-name": "updateById",
        "tags": [
          "TenantController"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Tenant PATCH success"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TenantPartial"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "TenantController.updateById"
      }
    },
    "/tenants/{tenantId}": {
      "get": {
        "x-controller-name": "PublicController",
        "x-operation-name": "findTenant",
        "tags": [
          "PublicController"
        ],
        "responses": {
          "200": {
            "description": "Tenant model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantWithRelations"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "operationId": "PublicController.findTenant"
      }
    },
    "/transactions": {
      "post": {
        "x-controller-name": "TransactionController",
        "x-operation-name": "create",
        "tags": [
          "Transaction"
        ],
        "responses": {
          "200": {
            "description": "Transaction model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewTransaction"
              }
            }
          }
        },
        "operationId": "TransactionController.create"
      },
      "get": {
        "x-controller-name": "TransactionController",
        "x-operation-name": "find",
        "tags": [
          "Transaction"
        ],
        "responses": {
          "200": {
            "description": "Array of Transaction model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TransactionsWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction.Filter"
                }
              }
            }
          }
        ],
        "operationId": "TransactionController.find"
      }
    },
    "/trial-periods/{id}": {
      "patch": {
        "x-controller-name": "TrialPeriodController",
        "x-operation-name": "updateTrialPeriodById",
        "tags": [
          "TrialPeriod"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Period PATCH success"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PeriodPartial"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "TrialPeriodController.updateTrialPeriodById"
      }
    },
    "/trial-periods": {
      "post": {
        "x-controller-name": "TrialPeriodController",
        "x-operation-name": "createTrialPeriod",
        "tags": [
          "TrialPeriod"
        ],
        "responses": {
          "200": {
            "description": "Period model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Period"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewPeriod"
              }
            }
          }
        },
        "operationId": "TrialPeriodController.createTrialPeriod"
      },
      "get": {
        "x-controller-name": "TrialPeriodController",
        "x-operation-name": "findTrialOptions",
        "tags": [
          "TrialPeriod"
        ],
        "responses": {
          "200": {
            "description": "Array of Setting model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Period.Filter"
                }
              }
            }
          }
        ],
        "operationId": "TrialPeriodController.findTrialOptions"
      }
    },
    "/usages": {
      "post": {
        "x-controller-name": "UsageController",
        "x-operation-name": "create",
        "tags": [
          "Usage"
        ],
        "responses": {
          "200": {
            "description": "Usage model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Usage"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewUsage"
              }
            }
          }
        },
        "operationId": "UsageController.create"
      },
      "get": {
        "x-controller-name": "UsageController",
        "x-operation-name": "find",
        "tags": [
          "Usage"
        ],
        "responses": {
          "200": {
            "description": "Array of Usage model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UsagesWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Usage.Filter"
                }
              }
            }
          }
        ],
        "operationId": "UsageController.find"
      }
    },
    "/users/{emailId}": {
      "patch": {
        "x-controller-name": "UserController",
        "x-operation-name": "updateById",
        "tags": [
          "Access Management"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "description": "User PATCH success"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "emailId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserPartial"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "UserController.updateById"
      },
      "delete": {
        "x-controller-name": "UserController",
        "x-operation-name": "deleteById",
        "tags": [
          "Access Management"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "description": "User DELETE success"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "emailId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "operationId": "UserController.deleteById"
      }
    },
    "/users/{email}": {
      "get": {
        "x-controller-name": "UserController",
        "x-operation-name": "findById",
        "tags": [
          "Access Management"
        ],
        "responses": {
          "200": {
            "description": "Return value of UserController.findById"
          }
        },
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User.Filter"
                }
              }
            }
          }
        ],
        "operationId": "UserController.findById"
      }
    },
    "/users": {
      "post": {
        "x-controller-name": "UserController",
        "x-operation-name": "create",
        "tags": [
          "Access Management"
        ],
        "description": "Create User",
        "responses": {
          "200": {
            "description": "Successful execution",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewUser"
              }
            }
          }
        },
        "operationId": "UserController.create"
      },
      "get": {
        "x-controller-name": "UserController",
        "x-operation-name": "find",
        "tags": [
          "Access Management"
        ],
        "responses": {
          "200": {
            "description": "Return value of UserController.find"
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User.Filter"
                }
              }
            }
          }
        ],
        "operationId": "UserController.find"
      }
    },
    "/webhooks": {
      "post": {
        "x-controller-name": "WebhookController",
        "x-operation-name": "create",
        "tags": [
          "WebhookController"
        ],
        "responses": {
          "200": {
            "description": "Webhook model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookDTO"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewWebhook"
              }
            }
          }
        },
        "operationId": "WebhookController.create"
      },
      "get": {
        "x-controller-name": "WebhookController",
        "x-operation-name": "find",
        "tags": [
          "WebhookController"
        ],
        "responses": {
          "200": {
            "description": "Array of Webhook model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WebhookWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook.Filter"
                }
              }
            }
          }
        ],
        "operationId": "WebhookController.find"
      }
    },
    "/whoami": {
      "get": {
        "x-controller-name": "AuthController",
        "x-operation-name": "whoami",
        "tags": [
          "Auth"
        ],
        "responses": {
          "200": {
            "description": "Return value of AuthController.whoami"
          }
        },
        "operationId": "AuthController.whoami"
      }
    },
    "/{tenantId}/accounts": {
      "post": {
        "x-controller-name": "PublicController",
        "x-operation-name": "create",
        "tags": [
          "PublicController"
        ],
        "summary": "Create a customer",
        "description": "Creates a customer account with an optional sold-to contact. contactPerson represents sold-to contact.<br><br>The transaction is atomic; if any part fails for any reason, the entire transaction is rolled back.",
        "responses": {
          "200": {
            "description": "Account model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewAccountInfo"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "PublicController.create"
      }
    },
    "/{subscriptionId}/amendments": {
      "post": {
        "x-controller-name": "SubscriptionController",
        "x-operation-name": "createAmendment",
        "tags": [
          "Subscription"
        ],
        "summary": "amend subscription",
        "description": "amend subscription",
        "responses": {
          "200": {
            "description": "Amendment model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Amendment"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewAmendment"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "SubscriptionController.createAmendment"
      }
    },
    "/{accountId}/invoices/generate": {
      "get": {
        "x-controller-name": "InvoiceController",
        "x-operation-name": "generate",
        "tags": [
          "Invoice"
        ],
        "responses": {
          "200": {
            "description": "Array of Invoice model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvoiceWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "operationId": "InvoiceController.generate"
      }
    },
    "/{accountId}/payment-methods": {
      "post": {
        "x-controller-name": "AccountController",
        "x-operation-name": "createPaymentMethod",
        "tags": [
          "Customer"
        ],
        "responses": {
          "200": {
            "description": "PaymentMethod model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethod"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewPaymentMethodReq"
              }
            }
          }
        },
        "operationId": "AccountController.createPaymentMethod"
      },
      "get": {
        "x-controller-name": "PaymentMethodController",
        "x-operation-name": "find",
        "tags": [
          "PaymentMethodController"
        ],
        "responses": {
          "200": {
            "description": "Array of PaymentMethod model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentMethodWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethod.Filter"
                }
              }
            }
          }
        ],
        "operationId": "PaymentMethodController.find"
      }
    },
    "/{productId}/rate-plans/{id}": {
      "patch": {
        "x-controller-name": "RatePlanController",
        "x-operation-name": "updateById",
        "tags": [
          "Rate Plan"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "description": "RatePlan PUT success"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RatePlanPartial"
              }
            }
          },
          "x-parameter-index": 2
        },
        "operationId": "RatePlanController.updateById"
      }
    },
    "/{accountId}/subscriptions": {
      "post": {
        "x-controller-name": "SubscriptionController",
        "x-operation-name": "create",
        "tags": [
          "Subscription"
        ],
        "summary": "Create a subscription",
        "description": "Creates a subscription customer account with an optional sold-to contact. contactPerson represents sold-to contact.<br><br>The transaction is atomic; if any part fails for any reason, the entire transaction is rolled back.",
        "responses": {
          "200": {
            "description": "Subscription model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewSubscription"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "SubscriptionController.create"
      }
    },
    "/{productId}/theme-configs": {
      "post": {
        "x-controller-name": "ThemeConfigsController",
        "x-operation-name": "createThemeConfig",
        "tags": [
          "ThemeConfigsController"
        ],
        "responses": {
          "200": {
            "description": "Charges model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThemeConfig"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewThemeConfig"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "ThemeConfigsController.createThemeConfig"
      },
      "get": {
        "x-controller-name": "ThemeConfigsController",
        "x-operation-name": "findByProductId",
        "tags": [
          "ThemeConfigsController"
        ],
        "summary": "Fetch a customer",
        "description": "Retrieves the details of the desired customer. You can use the unique identifier for a particular customer to retrieve the desired details.",
        "responses": {
          "200": {
            "description": "Account model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThemeConfig"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "operationId": "ThemeConfigsController.findByProductId"
      }
    },
    "/{tenantId}/{productId}/rate-plans": {
      "get": {
        "x-controller-name": "RatePlanController",
        "x-operation-name": "findByProductId",
        "tags": [
          "Rate Plan"
        ],
        "responses": {
          "200": {
            "description": "Array of RatePlan model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RatePlanWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "productId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RatePlan.Filter"
                }
              }
            }
          }
        ],
        "operationId": "RatePlanController.findByProductId"
      }
    }
  },
  "components": {
    "securitySchemes": {
      "jwt": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "apiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "x-api-key"
      }
    },
    "schemas": {
      "WebhookWithRelations": {
        "title": "WebhookWithRelations",
        "type": "object",
        "description": "(tsType: WebhookWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "webhookId": {
            "type": "string",
            "format": "uuid"
          },
          "url": {
            "type": "string",
            "format": "uri"
          },
          "secret": {
            "type": "string"
          },
          "alertEmail": {
            "type": "string",
            "format": "email"
          },
          "activeEvents": {
            "type": "object"
          },
          "tenantId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "url",
          "activeEvents"
        ],
        "additionalProperties": false,
        "x-typescript-type": "WebhookWithRelations"
      },
      "WebhookDTO": {
        "title": "WebhookDTO",
        "type": "object",
        "properties": {
          "webhookId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "methodType": {
            "type": "string"
          },
          "contentType": {
            "type": "string"
          },
          "retry": {
            "type": "boolean"
          },
          "queryParams": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "authorisation": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "headers": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "body": {
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "required": [
          "name",
          "url",
          "methodType",
          "contentType",
          "retry"
        ],
        "additionalProperties": false
      },
      "NewWebhook": {
        "title": "NewWebhook",
        "type": "object",
        "description": "(tsType: Omit<WebhookDTO, 'webhookId'>, schemaOptions: { title: 'NewWebhook', exclude: [ 'webhookId' ] })",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "methodType": {
            "type": "string"
          },
          "contentType": {
            "type": "string"
          },
          "retry": {
            "type": "boolean"
          },
          "queryParams": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "authorisation": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "headers": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "body": {
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "required": [
          "name",
          "url",
          "methodType",
          "contentType",
          "retry"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Omit<WebhookDTO, 'webhookId'>"
      },
      "ErrorMessage": {
        "title": "ErrorMessage",
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "statusCode",
          "message"
        ],
        "additionalProperties": false
      },
      "ErrorResponse": {
        "title": "ErrorResponse",
        "type": "object",
        "properties": {
          "error": {
            "$ref": "#/components/schemas/ErrorMessage"
          }
        },
        "required": [
          "error"
        ],
        "additionalProperties": false
      },
      "NewUser": {
        "title": "NewUser",
        "type": "object",
        "description": "(tsType: Omit<User, 'userId' | 'refreshToken' | 'status' | 'password' | 'keycloakId'>, schemaOptions: { title: 'NewUser', exclude: [ 'userId', 'refreshToken', 'status', 'password', 'keycloakId' ] })",
        "properties": {
          "tenantId": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "firstName",
          "email",
          "roles"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Omit<User, 'userId' | 'refreshToken' | 'status' | 'password' | 'keycloakId'>"
      },
      "User": {
        "title": "User",
        "type": "object",
        "properties": {
          "tenantId": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "Active",
              "In-active",
              "Suspended",
              "Deleted"
            ]
          },
          "id": {
            "type": "string"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "keycloakId": {
            "type": "string"
          }
        },
        "required": [
          "firstName",
          "email",
          "roles"
        ],
        "additionalProperties": false
      },
      "UserPartial": {
        "title": "UserPartial",
        "type": "object",
        "description": "(tsType: Partial<User>, schemaOptions: { partial: true })",
        "properties": {
          "tenantId": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "Active",
              "In-active",
              "Suspended",
              "Deleted"
            ]
          },
          "id": {
            "type": "string"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "keycloakId": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "Partial<User>"
      },
      "Usage": {
        "title": "Usage",
        "type": "object",
        "properties": {
          "usageId": {
            "type": "string",
            "format": "uuid"
          },
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "accountId": {
            "type": "string",
            "format": "uuid"
          },
          "accountName": {
            "type": "string"
          },
          "termSubscriptionId": {
            "type": "string",
            "format": "uuid"
          },
          "version": {
            "type": "number"
          },
          "chargeId": {
            "type": "string",
            "format": "uuid"
          },
          "chargeName": {
            "type": "string"
          },
          "usageDate": {
            "type": "string",
            "format": "date"
          },
          "quantity": {
            "type": "number"
          },
          "createdTs": {
            "type": "string",
            "format": "date-time"
          },
          "source": {
            "type": "string",
            "enum": [
              "System",
              "Manual"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "Created",
              "Uploaded",
              "Billed"
            ]
          }
        },
        "required": [
          "tenantId",
          "accountId",
          "termSubscriptionId",
          "version",
          "chargeId",
          "usageDate",
          "quantity",
          "source",
          "status"
        ],
        "additionalProperties": false
      },
      "NewUsage": {
        "title": "NewUsage",
        "type": "object",
        "description": "(tsType: Omit<Usage, 'usageId' | 'tenantId' | 'createdTs' | 'status' | 'source'>, schemaOptions: { title: 'NewUsage', exclude: [ 'usageId', 'tenantId', 'createdTs', 'status', 'source' ] })",
        "properties": {
          "accountId": {
            "type": "string",
            "format": "uuid"
          },
          "accountName": {
            "type": "string"
          },
          "termSubscriptionId": {
            "type": "string",
            "format": "uuid"
          },
          "version": {
            "type": "number"
          },
          "chargeId": {
            "type": "string",
            "format": "uuid"
          },
          "chargeName": {
            "type": "string"
          },
          "usageDate": {
            "type": "string",
            "format": "date"
          },
          "quantity": {
            "type": "number"
          }
        },
        "required": [
          "accountId",
          "termSubscriptionId",
          "version",
          "chargeId",
          "usageDate",
          "quantity"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Omit<Usage, 'usageId' | 'tenantId' | 'createdTs' | 'status' | 'source'>"
      },
      "UsagesWithRelations": {
        "title": "UsagesWithRelations",
        "type": "object",
        "description": "(tsType: UsagesWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "usages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Usage"
            }
          },
          "count": {
            "type": "number"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "UsagesWithRelations"
      },
      "Period": {
        "title": "Period",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": false,
            "format": "uuid"
          },
          "periodName": {
            "type": "string",
            "nullable": false
          },
          "term": {
            "type": "number",
            "nullable": false
          },
          "period": {
            "type": "string",
            "nullable": false,
            "enum": [
              "Day",
              "Week",
              "Month",
              "Year"
            ]
          },
          "tenantId": {
            "type": "string",
            "nullable": false
          },
          "isOpted": {
            "type": "boolean",
            "nullable": false
          },
          "isTrial": {
            "type": "boolean",
            "nullable": false
          }
        },
        "required": [
          "periodName",
          "term",
          "period"
        ],
        "additionalProperties": false
      },
      "NewPeriod": {
        "title": "NewPeriod",
        "type": "object",
        "description": "(tsType: Omit<Period, 'id' | 'tenantId' | 'isOpted' | 'isTrial'>, schemaOptions: { title: 'NewPeriod', exclude: [ 'id', 'tenantId', 'isOpted', 'isTrial' ] })",
        "properties": {
          "periodName": {
            "type": "string",
            "nullable": false
          },
          "term": {
            "type": "number",
            "nullable": false
          },
          "period": {
            "type": "string",
            "nullable": false,
            "enum": [
              "Day",
              "Week",
              "Month",
              "Year"
            ]
          }
        },
        "required": [
          "periodName",
          "term",
          "period"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Omit<Period, 'id' | 'tenantId' | 'isOpted' | 'isTrial'>"
      },
      "PeriodPartial": {
        "title": "PeriodPartial",
        "type": "object",
        "description": "(tsType: Partial<Period>, schemaOptions: { partial: true })",
        "properties": {
          "id": {
            "type": "string",
            "nullable": false,
            "format": "uuid"
          },
          "periodName": {
            "type": "string",
            "nullable": false
          },
          "term": {
            "type": "number",
            "nullable": false
          },
          "period": {
            "type": "string",
            "nullable": false,
            "enum": [
              "Day",
              "Week",
              "Month",
              "Year"
            ]
          },
          "tenantId": {
            "type": "string",
            "nullable": false
          },
          "isOpted": {
            "type": "boolean",
            "nullable": false
          },
          "isTrial": {
            "type": "boolean",
            "nullable": false
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "Partial<Period>"
      },
      "Transaction": {
        "title": "Transaction",
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "string",
            "format": "uuid"
          },
          "referenceId": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          },
          "unappliedAmount": {
            "type": "number"
          },
          "appliedAmount": {
            "type": "number"
          },
          "currency": {
            "type": "string",
            "enum": [
              "INR",
              "USD",
              "CAD",
              "GBP"
            ]
          },
          "accountId": {
            "type": "string",
            "format": "uuid"
          },
          "accountName": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "Transaction",
              "Refund"
            ]
          },
          "transactionDate": {
            "type": "string",
            "format": "date"
          },
          "mode": {
            "type": "string",
            "enum": [
              "Cash",
              "Cheque",
              "Credit Card",
              "Debit Card",
              "Bank Transfer",
              "Online Payment",
              "Mobile Payment",
              "Electronic Funds Transfer (EFT)"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "Success",
              "Voided",
              "Failure",
              "Timeout",
              "Unknown",
              "In-Progress",
              "Needs Attention"
            ]
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "referenceId",
          "amount",
          "currency",
          "accountId",
          "type",
          "transactionDate",
          "mode",
          "status"
        ],
        "additionalProperties": false
      },
      "NewTransaction": {
        "title": "NewTransaction",
        "type": "object",
        "description": "(tsType: Omit<Transaction, 'transactionId' | 'tenantId' | 'status'>, schemaOptions: { title: 'NewTransaction', exclude: [ 'transactionId', 'tenantId', 'status' ] })",
        "properties": {
          "referenceId": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          },
          "unappliedAmount": {
            "type": "number"
          },
          "appliedAmount": {
            "type": "number"
          },
          "currency": {
            "type": "string",
            "enum": [
              "INR",
              "USD",
              "CAD",
              "GBP"
            ]
          },
          "accountId": {
            "type": "string",
            "format": "uuid"
          },
          "accountName": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "Transaction",
              "Refund"
            ]
          },
          "transactionDate": {
            "type": "string",
            "format": "date"
          },
          "mode": {
            "type": "string",
            "enum": [
              "Cash",
              "Cheque",
              "Credit Card",
              "Debit Card",
              "Bank Transfer",
              "Online Payment",
              "Mobile Payment",
              "Electronic Funds Transfer (EFT)"
            ]
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "referenceId",
          "amount",
          "currency",
          "accountId",
          "type",
          "transactionDate",
          "mode"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Omit<Transaction, 'transactionId' | 'tenantId' | 'status'>"
      },
      "TransactionsWithRelations": {
        "title": "TransactionsWithRelations",
        "type": "object",
        "description": "(tsType: TransactionsWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Transaction"
            }
          },
          "count": {
            "type": "number"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "TransactionsWithRelations"
      },
      "ApplyTransactionWithRelations": {
        "title": "ApplyTransactionWithRelations",
        "type": "object",
        "description": "(tsType: ApplyTransactionWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "transactionId": {
            "type": "string"
          },
          "subscriptionId": {
            "type": "string"
          },
          "invoiceId": {
            "type": "string"
          },
          "accountId": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          }
        },
        "required": [
          "transactionId",
          "amount"
        ],
        "additionalProperties": false,
        "x-typescript-type": "ApplyTransactionWithRelations"
      },
      "NewApplyTransaction": {
        "title": "NewApplyTransaction",
        "type": "object",
        "description": "(tsType: ApplyTransaction, schemaOptions: { title: 'NewApplyTransaction' })",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "transactionId": {
            "type": "string"
          },
          "subscriptionId": {
            "type": "string"
          },
          "invoiceId": {
            "type": "string"
          },
          "accountId": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          }
        },
        "required": [
          "transactionId",
          "amount"
        ],
        "additionalProperties": false,
        "x-typescript-type": "ApplyTransaction"
      },
      "ThemeConfig": {
        "title": "ThemeConfig",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "productId": {
            "type": "string",
            "format": "uuid"
          },
          "accentColor": {
            "type": "string"
          },
          "headerColor": {
            "type": "string"
          },
          "highlightPanelColor": {
            "type": "string"
          },
          "checkoutPageColor": {
            "type": "string"
          },
          "cardsColor": {
            "type": "string"
          },
          "inputComponentsColor": {
            "type": "string"
          },
          "fontFamily": {
            "type": "string"
          },
          "fontSize": {
            "type": "number"
          },
          "borderShape": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "tenantId",
          "productId"
        ],
        "additionalProperties": false
      },
      "NewThemeConfig": {
        "title": "NewThemeConfig",
        "type": "object",
        "description": "(tsType: Omit<ThemeConfig, 'id' | 'tenantId' | 'productId'>, schemaOptions: { title: 'NewThemeConfig', exclude: [ 'id', 'tenantId', 'productId' ] })",
        "properties": {
          "accentColor": {
            "type": "string"
          },
          "headerColor": {
            "type": "string"
          },
          "highlightPanelColor": {
            "type": "string"
          },
          "checkoutPageColor": {
            "type": "string"
          },
          "cardsColor": {
            "type": "string"
          },
          "inputComponentsColor": {
            "type": "string"
          },
          "fontFamily": {
            "type": "string"
          },
          "fontSize": {
            "type": "number"
          },
          "borderShape": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "Omit<ThemeConfig, 'id' | 'tenantId' | 'productId'>"
      },
      "TenantWithRelations": {
        "title": "TenantWithRelations",
        "type": "object",
        "description": "(tsType: TenantWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "pincode": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "Active",
              "In-active",
              "Suspended",
              "Deleted"
            ]
          },
          "timezone": {
            "type": "string"
          },
          "firstLogin": {
            "type": "boolean"
          },
          "keycloakId": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "city",
          "country",
          "pincode",
          "state",
          "timezone"
        ],
        "additionalProperties": false,
        "x-typescript-type": "TenantWithRelations"
      },
      "TenantPartial": {
        "title": "TenantPartial",
        "type": "object",
        "description": "(tsType: Partial<Tenant>, schemaOptions: { partial: true })",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "pincode": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "Active",
              "In-active",
              "Suspended",
              "Deleted"
            ]
          },
          "timezone": {
            "type": "string"
          },
          "firstLogin": {
            "type": "boolean"
          },
          "keycloakId": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "Partial<Tenant>"
      },
      "Tenant": {
        "title": "Tenant",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "pincode": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "Active",
              "In-active",
              "Suspended",
              "Deleted"
            ]
          },
          "timezone": {
            "type": "string"
          },
          "firstLogin": {
            "type": "boolean"
          },
          "keycloakId": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "city",
          "country",
          "pincode",
          "state",
          "timezone"
        ],
        "additionalProperties": false
      },
      "NewTemplate": {
        "title": "NewTemplate",
        "type": "object",
        "description": "(tsType: Omit<Template, 'templateId'>, schemaOptions: { title: 'NewTemplate', exclude: [ 'templateId' ] })",
        "properties": {
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "content": {
            "type": "string"
          },
          "isDefault": {
            "type": "boolean"
          },
          "active": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "format": {
            "type": "string"
          },
          "version": {
            "type": "number"
          },
          "type": {
            "type": "string",
            "enum": [
              "Push",
              "Email",
              "SMS",
              "Doc"
            ]
          },
          "subject": {
            "type": "string"
          },
          "isOpted": {
            "type": "boolean"
          },
          "fileName": {
            "type": "string"
          },
          "fileFormat": {
            "type": "string",
            "enum": [
              ".pdf",
              ".doc"
            ]
          },
          "recipientEntity": {
            "type": "string"
          },
          "trialExpiryReminderLeadDays": {
            "type": "number"
          }
        },
        "required": [
          "tenantId",
          "isDefault",
          "active",
          "format",
          "version",
          "type",
          "isOpted",
          "trialExpiryReminderLeadDays"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Omit<Template, 'templateId'>"
      },
      "Template": {
        "title": "Template",
        "type": "object",
        "properties": {
          "templateId": {
            "type": "string",
            "format": "uuid"
          },
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "content": {
            "type": "string"
          },
          "isDefault": {
            "type": "boolean"
          },
          "active": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "format": {
            "type": "string"
          },
          "version": {
            "type": "number"
          },
          "type": {
            "type": "string",
            "enum": [
              "Push",
              "Email",
              "SMS",
              "Doc"
            ]
          },
          "subject": {
            "type": "string"
          },
          "isOpted": {
            "type": "boolean"
          },
          "fileName": {
            "type": "string"
          },
          "fileFormat": {
            "type": "string",
            "enum": [
              ".pdf",
              ".doc"
            ]
          },
          "recipientEntity": {
            "type": "string"
          },
          "trialExpiryReminderLeadDays": {
            "type": "number"
          }
        },
        "required": [
          "tenantId",
          "isDefault",
          "active",
          "format",
          "version",
          "type",
          "isOpted",
          "trialExpiryReminderLeadDays"
        ],
        "additionalProperties": false
      },
      "TemplatePartialExcluding_templateId_": {
        "title": "TemplatePartialExcluding_templateId_",
        "type": "object",
        "description": "(tsType: Omit<Partial<Template>, 'templateId'>, schemaOptions: { partial: true, exclude: [ 'templateId' ] })",
        "properties": {
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "content": {
            "type": "string"
          },
          "isDefault": {
            "type": "boolean"
          },
          "active": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "format": {
            "type": "string"
          },
          "version": {
            "type": "number"
          },
          "type": {
            "type": "string",
            "enum": [
              "Push",
              "Email",
              "SMS",
              "Doc"
            ]
          },
          "subject": {
            "type": "string"
          },
          "isOpted": {
            "type": "boolean"
          },
          "fileName": {
            "type": "string"
          },
          "fileFormat": {
            "type": "string",
            "enum": [
              ".pdf",
              ".doc"
            ]
          },
          "recipientEntity": {
            "type": "string"
          },
          "trialExpiryReminderLeadDays": {
            "type": "number"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "Omit<Partial<Template>, 'templateId'>"
      },
      "TemplateWithRelations": {
        "title": "TemplateWithRelations",
        "type": "object",
        "description": "(tsType: TemplateWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "templateId": {
            "type": "string",
            "format": "uuid"
          },
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "content": {
            "type": "string"
          },
          "isDefault": {
            "type": "boolean"
          },
          "active": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "format": {
            "type": "string"
          },
          "version": {
            "type": "number"
          },
          "type": {
            "type": "string",
            "enum": [
              "Push",
              "Email",
              "SMS",
              "Doc"
            ]
          },
          "subject": {
            "type": "string"
          },
          "isOpted": {
            "type": "boolean"
          },
          "fileName": {
            "type": "string"
          },
          "fileFormat": {
            "type": "string",
            "enum": [
              ".pdf",
              ".doc"
            ]
          },
          "recipientEntity": {
            "type": "string"
          },
          "trialExpiryReminderLeadDays": {
            "type": "number"
          }
        },
        "required": [
          "tenantId",
          "isDefault",
          "active",
          "format",
          "version",
          "type",
          "isOpted",
          "trialExpiryReminderLeadDays"
        ],
        "additionalProperties": false,
        "x-typescript-type": "TemplateWithRelations"
      },
      "TemplateVarWithRelations": {
        "title": "TemplateVarWithRelations",
        "type": "object",
        "description": "(tsType: TemplateVarWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "templateId": {
            "type": "string"
          },
          "entity": {
            "type": "string"
          },
          "variable": {
            "type": "string"
          },
          "constant": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "required": [
          "templateId"
        ],
        "additionalProperties": false,
        "x-typescript-type": "TemplateVarWithRelations"
      },
      "TemplateConfigWithRelations": {
        "title": "TemplateConfigWithRelations",
        "type": "object",
        "description": "(tsType: TemplateConfigWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "Push",
              "Email",
              "SMS",
              "Doc"
            ]
          },
          "from": {
            "type": "string"
          },
          "to": {
            "type": "string"
          },
          "cc": {
            "type": "string"
          },
          "bcc": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          },
          "isOpted": {
            "type": "boolean"
          },
          "fileName": {
            "type": "string"
          },
          "fileFormat": {
            "type": "string",
            "enum": [
              ".pdf",
              ".doc"
            ]
          }
        },
        "required": [
          "tenantId",
          "name",
          "type",
          "isOpted"
        ],
        "additionalProperties": false,
        "x-typescript-type": "TemplateConfigWithRelations"
      },
      "Subscription": {
        "title": "Subscription",
        "type": "object",
        "properties": {
          "termSubscriptionId": {
            "type": "string",
            "format": "uuid"
          },
          "version": {
            "type": "number"
          },
          "accountId": {
            "type": "string",
            "format": "uuid"
          },
          "accountName": {
            "type": "string"
          },
          "autoRenew": {
            "type": "boolean"
          },
          "subscriptionStartDate": {
            "type": "string",
            "format": "date"
          },
          "subscriptionEndDate": {
            "type": "string",
            "format": "date"
          },
          "termStartDate": {
            "type": "string",
            "format": "date"
          },
          "termEndDate": {
            "type": "string",
            "format": "date"
          },
          "status": {
            "type": "string",
            "enum": [
              "Draft",
              "Trial",
              "Paused",
              "Active",
              "Cancelled",
              "Expired"
            ]
          },
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "productId": {
            "type": "string",
            "format": "uuid"
          },
          "ratePlanId": {
            "type": "string",
            "format": "uuid"
          },
          "ratePlanName": {
            "type": "string"
          },
          "productName": {
            "type": "string"
          },
          "currency": {
            "type": "string",
            "enum": [
              "INR",
              "USD",
              "CAD",
              "GBP"
            ]
          },
          "billingPeriodId": {
            "type": "string",
            "format": "uuid"
          },
          "billingCycle": {
            "type": "number"
          },
          "isTrial": {
            "type": "boolean"
          },
          "trialPeriodId": {
            "type": "string",
            "format": "uuid"
          },
          "paymentMethodId": {
            "type": "string",
            "format": "uuid"
          },
          "createdTs": {
            "type": "string",
            "format": "date-time"
          },
          "updatedTs": {
            "type": "string",
            "format": "date-time"
          },
          "subscriptionId": {
            "type": "string",
            "format": "uuid"
          },
          "effectiveFromTs": {
            "type": "string",
            "format": "date-time"
          },
          "effectiveToTs": {
            "type": "string",
            "format": "date-time"
          },
          "isLatest": {
            "type": "boolean"
          },
          "subscriptionType": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          },
          "usedDays": {
            "type": "number"
          },
          "totalDays": {
            "type": "number"
          }
        },
        "required": [
          "version",
          "accountId",
          "autoRenew",
          "status",
          "tenantId",
          "productId",
          "ratePlanId",
          "currency",
          "billingCycle"
        ],
        "additionalProperties": false
      },
      "Subscriptions": {
        "title": "Subscriptions",
        "type": "object",
        "properties": {
          "subscriptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Subscription"
            }
          },
          "count": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "Feature": {
        "title": "Feature",
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "Active",
              "Inactive"
            ]
          },
          "tenantId": {
            "type": "string"
          },
          "featureCode": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "tenantId",
          "featureCode"
        ],
        "additionalProperties": false
      },
      "NewSubscription": {
        "title": "NewSubscription",
        "type": "object",
        "description": "(tsType: Omit<SubscriptionRequest, 'subscriptionId' | 'accountId' | 'tenantId' | 'subscriptionEndDate'>, schemaOptions: { title: 'NewSubscription', exclude: [ 'subscriptionId', 'accountId', 'tenantId', 'subscriptionEndDate' ] })",
        "properties": {
          "autoRenew": {
            "type": "boolean"
          },
          "subscriptionStartDate": {
            "type": "string",
            "format": "date"
          },
          "termStartDate": {
            "type": "string",
            "format": "date"
          },
          "termEndDate": {
            "type": "string",
            "format": "date"
          },
          "productId": {
            "type": "string",
            "format": "uuid"
          },
          "ratePlanId": {
            "type": "string",
            "format": "uuid"
          },
          "ratePlanName": {
            "type": "string"
          },
          "productName": {
            "type": "string"
          },
          "currency": {
            "type": "string",
            "enum": [
              "INR",
              "USD",
              "CAD",
              "GBP"
            ]
          },
          "billingCycle": {
            "type": "number"
          },
          "features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Feature"
            }
          },
          "isTrial": {
            "type": "boolean"
          },
          "paymentMethodId": {
            "type": "string",
            "format": "uuid"
          },
          "payNow": {
            "type": "string"
          }
        },
        "required": [
          "autoRenew",
          "productId",
          "ratePlanId",
          "ratePlanName",
          "currency",
          "billingCycle"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Omit<SubscriptionRequest, 'subscriptionId' | 'accountId' | 'tenantId' | 'subscriptionEndDate'>"
      },
      "SubscriptionRequest": {
        "title": "SubscriptionRequest",
        "type": "object",
        "properties": {
          "subscriptionId": {
            "type": "string",
            "format": "uuid"
          },
          "accountId": {
            "type": "string",
            "format": "uuid"
          },
          "autoRenew": {
            "type": "boolean"
          },
          "subscriptionStartDate": {
            "type": "string",
            "format": "date"
          },
          "subscriptionEndDate": {
            "type": "string",
            "format": "date"
          },
          "termStartDate": {
            "type": "string",
            "format": "date"
          },
          "termEndDate": {
            "type": "string",
            "format": "date"
          },
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "productId": {
            "type": "string",
            "format": "uuid"
          },
          "ratePlanId": {
            "type": "string",
            "format": "uuid"
          },
          "ratePlanName": {
            "type": "string"
          },
          "productName": {
            "type": "string"
          },
          "currency": {
            "type": "string",
            "enum": [
              "INR",
              "USD",
              "CAD",
              "GBP"
            ]
          },
          "billingCycle": {
            "type": "number"
          },
          "features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Feature"
            }
          },
          "isTrial": {
            "type": "boolean"
          },
          "paymentMethodId": {
            "type": "string",
            "format": "uuid"
          },
          "payNow": {
            "type": "string"
          }
        },
        "required": [
          "accountId",
          "autoRenew",
          "tenantId",
          "productId",
          "ratePlanId",
          "ratePlanName",
          "currency",
          "billingCycle"
        ],
        "additionalProperties": false
      },
      "calculateCost": {
        "title": "calculateCost",
        "type": "object",
        "description": "(tsType: Omit<CalculateCost, >, schemaOptions: { title: 'calculateCost', exclude: [] })",
        "properties": {
          "subscriptionId": {
            "type": "string",
            "format": "uuid"
          },
          "ratePlanId": {
            "type": "string",
            "format": "uuid"
          },
          "tillTs": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "Omit<CalculateCost, >"
      },
      "CalculateCost": {
        "title": "CalculateCost",
        "type": "object",
        "properties": {
          "subscriptionId": {
            "type": "string",
            "format": "uuid"
          },
          "ratePlanId": {
            "type": "string",
            "format": "uuid"
          },
          "tillTs": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "PauseSubscription": {
        "title": "PauseSubscription",
        "type": "object",
        "description": "(tsType: PauseSubscription, schemaOptions: { title: 'PauseSubscription' })",
        "properties": {
          "pauseOption": {
            "type": "string",
            "enum": [
              "Immediately",
              "End of Term",
              "Specific Date"
            ]
          },
          "pauseDate": {
            "type": "string",
            "format": "date"
          },
          "resumeDate": {
            "type": "string",
            "format": "date"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "PauseSubscription"
      },
      "ResumeSubscription": {
        "title": "ResumeSubscription",
        "type": "object",
        "description": "(tsType: ResumeSubscription, schemaOptions: { title: 'ResumeSubscription' })",
        "properties": {
          "resumeOption": {
            "type": "string",
            "enum": [
              "Immediately",
              "Specific Date"
            ]
          },
          "resumeDate": {
            "type": "string",
            "format": "date"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "ResumeSubscription"
      },
      "CancelSubscription": {
        "title": "CancelSubscription",
        "type": "object",
        "description": "(tsType: CancelSubscription, schemaOptions: { title: 'CancelSubscription' })",
        "properties": {
          "cancelOption": {
            "type": "string",
            "enum": [
              "Immediately",
              "End of Term",
              "Specific Date"
            ]
          },
          "cancelDate": {
            "type": "string",
            "format": "date"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "CancelSubscription"
      },
      "AuditLog": {
        "title": "AuditLog",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "action": {
            "type": "string"
          },
          "actedAt": {
            "type": "string"
          },
          "actedOn": {
            "type": "string"
          },
          "actionKey": {
            "type": "string"
          },
          "entityId": {
            "type": "string"
          },
          "actor": {
            "type": "string"
          },
          "before": {
            "type": "object"
          },
          "after": {
            "type": "object"
          }
        },
        "required": [
          "action",
          "actedAt",
          "actionKey",
          "actor"
        ],
        "additionalProperties": false
      },
      "Amendment": {
        "title": "Amendment",
        "type": "object",
        "properties": {
          "amendmentId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "bookingTs": {
            "type": "string",
            "format": "date-time"
          },
          "effectiveDate": {
            "type": "string",
            "format": "date"
          },
          "type": {
            "type": "string",
            "enum": [
              "Cancellation",
              "OwnerTransfer",
              "Renewal",
              "PauseSubscription",
              "ResumeSubscription",
              "TermsAndConditions",
              "NewProduct",
              "Remove Product",
              "Update Product"
            ]
          },
          "autoRenew": {
            "type": "boolean"
          },
          "pauseDate": {
            "type": "string",
            "format": "date"
          },
          "resumeDate": {
            "type": "string",
            "format": "date"
          },
          "termStartDate": {
            "type": "string",
            "format": "date"
          },
          "status": {
            "type": "string",
            "enum": [
              "Draft",
              "Cancelled",
              "Completed"
            ]
          },
          "source": {
            "type": "string",
            "enum": [
              "System",
              "Manual"
            ]
          },
          "subscriptionId": {
            "type": "string",
            "format": "uuid"
          },
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "destinationAccountId": {
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "type": "string"
          },
          "accountId": {
            "type": "string",
            "format": "uuid"
          },
          "accountName": {
            "type": "string"
          },
          "cancellationReason": {
            "type": "string"
          }
        },
        "required": [
          "effectiveDate",
          "type",
          "subscriptionId",
          "tenantId",
          "accountId"
        ],
        "additionalProperties": false
      },
      "NewAmendment": {
        "title": "NewAmendment",
        "type": "object",
        "description": "(tsType: Omit<Amendment, 'tenantId'>, schemaOptions: { title: 'NewAmendment', exclude: [ 'tenantId' ] })",
        "properties": {
          "amendmentId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "bookingTs": {
            "type": "string",
            "format": "date-time"
          },
          "effectiveDate": {
            "type": "string",
            "format": "date"
          },
          "type": {
            "type": "string",
            "enum": [
              "Cancellation",
              "OwnerTransfer",
              "Renewal",
              "PauseSubscription",
              "ResumeSubscription",
              "TermsAndConditions",
              "NewProduct",
              "Remove Product",
              "Update Product"
            ]
          },
          "autoRenew": {
            "type": "boolean"
          },
          "pauseDate": {
            "type": "string",
            "format": "date"
          },
          "resumeDate": {
            "type": "string",
            "format": "date"
          },
          "termStartDate": {
            "type": "string",
            "format": "date"
          },
          "status": {
            "type": "string",
            "enum": [
              "Draft",
              "Cancelled",
              "Completed"
            ]
          },
          "source": {
            "type": "string",
            "enum": [
              "System",
              "Manual"
            ]
          },
          "subscriptionId": {
            "type": "string",
            "format": "uuid"
          },
          "destinationAccountId": {
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "type": "string"
          },
          "accountId": {
            "type": "string",
            "format": "uuid"
          },
          "accountName": {
            "type": "string"
          },
          "cancellationReason": {
            "type": "string"
          }
        },
        "required": [
          "effectiveDate",
          "type",
          "subscriptionId",
          "accountId"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Omit<Amendment, 'tenantId'>"
      },
      "Amendments": {
        "title": "Amendments",
        "type": "object",
        "properties": {
          "amendments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Amendment"
            }
          },
          "count": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "AmendmentPartial": {
        "title": "AmendmentPartial",
        "type": "object",
        "description": "(tsType: Partial<Amendment>, schemaOptions: { partial: true })",
        "properties": {
          "amendmentId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "bookingTs": {
            "type": "string",
            "format": "date-time"
          },
          "effectiveDate": {
            "type": "string",
            "format": "date"
          },
          "type": {
            "type": "string",
            "enum": [
              "Cancellation",
              "OwnerTransfer",
              "Renewal",
              "PauseSubscription",
              "ResumeSubscription",
              "TermsAndConditions",
              "NewProduct",
              "Remove Product",
              "Update Product"
            ]
          },
          "autoRenew": {
            "type": "boolean"
          },
          "pauseDate": {
            "type": "string",
            "format": "date"
          },
          "resumeDate": {
            "type": "string",
            "format": "date"
          },
          "termStartDate": {
            "type": "string",
            "format": "date"
          },
          "status": {
            "type": "string",
            "enum": [
              "Draft",
              "Cancelled",
              "Completed"
            ]
          },
          "source": {
            "type": "string",
            "enum": [
              "System",
              "Manual"
            ]
          },
          "subscriptionId": {
            "type": "string",
            "format": "uuid"
          },
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "destinationAccountId": {
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "type": "string"
          },
          "accountId": {
            "type": "string",
            "format": "uuid"
          },
          "accountName": {
            "type": "string"
          },
          "cancellationReason": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "Partial<Amendment>"
      },
      "SubscriptionSettings": {
        "title": "SubscriptionSettings",
        "type": "object",
        "properties": {
          "settingId": {
            "type": "string",
            "format": "uuid"
          },
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "settingKey": {
            "type": "string",
            "nullable": false
          },
          "settingValue": {
            "type": "object"
          },
          "createdTs": {
            "type": "string",
            "format": "date-time",
            "nullable": false
          },
          "updatedTs": {
            "type": "string",
            "format": "date-time",
            "nullable": false
          },
          "category": {
            "type": "string",
            "enum": [
              "Subscription",
              "Pause Subscription",
              "Resume Subscription",
              "Cancel Subscription"
            ]
          }
        },
        "required": [
          "settingId",
          "settingKey",
          "settingValue",
          "category"
        ],
        "additionalProperties": false
      },
      "NewSubscriptionSettings": {
        "title": "NewSubscriptionSettings",
        "type": "object",
        "description": "(tsType: Omit<SubscriptionSettings, 'settingId' | 'tenantId'>, schemaOptions: { title: 'NewSubscriptionSettings', exclude: [ 'settingId', 'tenantId' ] })",
        "properties": {
          "settingKey": {
            "type": "string",
            "nullable": false
          },
          "settingValue": {
            "type": "object"
          },
          "createdTs": {
            "type": "string",
            "format": "date-time",
            "nullable": false
          },
          "updatedTs": {
            "type": "string",
            "format": "date-time",
            "nullable": false
          },
          "category": {
            "type": "string",
            "enum": [
              "Subscription",
              "Pause Subscription",
              "Resume Subscription",
              "Cancel Subscription"
            ]
          }
        },
        "required": [
          "settingKey",
          "settingValue",
          "category"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Omit<SubscriptionSettings, 'settingId' | 'tenantId'>"
      },
      "SubscriptionSettingsWithRelations": {
        "title": "SubscriptionSettingsWithRelations",
        "type": "object",
        "description": "(tsType: SubscriptionSettingsWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "settingId": {
            "type": "string",
            "format": "uuid"
          },
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "settingKey": {
            "type": "string",
            "nullable": false
          },
          "settingValue": {
            "type": "object"
          },
          "createdTs": {
            "type": "string",
            "format": "date-time",
            "nullable": false
          },
          "updatedTs": {
            "type": "string",
            "format": "date-time",
            "nullable": false
          },
          "category": {
            "type": "string",
            "enum": [
              "Subscription",
              "Pause Subscription",
              "Resume Subscription",
              "Cancel Subscription"
            ]
          }
        },
        "required": [
          "settingId",
          "settingKey",
          "settingValue",
          "category"
        ],
        "additionalProperties": false,
        "x-typescript-type": "SubscriptionSettingsWithRelations"
      },
      "PauseOptions": {
        "title": "PauseOptions",
        "type": "object",
        "properties": {
          "unbilledChargesHandling": {
            "type": "string"
          },
          "invoiceDunningHandling": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ResumeOptions": {
        "title": "ResumeOptions",
        "type": "object",
        "properties": {
          "unpaidInvoicesHandling": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "SettingPartial": {
        "title": "SettingPartial",
        "type": "object",
        "description": "(tsType: Partial<Setting>, schemaOptions: { partial: true })",
        "properties": {
          "tenantId": {
            "type": "string"
          },
          "entityType": {
            "type": "string"
          },
          "pauseOptions": {
            "$ref": "#/components/schemas/PauseOptions"
          },
          "resumeOptions": {
            "$ref": "#/components/schemas/ResumeOptions"
          },
          "accessContinuity": {
            "type": "boolean"
          },
          "prepayFlatFee": {
            "type": "boolean"
          },
          "proratedBilling": {
            "type": "boolean"
          },
          "upfrontCostAdjustment": {
            "type": "boolean"
          },
          "netTermDays": {
            "type": "number"
          },
          "dunningDays": {
            "type": "number"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "Partial<Setting>"
      },
      "Setting": {
        "title": "Setting",
        "type": "object",
        "properties": {
          "tenantId": {
            "type": "string"
          },
          "entityType": {
            "type": "string"
          },
          "pauseOptions": {
            "$ref": "#/components/schemas/PauseOptions"
          },
          "resumeOptions": {
            "$ref": "#/components/schemas/ResumeOptions"
          },
          "accessContinuity": {
            "type": "boolean"
          },
          "prepayFlatFee": {
            "type": "boolean"
          },
          "proratedBilling": {
            "type": "boolean"
          },
          "upfrontCostAdjustment": {
            "type": "boolean"
          },
          "netTermDays": {
            "type": "number"
          },
          "dunningDays": {
            "type": "number"
          }
        },
        "required": [
          "tenantId",
          "entityType",
          "accessContinuity",
          "proratedBilling"
        ],
        "additionalProperties": false
      },
      "PermissionItem": {
        "title": "PermissionItem",
        "type": "object",
        "properties": {
          "actions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "resources": {
            "type": "object"
          }
        },
        "additionalProperties": false
      },
      "Permission": {
        "title": "Permission",
        "type": "object",
        "properties": {
          "deny": {
            "$ref": "#/components/schemas/PermissionItem"
          },
          "allow": {
            "$ref": "#/components/schemas/PermissionItem"
          }
        },
        "additionalProperties": false
      },
      "RoleWithRelations": {
        "title": "RoleWithRelations",
        "type": "object",
        "description": "(tsType: RoleWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "name": {
            "type": "string"
          },
          "tenantId": {
            "type": "string"
          },
          "permission": {
            "$ref": "#/components/schemas/Permission"
          },
          "menu": {
            "type": "object"
          },
          "type": {
            "type": "string"
          },
          "roleId": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "RoleWithRelations"
      },
      "NotificationEvent": {
        "title": "NotificationEvent",
        "type": "object",
        "properties": {
          "data": {
            "type": "object"
          },
          "eventType": {
            "type": "string",
            "enum": [
              "Subscription Created",
              "Subscription Cancelled",
              "Subscription Deleted",
              "Subscription Paused",
              "Subscription Expired",
              "Payment Received",
              "Customer Entered Collections",
              "Invoice Generated",
              "New Subscriber Added",
              "Subscriber Left"
            ]
          },
          "date": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "eventType",
          "date"
        ],
        "additionalProperties": false
      },
      "RatePlan": {
        "title": "RatePlan",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": false,
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": false
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "createdTs": {
            "type": "string",
            "format": "date-time",
            "nullable": false
          },
          "updatedTs": {
            "type": "string",
            "format": "date-time",
            "nullable": false
          },
          "planLevel": {
            "type": "number",
            "nullable": false
          },
          "isPopular": {
            "type": "boolean",
            "nullable": false
          },
          "productId": {
            "type": "string",
            "nullable": false,
            "format": "uuid"
          },
          "planId": {
            "type": "string",
            "nullable": false
          },
          "selfserve": {
            "type": "boolean",
            "nullable": false
          },
          "checkout": {
            "type": "boolean",
            "nullable": false
          }
        },
        "required": [
          "name",
          "planLevel",
          "isPopular",
          "selfserve",
          "checkout"
        ],
        "additionalProperties": false
      },
      "NewRatePlan": {
        "title": "NewRatePlan",
        "type": "object",
        "description": "(tsType: Omit<RatePlan, >, schemaOptions: { title: 'NewRatePlan', exclude: [] })",
        "properties": {
          "id": {
            "type": "string",
            "nullable": false,
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": false
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "createdTs": {
            "type": "string",
            "format": "date-time",
            "nullable": false
          },
          "updatedTs": {
            "type": "string",
            "format": "date-time",
            "nullable": false
          },
          "planLevel": {
            "type": "number",
            "nullable": false
          },
          "isPopular": {
            "type": "boolean",
            "nullable": false
          },
          "productId": {
            "type": "string",
            "nullable": false,
            "format": "uuid"
          },
          "planId": {
            "type": "string",
            "nullable": false
          },
          "selfserve": {
            "type": "boolean",
            "nullable": false
          },
          "checkout": {
            "type": "boolean",
            "nullable": false
          }
        },
        "required": [
          "name",
          "planLevel",
          "isPopular",
          "selfserve",
          "checkout"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Omit<RatePlan, >"
      },
      "RatePlanPartial": {
        "title": "RatePlanPartial",
        "type": "object",
        "description": "(tsType: Partial<RatePlan>, schemaOptions: { partial: true })",
        "properties": {
          "id": {
            "type": "string",
            "nullable": false,
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": false
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "createdTs": {
            "type": "string",
            "format": "date-time",
            "nullable": false
          },
          "updatedTs": {
            "type": "string",
            "format": "date-time",
            "nullable": false
          },
          "planLevel": {
            "type": "number",
            "nullable": false
          },
          "isPopular": {
            "type": "boolean",
            "nullable": false
          },
          "productId": {
            "type": "string",
            "nullable": false,
            "format": "uuid"
          },
          "planId": {
            "type": "string",
            "nullable": false
          },
          "selfserve": {
            "type": "boolean",
            "nullable": false
          },
          "checkout": {
            "type": "boolean",
            "nullable": false
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "Partial<RatePlan>"
      },
      "RatePlanWithRelations": {
        "title": "RatePlanWithRelations",
        "type": "object",
        "description": "(tsType: RatePlanWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "id": {
            "type": "string",
            "nullable": false,
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": false
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "createdTs": {
            "type": "string",
            "format": "date-time",
            "nullable": false
          },
          "updatedTs": {
            "type": "string",
            "format": "date-time",
            "nullable": false
          },
          "planLevel": {
            "type": "number",
            "nullable": false
          },
          "isPopular": {
            "type": "boolean",
            "nullable": false
          },
          "productId": {
            "type": "string",
            "nullable": false,
            "format": "uuid"
          },
          "planId": {
            "type": "string",
            "nullable": false
          },
          "selfserve": {
            "type": "boolean",
            "nullable": false
          },
          "checkout": {
            "type": "boolean",
            "nullable": false
          }
        },
        "required": [
          "name",
          "planLevel",
          "isPopular",
          "selfserve",
          "checkout"
        ],
        "additionalProperties": false,
        "x-typescript-type": "RatePlanWithRelations"
      },
      "RatePlansWithRelations": {
        "title": "RatePlansWithRelations",
        "type": "object",
        "description": "(tsType: RatePlansWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "ratePlans": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RatePlan"
            }
          },
          "count": {
            "type": "number"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "RatePlansWithRelations"
      },
      "RatePlanCharge": {
        "title": "RatePlanCharge",
        "type": "object",
        "properties": {
          "chargeId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "ratePlanId": {
            "type": "string",
            "format": "uuid"
          },
          "chargeType": {
            "type": "string",
            "enum": [
              "One-Time",
              "Recurring",
              "Usage",
              "On Demand"
            ]
          },
          "chargeModel": {
            "type": "string",
            "enum": [
              "Flat Fee Pricing",
              "Per Unit Pricing",
              "Volume Pricing",
              "Tiered Pricing"
            ]
          },
          "price": {
            "type": "number"
          },
          "quantity": {
            "type": "number"
          },
          "overage": {
            "type": "number"
          },
          "measuringUnit": {
            "type": "string"
          },
          "pricePerUnit": {
            "type": "number"
          },
          "itemId": {
            "type": "string",
            "format": "uuid"
          },
          "currency": {
            "type": "string",
            "enum": [
              "INR",
              "USD",
              "CAD",
              "GBP"
            ]
          },
          "paymentTiming": {
            "type": "string",
            "enum": [
              "Start",
              "End"
            ]
          },
          "billingPeriod": {
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "type": "string",
            "enum": [
              "Draft",
              "Active",
              "Completed"
            ]
          }
        },
        "required": [
          "chargeType",
          "chargeModel"
        ],
        "additionalProperties": false
      },
      "Addon": {
        "title": "Addon",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": false
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "enum": [
              "Draft",
              "Active",
              "Inactive"
            ]
          },
          "createdTs": {
            "type": "string",
            "format": "date-time",
            "nullable": false
          },
          "updatedTs": {
            "type": "string",
            "format": "date-time",
            "nullable": false
          },
          "addonKey": {
            "type": "string",
            "nullable": false
          },
          "externalName": {
            "type": "string",
            "nullable": true
          },
          "unitOfMeasurement": {
            "type": "string",
            "nullable": true
          },
          "isVisibleInPortal": {
            "type": "boolean",
            "nullable": false
          },
          "productId": {
            "type": "string",
            "format": "uuid"
          },
          "tenantId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "name",
          "status",
          "addonKey",
          "isVisibleInPortal",
          "productId"
        ],
        "additionalProperties": false
      },
      "RatePlanPriceDetails": {
        "title": "RatePlanPriceDetails",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": false,
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": false
          },
          "planId": {
            "type": "string",
            "nullable": false
          },
          "productId": {
            "type": "string",
            "nullable": false,
            "format": "uuid"
          },
          "tenantId": {
            "type": "string",
            "nullable": false,
            "format": "uuid"
          },
          "isTrial": {
            "type": "boolean",
            "nullable": false
          },
          "status": {
            "type": "string",
            "nullable": false,
            "enum": [
              "Draft",
              "In Review",
              "Approved",
              "Active",
              "Inactive"
            ]
          },
          "productName": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "requireBillingAtSignup": {
            "type": "boolean",
            "nullable": false
          },
          "setupFee": {
            "type": "number",
            "nullable": false
          },
          "termLength": {
            "type": "number",
            "nullable": false
          },
          "autoRenew": {
            "type": "boolean",
            "nullable": false
          },
          "pricingModel": {
            "type": "string",
            "nullable": false,
            "enum": [
              "Fixed",
              "Volume",
              "Per Unit",
              "Tier",
              "Hybrid"
            ]
          },
          "currencyCode": {
            "type": "string",
            "nullable": false,
            "enum": [
              "INR",
              "USD",
              "CAD",
              "GBP"
            ]
          },
          "price": {
            "type": "number",
            "nullable": false
          },
          "ratePlanId": {
            "type": "string",
            "nullable": false,
            "format": "uuid"
          },
          "trialPeriodId": {
            "type": "string",
            "nullable": true,
            "format": "uuid"
          },
          "billingPeriodId": {
            "type": "string",
            "nullable": false,
            "format": "uuid"
          },
          "isAutoCalculated": {
            "type": "boolean",
            "nullable": false
          },
          "currencyId": {
            "type": "string",
            "nullable": false,
            "format": "uuid"
          },
          "taxIncluded": {
            "type": "boolean",
            "nullable": false
          },
          "charges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RatePlanCharge"
            }
          },
          "addons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Addon"
            }
          }
        },
        "required": [
          "name",
          "productId",
          "tenantId",
          "isTrial",
          "status",
          "requireBillingAtSignup",
          "setupFee",
          "termLength",
          "autoRenew",
          "pricingModel",
          "currencyCode",
          "price",
          "billingPeriodId",
          "isAutoCalculated",
          "currencyId",
          "taxIncluded"
        ],
        "additionalProperties": false
      },
      "RatePlanChargeRequest": {
        "title": "RatePlanChargeRequest",
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "chargeType": {
            "type": "string",
            "enum": [
              "One-Time",
              "Recurring",
              "Usage",
              "On Demand"
            ]
          },
          "chargeModel": {
            "type": "string",
            "enum": [
              "Flat Fee Pricing",
              "Per Unit Pricing",
              "Volume Pricing",
              "Tiered Pricing"
            ]
          },
          "price": {
            "type": "number"
          },
          "quantity": {
            "type": "number"
          },
          "overage": {
            "type": "number"
          },
          "measuringUnit": {
            "type": "string"
          },
          "itemId": {
            "type": "string",
            "format": "uuid"
          },
          "paymentTiming": {
            "type": "string",
            "enum": [
              "Start",
              "End"
            ]
          }
        },
        "required": [
          "chargeType",
          "chargeModel"
        ],
        "additionalProperties": false
      },
      "RatePlanAddonRequest": {
        "title": "RatePlanAddonRequest",
        "type": "object",
        "properties": {
          "addonId": {
            "type": "string",
            "nullable": false,
            "format": "uuid"
          },
          "quantity": {
            "type": "number"
          }
        },
        "required": [
          "addonId"
        ],
        "additionalProperties": false
      },
      "NewRatePlanPriceChargesAddons": {
        "title": "NewRatePlanPriceChargesAddons",
        "type": "object",
        "description": "(tsType: Omit<RatePlanPriceRequest, 'ratePlanId' | 'status' | 'name' | 'productId' | 'tenantId' | 'productName' | 'currencyId'>, schemaOptions: { title: 'NewRatePlanPriceChargesAddons', exclude: [ 'ratePlanId', 'status', 'name', 'productId', 'tenantId', 'productName', 'currencyId' ] })",
        "properties": {
          "id": {
            "type": "string",
            "nullable": false,
            "format": "uuid"
          },
          "planId": {
            "type": "string",
            "nullable": false
          },
          "isTrial": {
            "type": "boolean",
            "nullable": false
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "requireBillingAtSignup": {
            "type": "boolean",
            "nullable": false
          },
          "setupFee": {
            "type": "number",
            "nullable": false
          },
          "termLength": {
            "type": "number",
            "nullable": false
          },
          "autoRenew": {
            "type": "boolean",
            "nullable": false
          },
          "pricingModel": {
            "type": "string",
            "nullable": false,
            "enum": [
              "Fixed",
              "Volume",
              "Per Unit",
              "Tier",
              "Hybrid"
            ]
          },
          "currencyCode": {
            "type": "string",
            "nullable": false,
            "enum": [
              "INR",
              "USD",
              "CAD",
              "GBP"
            ]
          },
          "price": {
            "type": "number",
            "nullable": false
          },
          "trialPeriodId": {
            "type": "string",
            "nullable": true,
            "format": "uuid"
          },
          "billingPeriodId": {
            "type": "string",
            "nullable": false,
            "format": "uuid"
          },
          "isAutoCalculated": {
            "type": "boolean",
            "nullable": false
          },
          "taxIncluded": {
            "type": "boolean",
            "nullable": false
          },
          "charges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RatePlanChargeRequest"
            }
          },
          "addons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RatePlanAddonRequest"
            }
          }
        },
        "required": [
          "isTrial",
          "requireBillingAtSignup",
          "setupFee",
          "termLength",
          "autoRenew",
          "pricingModel",
          "currencyCode",
          "price",
          "billingPeriodId",
          "isAutoCalculated",
          "taxIncluded"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Omit<RatePlanPriceRequest, 'ratePlanId' | 'status' | 'name' | 'productId' | 'tenantId' | 'productName' | 'currencyId'>"
      },
      "RatePlanPriceRequest": {
        "title": "RatePlanPriceRequest",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": false,
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": false
          },
          "planId": {
            "type": "string",
            "nullable": false
          },
          "productId": {
            "type": "string",
            "nullable": false,
            "format": "uuid"
          },
          "tenantId": {
            "type": "string",
            "nullable": false,
            "format": "uuid"
          },
          "isTrial": {
            "type": "boolean",
            "nullable": false
          },
          "status": {
            "type": "string",
            "nullable": false,
            "enum": [
              "Draft",
              "In Review",
              "Approved",
              "Active",
              "Inactive"
            ]
          },
          "productName": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "requireBillingAtSignup": {
            "type": "boolean",
            "nullable": false
          },
          "setupFee": {
            "type": "number",
            "nullable": false
          },
          "termLength": {
            "type": "number",
            "nullable": false
          },
          "autoRenew": {
            "type": "boolean",
            "nullable": false
          },
          "pricingModel": {
            "type": "string",
            "nullable": false,
            "enum": [
              "Fixed",
              "Volume",
              "Per Unit",
              "Tier",
              "Hybrid"
            ]
          },
          "currencyCode": {
            "type": "string",
            "nullable": false,
            "enum": [
              "INR",
              "USD",
              "CAD",
              "GBP"
            ]
          },
          "price": {
            "type": "number",
            "nullable": false
          },
          "ratePlanId": {
            "type": "string",
            "nullable": false,
            "format": "uuid"
          },
          "trialPeriodId": {
            "type": "string",
            "nullable": true,
            "format": "uuid"
          },
          "billingPeriodId": {
            "type": "string",
            "nullable": false,
            "format": "uuid"
          },
          "isAutoCalculated": {
            "type": "boolean",
            "nullable": false
          },
          "currencyId": {
            "type": "string",
            "nullable": false,
            "format": "uuid"
          },
          "taxIncluded": {
            "type": "boolean",
            "nullable": false
          },
          "charges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RatePlanChargeRequest"
            }
          },
          "addons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RatePlanAddonRequest"
            }
          }
        },
        "required": [
          "name",
          "productId",
          "tenantId",
          "isTrial",
          "status",
          "requireBillingAtSignup",
          "setupFee",
          "termLength",
          "autoRenew",
          "pricingModel",
          "currencyCode",
          "price",
          "billingPeriodId",
          "isAutoCalculated",
          "currencyId",
          "taxIncluded"
        ],
        "additionalProperties": false
      },
      "RatePlanPriceDetailsWithRelations": {
        "title": "RatePlanPriceDetailsWithRelations",
        "type": "object",
        "description": "(tsType: RatePlanPriceDetailsWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "id": {
            "type": "string",
            "nullable": false,
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": false
          },
          "planId": {
            "type": "string",
            "nullable": false
          },
          "productId": {
            "type": "string",
            "nullable": false,
            "format": "uuid"
          },
          "tenantId": {
            "type": "string",
            "nullable": false,
            "format": "uuid"
          },
          "isTrial": {
            "type": "boolean",
            "nullable": false
          },
          "status": {
            "type": "string",
            "nullable": false,
            "enum": [
              "Draft",
              "In Review",
              "Approved",
              "Active",
              "Inactive"
            ]
          },
          "productName": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "requireBillingAtSignup": {
            "type": "boolean",
            "nullable": false
          },
          "setupFee": {
            "type": "number",
            "nullable": false
          },
          "termLength": {
            "type": "number",
            "nullable": false
          },
          "autoRenew": {
            "type": "boolean",
            "nullable": false
          },
          "pricingModel": {
            "type": "string",
            "nullable": false,
            "enum": [
              "Fixed",
              "Volume",
              "Per Unit",
              "Tier",
              "Hybrid"
            ]
          },
          "currencyCode": {
            "type": "string",
            "nullable": false,
            "enum": [
              "INR",
              "USD",
              "CAD",
              "GBP"
            ]
          },
          "price": {
            "type": "number",
            "nullable": false
          },
          "ratePlanId": {
            "type": "string",
            "nullable": false,
            "format": "uuid"
          },
          "trialPeriodId": {
            "type": "string",
            "nullable": true,
            "format": "uuid"
          },
          "billingPeriodId": {
            "type": "string",
            "nullable": false,
            "format": "uuid"
          },
          "isAutoCalculated": {
            "type": "boolean",
            "nullable": false
          },
          "currencyId": {
            "type": "string",
            "nullable": false,
            "format": "uuid"
          },
          "taxIncluded": {
            "type": "boolean",
            "nullable": false
          },
          "charges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RatePlanCharge"
            }
          },
          "addons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Addon"
            }
          }
        },
        "required": [
          "name",
          "productId",
          "tenantId",
          "isTrial",
          "status",
          "requireBillingAtSignup",
          "setupFee",
          "termLength",
          "autoRenew",
          "pricingModel",
          "currencyCode",
          "price",
          "billingPeriodId",
          "isAutoCalculated",
          "currencyId",
          "taxIncluded"
        ],
        "additionalProperties": false,
        "x-typescript-type": "RatePlanPriceDetailsWithRelations"
      },
      "Account": {
        "title": "Account",
        "type": "object",
        "properties": {
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "accountId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "accountType": {
            "type": "string",
            "enum": [
              "Organisation",
              "Individual"
            ]
          },
          "parentAccountId": {
            "type": "string",
            "format": "uuid"
          },
          "sameAsSoldTo": {
            "type": "boolean"
          },
          "soldToId": {
            "type": "string",
            "format": "uuid"
          },
          "billToId": {
            "type": "string",
            "format": "uuid"
          },
          "autoPay": {
            "type": "boolean"
          },
          "currency": {
            "type": "string",
            "enum": [
              "INR",
              "USD",
              "CAD",
              "GBP"
            ]
          },
          "balance": {
            "type": "number"
          },
          "mrr": {
            "type": "number"
          },
          "netTermDays": {
            "type": "number"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "enum": [
              "Draft",
              "In Trial",
              "Active",
              "Inactive",
              "Dormant"
            ]
          }
        },
        "required": [
          "tenantId",
          "accountId",
          "phone",
          "email",
          "sameAsSoldTo",
          "status"
        ],
        "additionalProperties": false
      },
      "AccountContact": {
        "title": "AccountContact",
        "type": "object",
        "properties": {
          "contactId": {
            "type": "string",
            "format": "uuid"
          },
          "fullName": {
            "type": "string"
          },
          "orgName": {
            "type": "string",
            "description": "Mandatory if accountType is Organization. As its name suggests, it is name of the organisation."
          },
          "accountId": {
            "type": "string",
            "format": "uuid"
          },
          "address": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        },
        "required": [
          "fullName",
          "accountId",
          "phone",
          "email"
        ],
        "additionalProperties": false
      },
      "NewAccountInfo": {
        "title": "NewAccountInfo",
        "type": "object",
        "description": "(tsType: Omit<AccountInfo, 'accountId' | 'tenantId'>, schemaOptions: { title: 'NewAccountInfo', exclude: [ 'accountId', 'tenantId' ] })",
        "properties": {
          "name": {
            "type": "string",
            "description": "Optional <br>Name of the account. It will be organization name if accountType is \"Organisation\" and concatenation of first name and last name if accountType is \"Individual\""
          },
          "address": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "description": "root email id of the user."
          },
          "accountType": {
            "type": "string",
            "description": "Represents the type of customer.",
            "enum": [
              "Organisation",
              "Individual"
            ]
          },
          "parentAccountId": {
            "type": "string",
            "description": "Optional <br>In an account hierarchy, the parent account ID refers to the unique identifier of the account that is considered the parent or superior account in the hierarchy. It represents the relationship between different accounts within a hierarchical structure.",
            "format": "uuid"
          },
          "communicationProfile": {
            "$ref": "#/components/schemas/AccountContact"
          },
          "sameAsSoldTo": {
            "type": "boolean",
            "description": "Set to true if billing contact is same as sold to contact otherwise false."
          },
          "billingProfile": {
            "$ref": "#/components/schemas/AccountContact"
          },
          "autoPay": {
            "type": "boolean",
            "description": "Optional <br>Auto Pay refers to the automatic collection of payment for a subscription or service.<br>Default value: false"
          },
          "currency": {
            "type": "string",
            "description": "Preferred currency customer would like to deal in. <br>Not mandatory to create a customer but it should be updated before subscription to any service.",
            "enum": [
              "INR",
              "USD",
              "CAD",
              "GBP"
            ]
          },
          "balance": {
            "type": "number",
            "description": "Balance of the account"
          },
          "mrr": {
            "type": "number"
          },
          "netTermDays": {
            "type": "number",
            "description": "Optional <br>Net term days, also known as payment terms or credit terms, refer to the number of days a buyer has to pay an invoice or outstanding balance to a seller or vendor. It specifies the timeframe within which payment is expected to be made after the delivery of goods or completion of services."
          },
          "createdOn": {
            "type": "string",
            "description": "Timestamp when customer is created. No need to mention as system automatically capture this.",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "description": "Represents current status of customer.",
            "enum": [
              "Draft",
              "In Trial",
              "Active",
              "Inactive",
              "Dormant"
            ]
          },
          "stage": {
            "type": "string",
            "enum": [
              "Stage1",
              "Stage2",
              "Stage3",
              "Stage4",
              "Completed"
            ]
          }
        },
        "required": [
          "phone",
          "email"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Omit<AccountInfo, 'accountId' | 'tenantId'>"
      },
      "AccountInfo": {
        "title": "AccountInfo",
        "type": "object",
        "properties": {
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "accountId": {
            "type": "string",
            "description": "Unique Identifier of customer",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Optional <br>Name of the account. It will be organization name if accountType is \"Organisation\" and concatenation of first name and last name if accountType is \"Individual\""
          },
          "address": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "description": "root email id of the user."
          },
          "accountType": {
            "type": "string",
            "description": "Represents the type of customer.",
            "enum": [
              "Organisation",
              "Individual"
            ]
          },
          "parentAccountId": {
            "type": "string",
            "description": "Optional <br>In an account hierarchy, the parent account ID refers to the unique identifier of the account that is considered the parent or superior account in the hierarchy. It represents the relationship between different accounts within a hierarchical structure.",
            "format": "uuid"
          },
          "communicationProfile": {
            "$ref": "#/components/schemas/AccountContact"
          },
          "sameAsSoldTo": {
            "type": "boolean",
            "description": "Set to true if billing contact is same as sold to contact otherwise false."
          },
          "billingProfile": {
            "$ref": "#/components/schemas/AccountContact"
          },
          "autoPay": {
            "type": "boolean",
            "description": "Optional <br>Auto Pay refers to the automatic collection of payment for a subscription or service.<br>Default value: false"
          },
          "currency": {
            "type": "string",
            "description": "Preferred currency customer would like to deal in. <br>Not mandatory to create a customer but it should be updated before subscription to any service.",
            "enum": [
              "INR",
              "USD",
              "CAD",
              "GBP"
            ]
          },
          "balance": {
            "type": "number",
            "description": "Balance of the account"
          },
          "mrr": {
            "type": "number"
          },
          "netTermDays": {
            "type": "number",
            "description": "Optional <br>Net term days, also known as payment terms or credit terms, refer to the number of days a buyer has to pay an invoice or outstanding balance to a seller or vendor. It specifies the timeframe within which payment is expected to be made after the delivery of goods or completion of services."
          },
          "createdOn": {
            "type": "string",
            "description": "Timestamp when customer is created. No need to mention as system automatically capture this.",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "description": "Represents current status of customer.",
            "enum": [
              "Draft",
              "In Trial",
              "Active",
              "Inactive",
              "Dormant"
            ]
          },
          "stage": {
            "type": "string",
            "enum": [
              "Stage1",
              "Stage2",
              "Stage3",
              "Stage4",
              "Completed"
            ]
          }
        },
        "required": [
          "tenantId",
          "accountId",
          "phone",
          "email"
        ],
        "additionalProperties": false
      },
      "PaymentGatewayMetadataWithRelations": {
        "title": "PaymentGatewayMetadataWithRelations",
        "type": "object",
        "description": "(tsType: PaymentGatewayMetadataWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "paymentGateway": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "cards": {
            "type": "boolean"
          },
          "netBanking": {
            "type": "boolean"
          },
          "upi": {
            "type": "boolean"
          },
          "bankTransfer": {
            "type": "boolean"
          },
          "sepaDirectDebit": {
            "type": "boolean"
          },
          "achDebit": {
            "type": "boolean"
          },
          "amazonPay": {
            "type": "boolean"
          },
          "paypal": {
            "type": "boolean"
          },
          "applePay": {
            "type": "boolean"
          }
        },
        "required": [
          "paymentGateway",
          "cards",
          "netBanking",
          "upi",
          "bankTransfer",
          "sepaDirectDebit",
          "achDebit",
          "amazonPay",
          "paypal",
          "applePay"
        ],
        "additionalProperties": false,
        "x-typescript-type": "PaymentGatewayMetadataWithRelations"
      },
      "Product": {
        "title": "Product",
        "type": "object",
        "properties": {
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "productId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "effectiveFromDate": {
            "type": "string",
            "format": "date"
          },
          "effectiveToDate": {
            "type": "string",
            "format": "date"
          },
          "logoPath": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "Draft",
              "Active",
              "Inactive"
            ]
          }
        },
        "required": [
          "name",
          "effectiveFromDate"
        ],
        "additionalProperties": false
      },
      "ProductsWithRelations": {
        "title": "ProductsWithRelations",
        "type": "object",
        "description": "(tsType: ProductsWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Product"
            }
          },
          "count": {
            "type": "number"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "ProductsWithRelations"
      },
      "NewProduct": {
        "title": "NewProduct",
        "type": "object",
        "description": "(tsType: Omit<Product, 'tenantId' | 'effectiveFromDate' | 'effectiveToDate' | 'status' | 'features'>, schemaOptions: { title: 'NewProduct', exclude: [ 'tenantId', 'effectiveFromDate', 'effectiveToDate', 'status', 'features' ] })",
        "properties": {
          "productId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "logoPath": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Omit<Product, 'tenantId' | 'effectiveFromDate' | 'effectiveToDate' | 'status' | 'features'>"
      },
      "ProductWithRelations": {
        "title": "ProductWithRelations",
        "type": "object",
        "description": "(tsType: ProductWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "productId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "effectiveFromDate": {
            "type": "string",
            "format": "date"
          },
          "effectiveToDate": {
            "type": "string",
            "format": "date"
          },
          "logoPath": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "Draft",
              "Active",
              "Inactive"
            ]
          }
        },
        "required": [
          "name",
          "effectiveFromDate"
        ],
        "additionalProperties": false,
        "x-typescript-type": "ProductWithRelations"
      },
      "ProductPartial": {
        "title": "ProductPartial",
        "type": "object",
        "description": "(tsType: Partial<Product>, schemaOptions: { partial: true })",
        "properties": {
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "productId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "effectiveFromDate": {
            "type": "string",
            "format": "date"
          },
          "effectiveToDate": {
            "type": "string",
            "format": "date"
          },
          "logoPath": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "Draft",
              "Active",
              "Inactive"
            ]
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "Partial<Product>"
      },
      "PeriodWithRelations": {
        "title": "PeriodWithRelations",
        "type": "object",
        "description": "(tsType: PeriodWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "id": {
            "type": "string",
            "nullable": false,
            "format": "uuid"
          },
          "periodName": {
            "type": "string",
            "nullable": false
          },
          "term": {
            "type": "number",
            "nullable": false
          },
          "period": {
            "type": "string",
            "nullable": false,
            "enum": [
              "Day",
              "Week",
              "Month",
              "Year"
            ]
          },
          "tenantId": {
            "type": "string",
            "nullable": false
          },
          "isOpted": {
            "type": "boolean",
            "nullable": false
          },
          "isTrial": {
            "type": "boolean",
            "nullable": false
          }
        },
        "required": [
          "periodName",
          "term",
          "period"
        ],
        "additionalProperties": false,
        "x-typescript-type": "PeriodWithRelations"
      },
      "Payment": {
        "title": "Payment",
        "type": "object",
        "properties": {
          "paymentId": {
            "type": "string",
            "format": "uuid"
          },
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "accountId": {
            "type": "string",
            "format": "uuid"
          },
          "requestedAmount": {
            "type": "number"
          },
          "amountPaid": {
            "type": "number"
          },
          "currency": {
            "type": "string",
            "enum": [
              "INR",
              "USD",
              "CAD",
              "GBP"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "Requested",
              "Paid",
              "Expired",
              "Partially-Paid"
            ]
          },
          "acceptPartial": {
            "type": "boolean"
          },
          "expireBy": {
            "type": "number"
          },
          "description": {
            "type": "string"
          },
          "customer": {
            "type": "object"
          },
          "paymentLink": {
            "type": "string"
          },
          "paymentLinkId": {
            "type": "string"
          },
          "referenceId": {
            "type": "string"
          },
          "updateTs": {
            "type": "string",
            "format": "date-time"
          },
          "transactionId": {
            "type": "string"
          },
          "paymentMethod": {
            "type": "string",
            "enum": [
              "ACH",
              "Bank Transfer",
              "Cash",
              "CC Reference Transaction",
              "Cheque",
              "Wire Transfer",
              "Card"
            ]
          },
          "paymentDetails": {
            "type": "object"
          },
          "paymentDate": {
            "type": "string",
            "format": "date"
          }
        },
        "required": [
          "amountPaid",
          "currency",
          "status"
        ],
        "additionalProperties": false
      },
      "NewPayment": {
        "title": "NewPayment",
        "type": "object",
        "description": "(tsType: Omit<Payment, 'paymentId' | 'tenantId'>, schemaOptions: { title: 'NewPayment', exclude: [ 'paymentId', 'tenantId' ] })",
        "properties": {
          "accountId": {
            "type": "string",
            "format": "uuid"
          },
          "requestedAmount": {
            "type": "number"
          },
          "amountPaid": {
            "type": "number"
          },
          "currency": {
            "type": "string",
            "enum": [
              "INR",
              "USD",
              "CAD",
              "GBP"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "Requested",
              "Paid",
              "Expired",
              "Partially-Paid"
            ]
          },
          "acceptPartial": {
            "type": "boolean"
          },
          "expireBy": {
            "type": "number"
          },
          "description": {
            "type": "string"
          },
          "customer": {
            "type": "object"
          },
          "paymentLink": {
            "type": "string"
          },
          "paymentLinkId": {
            "type": "string"
          },
          "referenceId": {
            "type": "string"
          },
          "updateTs": {
            "type": "string",
            "format": "date-time"
          },
          "transactionId": {
            "type": "string"
          },
          "paymentMethod": {
            "type": "string",
            "enum": [
              "ACH",
              "Bank Transfer",
              "Cash",
              "CC Reference Transaction",
              "Cheque",
              "Wire Transfer",
              "Card"
            ]
          },
          "paymentDetails": {
            "type": "object"
          },
          "paymentDate": {
            "type": "string",
            "format": "date"
          }
        },
        "required": [
          "amountPaid",
          "currency",
          "status"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Omit<Payment, 'paymentId' | 'tenantId'>"
      },
      "PaymentWithRelations": {
        "title": "PaymentWithRelations",
        "type": "object",
        "description": "(tsType: PaymentWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "paymentId": {
            "type": "string",
            "format": "uuid"
          },
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "accountId": {
            "type": "string",
            "format": "uuid"
          },
          "requestedAmount": {
            "type": "number"
          },
          "amountPaid": {
            "type": "number"
          },
          "currency": {
            "type": "string",
            "enum": [
              "INR",
              "USD",
              "CAD",
              "GBP"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "Requested",
              "Paid",
              "Expired",
              "Partially-Paid"
            ]
          },
          "acceptPartial": {
            "type": "boolean"
          },
          "expireBy": {
            "type": "number"
          },
          "description": {
            "type": "string"
          },
          "customer": {
            "type": "object"
          },
          "paymentLink": {
            "type": "string"
          },
          "paymentLinkId": {
            "type": "string"
          },
          "referenceId": {
            "type": "string"
          },
          "updateTs": {
            "type": "string",
            "format": "date-time"
          },
          "transactionId": {
            "type": "string"
          },
          "paymentMethod": {
            "type": "string",
            "enum": [
              "ACH",
              "Bank Transfer",
              "Cash",
              "CC Reference Transaction",
              "Cheque",
              "Wire Transfer",
              "Card"
            ]
          },
          "paymentDetails": {
            "type": "object"
          },
          "paymentDate": {
            "type": "string",
            "format": "date"
          }
        },
        "required": [
          "amountPaid",
          "currency",
          "status"
        ],
        "additionalProperties": false,
        "x-typescript-type": "PaymentWithRelations"
      },
      "CreditCard": {
        "title": "CreditCard",
        "type": "object",
        "properties": {
          "cardNumber": {
            "type": "string"
          },
          "expirationDate": {
            "type": "string"
          },
          "cardCode": {
            "type": "string"
          },
          "cardType": {
            "type": "string"
          }
        },
        "required": [
          "cardNumber",
          "expirationDate"
        ],
        "additionalProperties": false
      },
      "PaymentMethodWithRelations": {
        "title": "PaymentMethodWithRelations",
        "type": "object",
        "description": "(tsType: PaymentMethodWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "paymentMethodId": {
            "type": "string",
            "format": "uuid"
          },
          "accountId": {
            "type": "string"
          },
          "extCustomerProfileId": {
            "type": "string"
          },
          "extCustomerPaymentProfileId": {
            "type": "string"
          },
          "isDefault": {
            "type": "boolean"
          },
          "paymentMethodType": {
            "type": "string"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/CreditCard"
          },
          "isAuthorised": {
            "type": "boolean"
          }
        },
        "required": [
          "accountId",
          "paymentMethodType"
        ],
        "additionalProperties": false,
        "x-typescript-type": "PaymentMethodWithRelations"
      },
      "PaymentMethodMasterWithRelations": {
        "title": "PaymentMethodMasterWithRelations",
        "type": "object",
        "description": "(tsType: PaymentMethodMasterWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "methodId": {
            "type": "string",
            "format": "uuid"
          },
          "methodName": {
            "type": "string"
          },
          "methodCode": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "createdTs": {
            "type": "string",
            "format": "date-time"
          },
          "updatedTs": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "methodName",
          "methodCode",
          "status"
        ],
        "additionalProperties": false,
        "x-typescript-type": "PaymentMethodMasterWithRelations"
      },
      "PaymentGateway": {
        "title": "PaymentGateway",
        "type": "object",
        "properties": {
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "paymentGateway": {
            "type": "string",
            "enum": [
              "RazorPay",
              "Authorize.net"
            ]
          },
          "credentials": {
            "type": "object"
          },
          "paymentGatewayId": {
            "type": "string",
            "format": "uuid"
          },
          "successCallbackMethod": {
            "type": "string",
            "enum": [
              "get",
              "post",
              "put",
              "delete"
            ]
          },
          "successCallbackUrl": {
            "type": "string"
          },
          "failCallbackMethod": {
            "type": "string",
            "enum": [
              "get",
              "post",
              "put",
              "delete"
            ]
          },
          "failCallbackUrl": {
            "type": "string"
          }
        },
        "required": [
          "tenantId",
          "paymentGateway",
          "credentials"
        ],
        "additionalProperties": false
      },
      "NewPaymentGatewaySetting": {
        "title": "NewPaymentGatewaySetting",
        "type": "object",
        "description": "(tsType: Omit<PaymentGateway, 'paymentGatewayId' | 'tenantId'>, schemaOptions: { title: 'NewPaymentGatewaySetting', exclude: [ 'paymentGatewayId', 'tenantId' ] })",
        "properties": {
          "paymentGateway": {
            "type": "string",
            "enum": [
              "RazorPay",
              "Authorize.net"
            ]
          },
          "credentials": {
            "type": "object"
          },
          "successCallbackMethod": {
            "type": "string",
            "enum": [
              "get",
              "post",
              "put",
              "delete"
            ]
          },
          "successCallbackUrl": {
            "type": "string"
          },
          "failCallbackMethod": {
            "type": "string",
            "enum": [
              "get",
              "post",
              "put",
              "delete"
            ]
          },
          "failCallbackUrl": {
            "type": "string"
          }
        },
        "required": [
          "paymentGateway",
          "credentials"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Omit<PaymentGateway, 'paymentGatewayId' | 'tenantId'>"
      },
      "PaymentGatewayWithRelations": {
        "title": "PaymentGatewayWithRelations",
        "type": "object",
        "description": "(tsType: PaymentGatewayWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "paymentGateway": {
            "type": "string",
            "enum": [
              "RazorPay",
              "Authorize.net"
            ]
          },
          "credentials": {
            "type": "object"
          },
          "paymentGatewayId": {
            "type": "string",
            "format": "uuid"
          },
          "successCallbackMethod": {
            "type": "string",
            "enum": [
              "get",
              "post",
              "put",
              "delete"
            ]
          },
          "successCallbackUrl": {
            "type": "string"
          },
          "failCallbackMethod": {
            "type": "string",
            "enum": [
              "get",
              "post",
              "put",
              "delete"
            ]
          },
          "failCallbackUrl": {
            "type": "string"
          }
        },
        "required": [
          "tenantId",
          "paymentGateway",
          "credentials"
        ],
        "additionalProperties": false,
        "x-typescript-type": "PaymentGatewayWithRelations"
      },
      "PaymentGatewayMasterWithRelations": {
        "title": "PaymentGatewayMasterWithRelations",
        "type": "object",
        "description": "(tsType: PaymentGatewayMasterWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "gatewayName": {
            "type": "string"
          },
          "gatewayId": {
            "type": "string"
          },
          "gatewayCode": {
            "type": "string"
          },
          "apiKey": {
            "type": "string"
          },
          "apiSecret": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "createdTs": {
            "type": "string",
            "format": "date-time"
          },
          "updatedTs": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "gatewayName",
          "gatewayId",
          "apiKey",
          "apiSecret",
          "status",
          "createdTs",
          "updatedTs"
        ],
        "additionalProperties": false,
        "x-typescript-type": "PaymentGatewayMasterWithRelations"
      },
      "CartItem": {
        "title": "CartItem",
        "type": "object",
        "properties": {
          "itemType": {
            "type": "string",
            "enum": [
              "Addon",
              "Coupon",
              "Discount",
              "Subscription"
            ]
          },
          "itemId": {
            "type": "string"
          },
          "quantity": {
            "type": "number"
          },
          "unitPrice": {
            "type": "number"
          },
          "amount": {
            "type": "number"
          },
          "options": {
            "type": "object"
          }
        },
        "required": [
          "itemType",
          "itemId"
        ],
        "additionalProperties": false
      },
      "OrderSummary": {
        "title": "OrderSummary",
        "type": "object",
        "properties": {
          "cart": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CartItem"
            }
          },
          "subtotal": {
            "type": "number"
          },
          "discount": {
            "type": "number"
          },
          "tax": {
            "type": "number"
          },
          "total": {
            "type": "number"
          }
        },
        "required": [
          "cart",
          "subtotal",
          "discount",
          "tax",
          "total"
        ],
        "additionalProperties": false
      },
      "PaymentDetails": {
        "title": "PaymentDetails",
        "type": "object",
        "properties": {
          "paymentMethodId": {
            "type": "string",
            "format": "uuid"
          },
          "sendPaymentLink": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "PersonalInfo": {
        "title": "PersonalInfo",
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "accountType": {
            "type": "string",
            "enum": [
              "Organisation",
              "Individual"
            ]
          }
        },
        "required": [
          "phone",
          "email"
        ],
        "additionalProperties": false
      },
      "NewOrderData": {
        "title": "NewOrderData",
        "type": "object",
        "description": "(tsType: OrderData, schemaOptions: { title: 'NewOrderData' })",
        "properties": {
          "srcSysCode": {
            "type": "string",
            "enum": [
              "BillHive Portal",
              "API",
              "Self Serve Portal"
            ]
          },
          "eventType": {
            "type": "string",
            "enum": [
              "Place Order",
              "Upgrade",
              "Downgrade",
              "Cancel"
            ]
          },
          "paymentDetails": {
            "$ref": "#/components/schemas/PaymentDetails"
          },
          "cart": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CartItem"
            }
          },
          "personalInfo": {
            "$ref": "#/components/schemas/PersonalInfo"
          }
        },
        "required": [
          "srcSysCode",
          "eventType",
          "paymentDetails",
          "cart",
          "personalInfo"
        ],
        "additionalProperties": false,
        "x-typescript-type": "OrderData"
      },
      "OrderData": {
        "title": "OrderData",
        "type": "object",
        "properties": {
          "srcSysCode": {
            "type": "string",
            "enum": [
              "BillHive Portal",
              "API",
              "Self Serve Portal"
            ]
          },
          "eventType": {
            "type": "string",
            "enum": [
              "Place Order",
              "Upgrade",
              "Downgrade",
              "Cancel"
            ]
          },
          "paymentDetails": {
            "$ref": "#/components/schemas/PaymentDetails"
          },
          "cart": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CartItem"
            }
          },
          "personalInfo": {
            "$ref": "#/components/schemas/PersonalInfo"
          }
        },
        "required": [
          "srcSysCode",
          "eventType",
          "paymentDetails",
          "cart",
          "personalInfo"
        ],
        "additionalProperties": false
      },
      "Order": {
        "title": "Order",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "date": {
            "type": "string",
            "format": "date"
          },
          "accountId": {
            "type": "string",
            "format": "uuid"
          },
          "invoiceId": {
            "type": "string",
            "format": "uuid"
          },
          "amount": {
            "type": "number"
          },
          "status": {
            "type": "string",
            "enum": [
              "Pending",
              "Completed",
              "Canceled",
              "Failed",
              "Refunded"
            ]
          },
          "srcSysCode": {
            "type": "string",
            "enum": [
              "BillHive Portal",
              "API",
              "Self Serve Portal"
            ]
          },
          "eventType": {
            "type": "string",
            "enum": [
              "Place Order",
              "Upgrade",
              "Downgrade",
              "Cancel"
            ]
          },
          "createdTs": {
            "type": "string",
            "format": "date-time"
          },
          "updatedTs": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "date",
          "accountId",
          "status",
          "srcSysCode",
          "eventType"
        ],
        "additionalProperties": false
      },
      "Orders": {
        "title": "Orders",
        "type": "object",
        "properties": {
          "orders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Order"
            }
          },
          "count": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "OrderItem": {
        "title": "OrderItem",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "itemId": {
            "type": "string",
            "format": "uuid"
          },
          "date": {
            "type": "string",
            "format": "date"
          },
          "name": {
            "type": "string"
          },
          "orderId": {
            "type": "string",
            "format": "uuid"
          },
          "quantity": {
            "type": "number"
          },
          "price": {
            "type": "number"
          },
          "unitPrice": {
            "type": "number"
          },
          "status": {
            "type": "string",
            "enum": [
              "Pending",
              "Completed",
              "Canceled",
              "Returned",
              "Refunded"
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "Tax",
              "Discount",
              "Coupon",
              "Subscription",
              "Addon",
              "Charge",
              "Refund"
            ]
          },
          "options": {
            "type": "object"
          },
          "accountId": {
            "type": "string",
            "format": "uuid"
          },
          "categoryName": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "itemId",
          "date",
          "name",
          "orderId",
          "quantity",
          "price",
          "unitPrice",
          "status",
          "type",
          "accountId",
          "categoryName"
        ],
        "additionalProperties": false
      },
      "OrderDetails": {
        "title": "OrderDetails",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "date": {
            "type": "string",
            "format": "date"
          },
          "accountId": {
            "type": "string",
            "format": "uuid"
          },
          "invoiceId": {
            "type": "string",
            "format": "uuid"
          },
          "amount": {
            "type": "number"
          },
          "status": {
            "type": "string",
            "enum": [
              "Pending",
              "Completed",
              "Canceled",
              "Failed",
              "Refunded"
            ]
          },
          "srcSysCode": {
            "type": "string",
            "enum": [
              "BillHive Portal",
              "API",
              "Self Serve Portal"
            ]
          },
          "eventType": {
            "type": "string",
            "enum": [
              "Place Order",
              "Upgrade",
              "Downgrade",
              "Cancel"
            ]
          },
          "createdTs": {
            "type": "string",
            "format": "date-time"
          },
          "updatedTs": {
            "type": "string",
            "format": "date-time"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderItem"
            }
          }
        },
        "required": [
          "id",
          "date",
          "accountId",
          "status",
          "srcSysCode",
          "eventType"
        ],
        "additionalProperties": false
      },
      "Receiver": {
        "title": "Receiver",
        "type": "object",
        "properties": {
          "to": {
            "type": "string"
          },
          "cc": {
            "type": "string"
          },
          "bcc": {
            "type": "string"
          }
        },
        "required": [
          "to"
        ],
        "additionalProperties": false
      },
      "Attachment": {
        "title": "Attachment",
        "type": "object",
        "properties": {
          "attachmentType": {
            "type": "string",
            "enum": [
              "URL",
              "String",
              "Encoded-string"
            ]
          },
          "filename": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "encoding": {
            "type": "string"
          }
        },
        "required": [
          "attachmentType",
          "filename"
        ],
        "additionalProperties": false
      },
      "Notification": {
        "title": "Notification",
        "type": "object",
        "properties": {
          "notificationId": {
            "type": "string"
          },
          "sender": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          },
          "body": {
            "type": "string"
          },
          "receiver": {
            "$ref": "#/components/schemas/Receiver"
          },
          "type": {
            "type": "string",
            "enum": [
              "Push",
              "Email",
              "SMS",
              "Doc"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "Pending",
              "Scheduled",
              "Rescheduled",
              "Delivered",
              "Failed",
              "Opened"
            ]
          },
          "tenantId": {
            "type": "string"
          },
          "accountId": {
            "type": "string"
          },
          "sentTs": {
            "type": "string",
            "format": "date-time"
          },
          "plannedDate": {
            "type": "string",
            "format": "date"
          },
          "name": {
            "type": "string"
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Attachment"
            }
          }
        },
        "required": [
          "sender",
          "receiver",
          "type",
          "tenantId",
          "accountId"
        ],
        "additionalProperties": false
      },
      "NewNotification": {
        "title": "NewNotification",
        "type": "object",
        "description": "(tsType: Omit<Notification, 'notificationId' | 'sender' | 'status' | 'tenantId' | 'sentTs' | 'plannedDate'>, schemaOptions: { title: 'NewNotification', exclude: [ 'notificationId', 'sender', 'status', 'tenantId', 'sentTs', 'plannedDate' ] })",
        "properties": {
          "subject": {
            "type": "string"
          },
          "body": {
            "type": "string"
          },
          "receiver": {
            "$ref": "#/components/schemas/Receiver"
          },
          "type": {
            "type": "string",
            "enum": [
              "Push",
              "Email",
              "SMS",
              "Doc"
            ]
          },
          "accountId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Attachment"
            }
          }
        },
        "required": [
          "receiver",
          "type",
          "accountId"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Omit<Notification, 'notificationId' | 'sender' | 'status' | 'tenantId' | 'sentTs' | 'plannedDate'>"
      },
      "NotificationWithRelations": {
        "title": "NotificationWithRelations",
        "type": "object",
        "description": "(tsType: NotificationWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "notificationId": {
            "type": "string"
          },
          "sender": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          },
          "body": {
            "type": "string"
          },
          "receiver": {
            "$ref": "#/components/schemas/Receiver"
          },
          "type": {
            "type": "string",
            "enum": [
              "Push",
              "Email",
              "SMS",
              "Doc"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "Pending",
              "Scheduled",
              "Rescheduled",
              "Delivered",
              "Failed",
              "Opened"
            ]
          },
          "tenantId": {
            "type": "string"
          },
          "accountId": {
            "type": "string"
          },
          "sentTs": {
            "type": "string",
            "format": "date-time"
          },
          "plannedDate": {
            "type": "string",
            "format": "date"
          },
          "name": {
            "type": "string"
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Attachment"
            }
          }
        },
        "required": [
          "sender",
          "receiver",
          "type",
          "tenantId",
          "accountId"
        ],
        "additionalProperties": false,
        "x-typescript-type": "NotificationWithRelations"
      },
      "Memo": {
        "title": "Memo",
        "type": "object",
        "properties": {
          "memoId": {
            "type": "string",
            "format": "uuid"
          },
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "sourceType": {
            "type": "string",
            "enum": [
              "Invoice",
              "Standalone"
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "Credit",
              "Debit"
            ]
          },
          "accountId": {
            "type": "string",
            "format": "uuid"
          },
          "accountName": {
            "type": "string"
          },
          "invoiceId": {
            "type": "string",
            "format": "uuid"
          },
          "currency": {
            "type": "string",
            "enum": [
              "INR",
              "USD",
              "CAD",
              "GBP"
            ]
          },
          "amount": {
            "type": "number"
          },
          "unappliedAmount": {
            "type": "number"
          },
          "appliedAmount": {
            "type": "number"
          },
          "autoPost": {
            "type": "boolean"
          },
          "excludeFromAutoApplyRules": {
            "type": "boolean"
          },
          "comment": {
            "type": "string"
          },
          "reasonCode": {
            "type": "string"
          },
          "effectiveDate": {
            "type": "string",
            "format": "date"
          },
          "status": {
            "type": "string",
            "enum": [
              "Draft",
              "Posted",
              "Cancelled"
            ]
          }
        },
        "required": [
          "sourceType",
          "type",
          "accountId",
          "currency",
          "amount",
          "autoPost",
          "excludeFromAutoApplyRules",
          "status"
        ],
        "additionalProperties": false
      },
      "NewMemo": {
        "title": "NewMemo",
        "type": "object",
        "description": "(tsType: Omit<Memo, 'memoId' | 'tenantId' | 'status'>, schemaOptions: { title: 'NewMemo', exclude: [ 'memoId', 'tenantId', 'status' ] })",
        "properties": {
          "sourceType": {
            "type": "string",
            "enum": [
              "Invoice",
              "Standalone"
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "Credit",
              "Debit"
            ]
          },
          "accountId": {
            "type": "string",
            "format": "uuid"
          },
          "accountName": {
            "type": "string"
          },
          "invoiceId": {
            "type": "string",
            "format": "uuid"
          },
          "currency": {
            "type": "string",
            "enum": [
              "INR",
              "USD",
              "CAD",
              "GBP"
            ]
          },
          "amount": {
            "type": "number"
          },
          "unappliedAmount": {
            "type": "number"
          },
          "appliedAmount": {
            "type": "number"
          },
          "autoPost": {
            "type": "boolean"
          },
          "excludeFromAutoApplyRules": {
            "type": "boolean"
          },
          "comment": {
            "type": "string"
          },
          "reasonCode": {
            "type": "string"
          },
          "effectiveDate": {
            "type": "string",
            "format": "date"
          }
        },
        "required": [
          "sourceType",
          "type",
          "accountId",
          "currency",
          "amount",
          "autoPost",
          "excludeFromAutoApplyRules"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Omit<Memo, 'memoId' | 'tenantId' | 'status'>"
      },
      "MemosWithRelations": {
        "title": "MemosWithRelations",
        "type": "object",
        "description": "(tsType: MemosWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "memos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Memo"
            }
          },
          "count": {
            "type": "number"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "MemosWithRelations"
      },
      "Address": {
        "title": "Address",
        "type": "object",
        "properties": {
          "contactId": {
            "type": "string",
            "format": "uuid"
          },
          "fullName": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "isPrimary": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "InvoiceItem": {
        "title": "InvoiceItem",
        "type": "object",
        "properties": {
          "invoiceItemId": {
            "type": "string",
            "format": "uuid"
          },
          "invoiceId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          },
          "quantity": {
            "type": "number"
          },
          "unitPrice": {
            "type": "number"
          },
          "chargeId": {
            "type": "string",
            "format": "uuid"
          },
          "subscriptionId": {
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "type": "string",
            "enum": [
              "Draft",
              "Posted",
              "Cancelled",
              "Paid"
            ]
          }
        },
        "required": [
          "name",
          "amount",
          "quantity",
          "unitPrice"
        ],
        "additionalProperties": false
      },
      "InvoiceDetails": {
        "title": "InvoiceDetails",
        "type": "object",
        "properties": {
          "invoiceId": {
            "type": "string",
            "format": "uuid"
          },
          "invoiceDate": {
            "type": "string",
            "format": "date"
          },
          "dueDate": {
            "type": "string",
            "format": "date"
          },
          "accountId": {
            "type": "string",
            "format": "uuid"
          },
          "subscriptionId": {
            "type": "string",
            "format": "uuid"
          },
          "amountWithoutTax": {
            "type": "number"
          },
          "amount": {
            "type": "number"
          },
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "path": {
            "type": "string"
          },
          "taxAmount": {
            "type": "number"
          },
          "discountAmount": {
            "type": "number"
          },
          "accountName": {
            "type": "string"
          },
          "currency": {
            "type": "string",
            "enum": [
              "INR",
              "USD",
              "CAD",
              "GBP"
            ]
          },
          "balance": {
            "type": "number"
          },
          "billingAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "lastEmailSentDate": {
            "type": "string",
            "format": "date"
          },
          "paymentAmount": {
            "type": "number"
          },
          "postedDate": {
            "type": "string",
            "format": "date"
          },
          "refundAmount": {
            "type": "number"
          },
          "transactionId": {
            "type": "string",
            "format": "uuid"
          },
          "createdTs": {
            "type": "string",
            "format": "date-time"
          },
          "updatedTs": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "enum": [
              "Draft",
              "Posted",
              "Cancelled",
              "Paid"
            ]
          },
          "invoiceItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoiceItem"
            }
          }
        },
        "required": [
          "invoiceDate",
          "dueDate",
          "accountId",
          "tenantId",
          "currency",
          "balance",
          "status"
        ],
        "additionalProperties": false
      },
      "NewInvoice": {
        "title": "NewInvoice",
        "type": "object",
        "description": "(tsType: Omit<InvoiceDetails, 'invoiceId' | 'tenantId' | 'path' | 'billToContactId' | 'lastEmailSentDate' | 'paymentAmount' | 'refundAmount' | 'createdTs' | 'updatedTs' | 'status' | 'invoiceItemId' | 'chargeDate' | 'transactionId' | 'targetDate'>, schemaOptions: {\n  title: 'NewInvoice',\n  exclude: [\n    'invoiceId',         'tenantId',\n    'path',              'billToContactId',\n    'lastEmailSentDate', 'paymentAmount',\n    'refundAmount',      'createdTs',\n    'updatedTs',         'status',\n    'invoiceItemId',     'chargeDate',\n    'transactionId',     'targetDate'\n  ]\n})",
        "properties": {
          "invoiceDate": {
            "type": "string",
            "format": "date"
          },
          "dueDate": {
            "type": "string",
            "format": "date"
          },
          "accountId": {
            "type": "string",
            "format": "uuid"
          },
          "subscriptionId": {
            "type": "string",
            "format": "uuid"
          },
          "amountWithoutTax": {
            "type": "number"
          },
          "amount": {
            "type": "number"
          },
          "taxAmount": {
            "type": "number"
          },
          "discountAmount": {
            "type": "number"
          },
          "accountName": {
            "type": "string"
          },
          "currency": {
            "type": "string",
            "enum": [
              "INR",
              "USD",
              "CAD",
              "GBP"
            ]
          },
          "balance": {
            "type": "number"
          },
          "billingAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "postedDate": {
            "type": "string",
            "format": "date"
          },
          "invoiceItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoiceItem"
            }
          }
        },
        "required": [
          "invoiceDate",
          "dueDate",
          "accountId",
          "currency",
          "balance"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Omit<InvoiceDetails, 'invoiceId' | 'tenantId' | 'path' | 'billToContactId' | 'lastEmailSentDate' | 'paymentAmount' | 'refundAmount' | 'createdTs' | 'updatedTs' | 'status' | 'invoiceItemId' | 'chargeDate' | 'transactionId' | 'targetDate'>"
      },
      "Invoice": {
        "title": "Invoice",
        "type": "object",
        "properties": {
          "invoiceId": {
            "type": "string",
            "format": "uuid"
          },
          "invoiceDate": {
            "type": "string",
            "format": "date"
          },
          "dueDate": {
            "type": "string",
            "format": "date"
          },
          "accountId": {
            "type": "string",
            "format": "uuid"
          },
          "subscriptionId": {
            "type": "string",
            "format": "uuid"
          },
          "amountWithoutTax": {
            "type": "number"
          },
          "amount": {
            "type": "number"
          },
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "path": {
            "type": "string"
          },
          "taxAmount": {
            "type": "number"
          },
          "discountAmount": {
            "type": "number"
          },
          "accountName": {
            "type": "string"
          },
          "currency": {
            "type": "string",
            "enum": [
              "INR",
              "USD",
              "CAD",
              "GBP"
            ]
          },
          "balance": {
            "type": "number"
          },
          "billingAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "lastEmailSentDate": {
            "type": "string",
            "format": "date"
          },
          "paymentAmount": {
            "type": "number"
          },
          "postedDate": {
            "type": "string",
            "format": "date"
          },
          "refundAmount": {
            "type": "number"
          },
          "transactionId": {
            "type": "string",
            "format": "uuid"
          },
          "createdTs": {
            "type": "string",
            "format": "date-time"
          },
          "updatedTs": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "enum": [
              "Draft",
              "Posted",
              "Cancelled",
              "Paid"
            ]
          }
        },
        "required": [
          "invoiceDate",
          "dueDate",
          "accountId",
          "tenantId",
          "currency",
          "balance",
          "status"
        ],
        "additionalProperties": false
      },
      "InvoicesWithRelations": {
        "title": "InvoicesWithRelations",
        "type": "object",
        "description": "(tsType: InvoicesWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "invoices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Invoice"
            }
          },
          "count": {
            "type": "number"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "InvoicesWithRelations"
      },
      "InvoiceWithRelations": {
        "title": "InvoiceWithRelations",
        "type": "object",
        "description": "(tsType: InvoiceWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "invoiceId": {
            "type": "string",
            "format": "uuid"
          },
          "invoiceDate": {
            "type": "string",
            "format": "date"
          },
          "dueDate": {
            "type": "string",
            "format": "date"
          },
          "accountId": {
            "type": "string",
            "format": "uuid"
          },
          "subscriptionId": {
            "type": "string",
            "format": "uuid"
          },
          "amountWithoutTax": {
            "type": "number"
          },
          "amount": {
            "type": "number"
          },
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "path": {
            "type": "string"
          },
          "taxAmount": {
            "type": "number"
          },
          "discountAmount": {
            "type": "number"
          },
          "accountName": {
            "type": "string"
          },
          "currency": {
            "type": "string",
            "enum": [
              "INR",
              "USD",
              "CAD",
              "GBP"
            ]
          },
          "balance": {
            "type": "number"
          },
          "billingAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "lastEmailSentDate": {
            "type": "string",
            "format": "date"
          },
          "paymentAmount": {
            "type": "number"
          },
          "postedDate": {
            "type": "string",
            "format": "date"
          },
          "refundAmount": {
            "type": "number"
          },
          "transactionId": {
            "type": "string",
            "format": "uuid"
          },
          "createdTs": {
            "type": "string",
            "format": "date-time"
          },
          "updatedTs": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "enum": [
              "Draft",
              "Posted",
              "Cancelled",
              "Paid"
            ]
          }
        },
        "required": [
          "invoiceDate",
          "dueDate",
          "accountId",
          "tenantId",
          "currency",
          "balance",
          "status"
        ],
        "additionalProperties": false,
        "x-typescript-type": "InvoiceWithRelations"
      },
      "InvoiceItemWithRelations": {
        "title": "InvoiceItemWithRelations",
        "type": "object",
        "description": "(tsType: InvoiceItemWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "invoiceItemId": {
            "type": "string",
            "format": "uuid"
          },
          "invoiceId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          },
          "quantity": {
            "type": "number"
          },
          "unitPrice": {
            "type": "number"
          },
          "chargeId": {
            "type": "string",
            "format": "uuid"
          },
          "subscriptionId": {
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "type": "string",
            "enum": [
              "Draft",
              "Posted",
              "Cancelled",
              "Paid"
            ]
          }
        },
        "required": [
          "name",
          "amount",
          "quantity",
          "unitPrice"
        ],
        "additionalProperties": false,
        "x-typescript-type": "InvoiceItemWithRelations"
      },
      "Currency": {
        "title": "Currency",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "baseCurrencyId": {
            "type": "string",
            "format": "uuid"
          },
          "currencyId": {
            "type": "string",
            "format": "uuid"
          },
          "conversionRate": {
            "type": "number",
            "nullable": false
          },
          "isBaseCurrency": {
            "type": "boolean",
            "nullable": false
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": false
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": false
          },
          "baseCurrencyCode": {
            "type": "string",
            "nullable": false
          },
          "currencyCode": {
            "type": "string",
            "nullable": false
          }
        },
        "required": [
          "tenantId",
          "baseCurrencyId",
          "currencyId",
          "conversionRate",
          "isBaseCurrency",
          "baseCurrencyCode",
          "currencyCode"
        ],
        "additionalProperties": false
      },
      "NewCurrency": {
        "title": "NewCurrency",
        "type": "object",
        "description": "(tsType: Omit<CurrencyReq, 'id' | 'tenantId'>, schemaOptions: { title: 'NewCurrency', exclude: [ 'id', 'tenantId' ] })",
        "properties": {
          "currencyCode": {
            "type": "string",
            "nullable": false
          }
        },
        "required": [
          "currencyCode"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Omit<CurrencyReq, 'id' | 'tenantId'>"
      },
      "CurrencyReq": {
        "title": "CurrencyReq",
        "type": "object",
        "properties": {
          "currencyCode": {
            "type": "string",
            "nullable": false
          }
        },
        "required": [
          "currencyCode"
        ],
        "additionalProperties": false
      },
      "CouponWithRelations": {
        "title": "CouponWithRelations",
        "type": "object",
        "description": "(tsType: CouponWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "couponId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "discountType": {
            "type": "string",
            "enum": [
              "Fixed",
              "Percentage",
              "Custom Trial"
            ]
          },
          "currency": {
            "type": "string",
            "enum": [
              "INR",
              "USD",
              "CAD",
              "GBP"
            ]
          },
          "amount": {
            "type": "number"
          },
          "maxRedemptionCount": {
            "type": "number"
          },
          "maxRedemptionLimit": {
            "type": "string",
            "enum": [
              "Unlimited",
              "Specific Number"
            ]
          },
          "discountDurationType": {
            "type": "string",
            "enum": [
              "Forever",
              "Single Use",
              "Limited Time"
            ]
          },
          "maxRedemptionLimitPerCustomer": {
            "type": "string",
            "enum": [
              "Unlimited",
              "Specific Number"
            ]
          },
          "maxRedemptionCountPerCustomer": {
            "type": "number"
          },
          "redeemptionEndDate": {
            "type": "string",
            "format": "date"
          },
          "eligibleRateplanOption": {
            "type": "string",
            "enum": [
              "All Rate Plans",
              "Specific Rate Plans"
            ]
          },
          "level": {
            "type": "string",
            "enum": [
              "Account",
              "Subscription"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "Draft",
              "Active",
              "Inactive"
            ]
          },
          "paymentDescription": {
            "type": "string"
          },
          "invoiceDescription": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "code",
          "discountType",
          "maxRedemptionLimit",
          "discountDurationType",
          "maxRedemptionLimitPerCustomer",
          "eligibleRateplanOption",
          "level",
          "status"
        ],
        "additionalProperties": false,
        "x-typescript-type": "CouponWithRelations"
      },
      "NewCouponDetails": {
        "title": "NewCouponDetails",
        "type": "object",
        "description": "(tsType: Omit<CouponDetails, >, schemaOptions: { title: 'NewCouponDetails', exclude: [] })",
        "properties": {
          "couponId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "codes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "discountType": {
            "type": "string",
            "enum": [
              "Fixed",
              "Percentage",
              "Custom Trial"
            ]
          },
          "currency": {
            "type": "string",
            "enum": [
              "INR",
              "USD",
              "CAD",
              "GBP"
            ]
          },
          "amount": {
            "type": "number"
          },
          "maxRedemptionCount": {
            "type": "number"
          },
          "maxRedemptionLimit": {
            "type": "string",
            "enum": [
              "Unlimited",
              "Specific Number"
            ]
          },
          "discountDurationType": {
            "type": "string",
            "enum": [
              "Forever",
              "Single Use",
              "Limited Time"
            ]
          },
          "maxRedemptionLimitPerCustomer": {
            "type": "string",
            "enum": [
              "Unlimited",
              "Specific Number"
            ]
          },
          "maxRedemptionCountPerCustomer": {
            "type": "number"
          },
          "redeemptionEndDate": {
            "type": "string",
            "format": "date"
          },
          "eligibleRateplanOption": {
            "type": "string",
            "enum": [
              "All Rate Plans",
              "Specific Rate Plans"
            ]
          },
          "level": {
            "type": "string",
            "enum": [
              "Account",
              "Subscription"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "Draft",
              "Active",
              "Inactive"
            ]
          },
          "paymentDescription": {
            "type": "string"
          },
          "invoiceDescription": {
            "type": "string"
          },
          "productIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "ratePlanIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          }
        },
        "required": [
          "name",
          "codes",
          "discountType",
          "maxRedemptionLimit",
          "discountDurationType",
          "maxRedemptionLimitPerCustomer",
          "eligibleRateplanOption",
          "level",
          "status"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Omit<CouponDetails, >"
      },
      "CouponDetails": {
        "title": "CouponDetails",
        "type": "object",
        "properties": {
          "couponId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "codes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "discountType": {
            "type": "string",
            "enum": [
              "Fixed",
              "Percentage",
              "Custom Trial"
            ]
          },
          "currency": {
            "type": "string",
            "enum": [
              "INR",
              "USD",
              "CAD",
              "GBP"
            ]
          },
          "amount": {
            "type": "number"
          },
          "maxRedemptionCount": {
            "type": "number"
          },
          "maxRedemptionLimit": {
            "type": "string",
            "enum": [
              "Unlimited",
              "Specific Number"
            ]
          },
          "discountDurationType": {
            "type": "string",
            "enum": [
              "Forever",
              "Single Use",
              "Limited Time"
            ]
          },
          "maxRedemptionLimitPerCustomer": {
            "type": "string",
            "enum": [
              "Unlimited",
              "Specific Number"
            ]
          },
          "maxRedemptionCountPerCustomer": {
            "type": "number"
          },
          "redeemptionEndDate": {
            "type": "string",
            "format": "date"
          },
          "eligibleRateplanOption": {
            "type": "string",
            "enum": [
              "All Rate Plans",
              "Specific Rate Plans"
            ]
          },
          "level": {
            "type": "string",
            "enum": [
              "Account",
              "Subscription"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "Draft",
              "Active",
              "Inactive"
            ]
          },
          "paymentDescription": {
            "type": "string"
          },
          "invoiceDescription": {
            "type": "string"
          },
          "productIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "ratePlanIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          }
        },
        "required": [
          "name",
          "codes",
          "discountType",
          "maxRedemptionLimit",
          "discountDurationType",
          "maxRedemptionLimitPerCustomer",
          "eligibleRateplanOption",
          "level",
          "status"
        ],
        "additionalProperties": false
      },
      "NewCoupon": {
        "title": "NewCoupon",
        "type": "object",
        "description": "(tsType: Omit<CouponDetails, 'couponId' | 'tenantId'>, schemaOptions: { title: 'NewCoupon', exclude: [ 'couponId', 'tenantId' ] })",
        "properties": {
          "name": {
            "type": "string"
          },
          "codes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "discountType": {
            "type": "string",
            "enum": [
              "Fixed",
              "Percentage",
              "Custom Trial"
            ]
          },
          "currency": {
            "type": "string",
            "enum": [
              "INR",
              "USD",
              "CAD",
              "GBP"
            ]
          },
          "amount": {
            "type": "number"
          },
          "maxRedemptionCount": {
            "type": "number"
          },
          "maxRedemptionLimit": {
            "type": "string",
            "enum": [
              "Unlimited",
              "Specific Number"
            ]
          },
          "discountDurationType": {
            "type": "string",
            "enum": [
              "Forever",
              "Single Use",
              "Limited Time"
            ]
          },
          "maxRedemptionLimitPerCustomer": {
            "type": "string",
            "enum": [
              "Unlimited",
              "Specific Number"
            ]
          },
          "maxRedemptionCountPerCustomer": {
            "type": "number"
          },
          "redeemptionEndDate": {
            "type": "string",
            "format": "date"
          },
          "eligibleRateplanOption": {
            "type": "string",
            "enum": [
              "All Rate Plans",
              "Specific Rate Plans"
            ]
          },
          "level": {
            "type": "string",
            "enum": [
              "Account",
              "Subscription"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "Draft",
              "Active",
              "Inactive"
            ]
          },
          "paymentDescription": {
            "type": "string"
          },
          "invoiceDescription": {
            "type": "string"
          },
          "productIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "ratePlanIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          }
        },
        "required": [
          "name",
          "codes",
          "discountType",
          "maxRedemptionLimit",
          "discountDurationType",
          "maxRedemptionLimitPerCustomer",
          "eligibleRateplanOption",
          "level",
          "status"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Omit<CouponDetails, 'couponId' | 'tenantId'>"
      },
      "CouponPartial": {
        "title": "CouponPartial",
        "type": "object",
        "description": "(tsType: Partial<Coupon>, schemaOptions: { partial: true })",
        "properties": {
          "couponId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "discountType": {
            "type": "string",
            "enum": [
              "Fixed",
              "Percentage",
              "Custom Trial"
            ]
          },
          "currency": {
            "type": "string",
            "enum": [
              "INR",
              "USD",
              "CAD",
              "GBP"
            ]
          },
          "amount": {
            "type": "number"
          },
          "maxRedemptionCount": {
            "type": "number"
          },
          "maxRedemptionLimit": {
            "type": "string",
            "enum": [
              "Unlimited",
              "Specific Number"
            ]
          },
          "discountDurationType": {
            "type": "string",
            "enum": [
              "Forever",
              "Single Use",
              "Limited Time"
            ]
          },
          "maxRedemptionLimitPerCustomer": {
            "type": "string",
            "enum": [
              "Unlimited",
              "Specific Number"
            ]
          },
          "maxRedemptionCountPerCustomer": {
            "type": "number"
          },
          "redeemptionEndDate": {
            "type": "string",
            "format": "date"
          },
          "eligibleRateplanOption": {
            "type": "string",
            "enum": [
              "All Rate Plans",
              "Specific Rate Plans"
            ]
          },
          "level": {
            "type": "string",
            "enum": [
              "Account",
              "Subscription"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "Draft",
              "Active",
              "Inactive"
            ]
          },
          "paymentDescription": {
            "type": "string"
          },
          "invoiceDescription": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "Partial<Coupon>"
      },
      "Coupon": {
        "title": "Coupon",
        "type": "object",
        "properties": {
          "couponId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "discountType": {
            "type": "string",
            "enum": [
              "Fixed",
              "Percentage",
              "Custom Trial"
            ]
          },
          "currency": {
            "type": "string",
            "enum": [
              "INR",
              "USD",
              "CAD",
              "GBP"
            ]
          },
          "amount": {
            "type": "number"
          },
          "maxRedemptionCount": {
            "type": "number"
          },
          "maxRedemptionLimit": {
            "type": "string",
            "enum": [
              "Unlimited",
              "Specific Number"
            ]
          },
          "discountDurationType": {
            "type": "string",
            "enum": [
              "Forever",
              "Single Use",
              "Limited Time"
            ]
          },
          "maxRedemptionLimitPerCustomer": {
            "type": "string",
            "enum": [
              "Unlimited",
              "Specific Number"
            ]
          },
          "maxRedemptionCountPerCustomer": {
            "type": "number"
          },
          "redeemptionEndDate": {
            "type": "string",
            "format": "date"
          },
          "eligibleRateplanOption": {
            "type": "string",
            "enum": [
              "All Rate Plans",
              "Specific Rate Plans"
            ]
          },
          "level": {
            "type": "string",
            "enum": [
              "Account",
              "Subscription"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "Draft",
              "Active",
              "Inactive"
            ]
          },
          "paymentDescription": {
            "type": "string"
          },
          "invoiceDescription": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "code",
          "discountType",
          "maxRedemptionLimit",
          "discountDurationType",
          "maxRedemptionLimitPerCustomer",
          "eligibleRateplanOption",
          "level",
          "status"
        ],
        "additionalProperties": false
      },
      "SMTPTLS": {
        "title": "SMTPTLS",
        "type": "object",
        "properties": {
          "rejectUnauthorized": {
            "type": "boolean"
          }
        },
        "required": [
          "rejectUnauthorized"
        ],
        "additionalProperties": false
      },
      "SMTPAuth": {
        "title": "SMTPAuth",
        "type": "object",
        "properties": {
          "user": {
            "type": "string"
          },
          "pass": {
            "type": "string"
          }
        },
        "required": [
          "user",
          "pass"
        ],
        "additionalProperties": false
      },
      "SmtpServerWithRelations": {
        "title": "SmtpServerWithRelations",
        "type": "object",
        "description": "(tsType: SmtpServerWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "tenantId": {
            "type": "string"
          },
          "host": {
            "type": "string"
          },
          "port": {
            "type": "number"
          },
          "secure": {
            "type": "boolean"
          },
          "tls": {
            "$ref": "#/components/schemas/SMTPTLS"
          },
          "auth": {
            "$ref": "#/components/schemas/SMTPAuth"
          },
          "user": {
            "type": "string"
          }
        },
        "required": [
          "tenantId",
          "host",
          "port",
          "secure",
          "user"
        ],
        "additionalProperties": false,
        "x-typescript-type": "SmtpServerWithRelations"
      },
      "Uom": {
        "title": "Uom",
        "type": "object",
        "properties": {
          "uomId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "displayAs": {
            "type": "string"
          },
          "decimalPlaces": {
            "type": "number"
          },
          "status": {
            "type": "string",
            "enum": [
              "Active",
              "Inactive"
            ]
          },
          "roundingMode": {
            "type": "string",
            "enum": [
              "Up",
              "Down"
            ]
          },
          "tenantId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "name",
          "displayAs"
        ],
        "additionalProperties": false
      },
      "BillingFrequency": {
        "title": "BillingFrequency",
        "type": "object",
        "properties": {
          "term": {
            "type": "number"
          },
          "period": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Charge": {
        "title": "Charge",
        "type": "object",
        "properties": {
          "chargeId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "ratePlanId": {
            "type": "string",
            "format": "uuid"
          },
          "chargeModel": {
            "type": "string",
            "enum": [
              "Flat Fee Pricing",
              "Per Unit Pricing",
              "Volume Pricing",
              "Tiered Pricing"
            ]
          },
          "chargeType": {
            "type": "string",
            "enum": [
              "One-Time",
              "Recurring",
              "Usage",
              "On Demand"
            ]
          },
          "currency": {
            "type": "string",
            "enum": [
              "INR",
              "USD",
              "CAD",
              "GBP"
            ]
          },
          "price": {
            "type": "number"
          },
          "status": {
            "type": "string",
            "enum": [
              "Draft",
              "Active",
              "Completed"
            ]
          },
          "uom": {
            "$ref": "#/components/schemas/Uom"
          },
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "billingFrequency": {
            "$ref": "#/components/schemas/BillingFrequency"
          },
          "recurringPeriod": {
            "$ref": "#/components/schemas/BillingFrequency"
          },
          "originalChargeId": {
            "type": "string",
            "format": "uuid"
          },
          "chargeLinkType": {
            "type": "string",
            "enum": [
              "Organisation",
              "Rate Plan",
              "Subscription"
            ]
          },
          "subscriptionId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "name"
        ],
        "additionalProperties": false
      },
      "ChargesWithRelations": {
        "title": "ChargesWithRelations",
        "type": "object",
        "description": "(tsType: ChargesWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "charges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Charge"
            }
          },
          "count": {
            "type": "number"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "ChargesWithRelations"
      },
      "RatePlanChargeWithRelations": {
        "title": "RatePlanChargeWithRelations",
        "type": "object",
        "description": "(tsType: RatePlanChargeWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "chargeId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "ratePlanId": {
            "type": "string",
            "format": "uuid"
          },
          "chargeType": {
            "type": "string",
            "enum": [
              "One-Time",
              "Recurring",
              "Usage",
              "On Demand"
            ]
          },
          "chargeModel": {
            "type": "string",
            "enum": [
              "Flat Fee Pricing",
              "Per Unit Pricing",
              "Volume Pricing",
              "Tiered Pricing"
            ]
          },
          "price": {
            "type": "number"
          },
          "quantity": {
            "type": "number"
          },
          "overage": {
            "type": "number"
          },
          "measuringUnit": {
            "type": "string"
          },
          "pricePerUnit": {
            "type": "number"
          },
          "itemId": {
            "type": "string",
            "format": "uuid"
          },
          "currency": {
            "type": "string",
            "enum": [
              "INR",
              "USD",
              "CAD",
              "GBP"
            ]
          },
          "paymentTiming": {
            "type": "string",
            "enum": [
              "Start",
              "End"
            ]
          },
          "billingPeriod": {
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "type": "string",
            "enum": [
              "Draft",
              "Active",
              "Completed"
            ]
          }
        },
        "required": [
          "chargeType",
          "chargeModel"
        ],
        "additionalProperties": false,
        "x-typescript-type": "RatePlanChargeWithRelations"
      },
      "ChargeMaster": {
        "title": "ChargeMaster",
        "type": "object",
        "properties": {
          "chargeId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "tenantId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "name",
          "tenantId"
        ],
        "additionalProperties": false
      },
      "NewChargeMaster": {
        "title": "NewChargeMaster",
        "type": "object",
        "description": "(tsType: Omit<ChargeMaster, 'chargeId' | 'tenantId'>, schemaOptions: { title: 'NewChargeMaster', exclude: [ 'chargeId', 'tenantId' ] })",
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Omit<ChargeMaster, 'chargeId' | 'tenantId'>"
      },
      "Credentials": {
        "title": "Credentials",
        "type": "object",
        "description": "(tsType: Credential, schemaOptions: { title: 'Credentials' })",
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        },
        "required": [
          "email",
          "password"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Credential"
      },
      "Credential": {
        "title": "Credential",
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        },
        "required": [
          "email",
          "password"
        ],
        "additionalProperties": false
      },
      "ForgetPassword": {
        "title": "ForgetPassword",
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          }
        },
        "required": [
          "email"
        ],
        "additionalProperties": false
      },
      "ApiKey": {
        "title": "ApiKey",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": false,
            "format": "uuid"
          },
          "tenantId": {
            "type": "string",
            "nullable": false,
            "format": "uuid"
          },
          "key": {
            "type": "string",
            "nullable": false
          },
          "isActive": {
            "type": "boolean",
            "nullable": false
          },
          "permissionId": {
            "type": "string",
            "nullable": false,
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": false
          },
          "name": {
            "type": "string",
            "nullable": false
          },
          "keyType": {
            "type": "string",
            "nullable": false,
            "enum": [
              "Full-Access",
              "Read-Only",
              "Publishable"
            ]
          }
        },
        "required": [
          "tenantId",
          "key",
          "isActive",
          "permissionId",
          "createdAt",
          "name",
          "keyType"
        ],
        "additionalProperties": false
      },
      "ApiKeysWithRelations": {
        "title": "ApiKeysWithRelations",
        "type": "object",
        "description": "(tsType: ApiKeysWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "apiKeys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiKey"
            }
          },
          "count": {
            "type": "number"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "ApiKeysWithRelations"
      },
      "PermissionsWithRelations": {
        "title": "PermissionsWithRelations",
        "type": "object",
        "description": "(tsType: PermissionsWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Permission"
            }
          },
          "count": {
            "type": "number"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "PermissionsWithRelations"
      },
      "NewApiKey": {
        "title": "NewApiKey",
        "type": "object",
        "description": "(tsType: Omit<ApiKey, 'id' | 'key' | 'tenantId' | 'createdAt'>, schemaOptions: { title: 'NewApiKey', exclude: [ 'id', 'key', 'tenantId', 'createdAt' ] })",
        "properties": {
          "isActive": {
            "type": "boolean",
            "nullable": false
          },
          "permissionId": {
            "type": "string",
            "nullable": false,
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": false
          },
          "keyType": {
            "type": "string",
            "nullable": false,
            "enum": [
              "Full-Access",
              "Read-Only",
              "Publishable"
            ]
          }
        },
        "required": [
          "isActive",
          "permissionId",
          "name",
          "keyType"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Omit<ApiKey, 'id' | 'key' | 'tenantId' | 'createdAt'>"
      },
      "DailyReportWithRelations": {
        "title": "DailyReportWithRelations",
        "type": "object",
        "description": "(tsType: DailyReportWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "date": {
            "type": "string",
            "format": "date",
            "nullable": false
          },
          "currency": {
            "type": "string",
            "enum": [
              "INR",
              "USD",
              "CAD",
              "GBP"
            ]
          },
          "noOfActiveSubscribers": {
            "type": "number",
            "nullable": false
          },
          "subscribersNew": {
            "type": "number",
            "nullable": false
          },
          "subscribersLeft": {
            "type": "number",
            "nullable": false
          },
          "noOfActiveSubscriptions": {
            "type": "number",
            "nullable": false
          },
          "subscriptionsNew": {
            "type": "number",
            "nullable": false
          },
          "subscriptionsPaused": {
            "type": "number",
            "nullable": false
          },
          "subscriptionsCancelled": {
            "type": "number",
            "nullable": false
          },
          "subscriptionsExpired": {
            "type": "number",
            "nullable": false
          },
          "ratePlanSubscriptions": {
            "type": "object",
            "nullable": true
          },
          "invoicesGenerated": {
            "type": "number",
            "nullable": false
          },
          "paymentsReceived": {
            "type": "number",
            "nullable": false
          },
          "refund": {
            "type": "number",
            "nullable": false
          },
          "netBilling": {
            "type": "number",
            "nullable": false
          },
          "customersInCollections": {
            "type": "number",
            "nullable": false
          },
          "amountToCollect": {
            "type": "number",
            "nullable": false
          },
          "collectedOverdueAmount": {
            "type": "number",
            "nullable": false
          },
          "reactivatedAmount": {
            "type": "number",
            "nullable": false
          }
        },
        "required": [
          "tenantId",
          "date",
          "currency",
          "noOfActiveSubscribers",
          "subscribersNew",
          "subscribersLeft",
          "noOfActiveSubscriptions",
          "subscriptionsNew",
          "subscriptionsPaused",
          "subscriptionsCancelled",
          "subscriptionsExpired",
          "invoicesGenerated",
          "paymentsReceived",
          "refund",
          "netBilling",
          "customersInCollections",
          "amountToCollect"
        ],
        "additionalProperties": false,
        "x-typescript-type": "DailyReportWithRelations"
      },
      "AnalyticsRequest": {
        "title": "AnalyticsRequest",
        "type": "object",
        "description": "(tsType: AnalyticsRequest, schemaOptions: { title: 'AnalyticsRequest' })",
        "properties": {
          "timeRange": {
            "type": "string",
            "enum": [
              "daily",
              "weekly",
              "monthly",
              "yearly",
              "custom"
            ]
          },
          "startDate": {
            "type": "string",
            "format": "date"
          },
          "endDate": {
            "type": "string",
            "format": "date"
          }
        },
        "required": [
          "timeRange"
        ],
        "additionalProperties": false,
        "x-typescript-type": "AnalyticsRequest"
      },
      "SubscriptionsSummary": {
        "title": "SubscriptionsSummary",
        "type": "object",
        "description": "(tsType: SubscriptionsSummary, schemaOptions: { title: 'SubscriptionsSummary' })",
        "properties": {
          "current": {
            "type": "object"
          },
          "lastMonth": {
            "type": "object"
          },
          "lastToLastMonth": {
            "type": "object"
          },
          "threeMonthsAgo": {
            "type": "object"
          },
          "oneYearAgo": {
            "type": "object"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "SubscriptionsSummary"
      },
      "BillingsSummary": {
        "title": "BillingsSummary",
        "type": "object",
        "description": "(tsType: BillingsSummary, schemaOptions: { title: 'BillingsSummary' })",
        "properties": {
          "current": {
            "type": "object"
          },
          "lastMonth": {
            "type": "object"
          },
          "lastToLastMonth": {
            "type": "object"
          },
          "threeMonthsAgo": {
            "type": "object"
          },
          "oneYearAgo": {
            "type": "object"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "BillingsSummary"
      },
      "NewAddon": {
        "title": "NewAddon",
        "type": "object",
        "description": "(tsType: Omit<Addon, 'addonId' | 'status'>, schemaOptions: { title: 'NewAddon', exclude: [ 'addonId', 'status' ] })",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": false
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "createdTs": {
            "type": "string",
            "format": "date-time",
            "nullable": false
          },
          "updatedTs": {
            "type": "string",
            "format": "date-time",
            "nullable": false
          },
          "addonKey": {
            "type": "string",
            "nullable": false
          },
          "externalName": {
            "type": "string",
            "nullable": true
          },
          "unitOfMeasurement": {
            "type": "string",
            "nullable": true
          },
          "isVisibleInPortal": {
            "type": "boolean",
            "nullable": false
          },
          "productId": {
            "type": "string",
            "format": "uuid"
          },
          "tenantId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "name",
          "addonKey",
          "isVisibleInPortal",
          "productId"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Omit<Addon, 'addonId' | 'status'>"
      },
      "AddonsWithRelations": {
        "title": "AddonsWithRelations",
        "type": "object",
        "description": "(tsType: AddonsWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "addons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Addon"
            }
          },
          "count": {
            "type": "number"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "AddonsWithRelations"
      },
      "AddonPartialExcluding_id_": {
        "title": "AddonPartialExcluding_id_",
        "type": "object",
        "description": "(tsType: Omit<Partial<Addon>, 'id'>, schemaOptions: { partial: true, exclude: [ 'id' ] })",
        "properties": {
          "name": {
            "type": "string",
            "nullable": false
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "enum": [
              "Draft",
              "Active",
              "Inactive"
            ]
          },
          "createdTs": {
            "type": "string",
            "format": "date-time",
            "nullable": false
          },
          "updatedTs": {
            "type": "string",
            "format": "date-time",
            "nullable": false
          },
          "addonKey": {
            "type": "string",
            "nullable": false
          },
          "externalName": {
            "type": "string",
            "nullable": true
          },
          "unitOfMeasurement": {
            "type": "string",
            "nullable": true
          },
          "isVisibleInPortal": {
            "type": "boolean",
            "nullable": false
          },
          "productId": {
            "type": "string",
            "format": "uuid"
          },
          "tenantId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "Omit<Partial<Addon>, 'id'>"
      },
      "AddonPrice": {
        "title": "AddonPrice",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": false
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "number",
            "nullable": true
          },
          "quantity": {
            "type": "number",
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "nullable": false
          },
          "status": {
            "type": "string",
            "enum": [
              "Draft",
              "Active",
              "Inactive"
            ]
          },
          "billingPeriodId": {
            "type": "string",
            "format": "uuid"
          },
          "createdTs": {
            "type": "string",
            "format": "date-time",
            "nullable": false
          },
          "updatedTs": {
            "type": "string",
            "format": "date-time",
            "nullable": false
          },
          "addonId": {
            "type": "string",
            "format": "uuid"
          },
          "billingPeriodName": {
            "type": "string",
            "nullable": false
          },
          "externalName": {
            "type": "string",
            "nullable": true
          },
          "addonPriceKey": {
            "type": "string",
            "nullable": false
          },
          "pricingModel": {
            "type": "string",
            "enum": [
              "Fixed",
              "Volume",
              "Per Unit",
              "Tier",
              "Hybrid"
            ]
          },
          "overage": {
            "type": "number",
            "nullable": true
          },
          "showDescInInvoice": {
            "type": "boolean",
            "nullable": false
          },
          "showDescInQuote": {
            "type": "boolean",
            "nullable": false
          },
          "invoiceNote": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "name",
          "currencyCode",
          "status",
          "billingPeriodId",
          "addonId",
          "billingPeriodName",
          "addonPriceKey",
          "pricingModel",
          "showDescInInvoice",
          "showDescInQuote"
        ],
        "additionalProperties": false
      },
      "NewAddonPrice": {
        "title": "NewAddonPrice",
        "type": "object",
        "description": "(tsType: Omit<AddonPrice, 'addonId' | 'status' | 'createdTs' | 'updatedTs'>, schemaOptions: { title: 'NewAddonPrice', exclude: [ 'addonId', 'status', 'createdTs', 'updatedTs' ] })",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": false
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "number",
            "nullable": true
          },
          "quantity": {
            "type": "number",
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "nullable": false
          },
          "billingPeriodId": {
            "type": "string",
            "format": "uuid"
          },
          "billingPeriodName": {
            "type": "string",
            "nullable": false
          },
          "externalName": {
            "type": "string",
            "nullable": true
          },
          "addonPriceKey": {
            "type": "string",
            "nullable": false
          },
          "pricingModel": {
            "type": "string",
            "enum": [
              "Fixed",
              "Volume",
              "Per Unit",
              "Tier",
              "Hybrid"
            ]
          },
          "overage": {
            "type": "number",
            "nullable": true
          },
          "showDescInInvoice": {
            "type": "boolean",
            "nullable": false
          },
          "showDescInQuote": {
            "type": "boolean",
            "nullable": false
          },
          "invoiceNote": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "name",
          "currencyCode",
          "billingPeriodId",
          "billingPeriodName",
          "addonPriceKey",
          "pricingModel",
          "showDescInInvoice",
          "showDescInQuote"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Omit<AddonPrice, 'addonId' | 'status' | 'createdTs' | 'updatedTs'>"
      },
      "AddonPrices": {
        "title": "AddonPrices",
        "type": "object",
        "properties": {
          "addonPrice": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddonPrice"
            }
          },
          "count": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "AddonPricePartialExcluding_id_": {
        "title": "AddonPricePartialExcluding_id_",
        "type": "object",
        "description": "(tsType: Omit<Partial<AddonPrice>, 'id'>, schemaOptions: { partial: true, exclude: [ 'id' ] })",
        "properties": {
          "name": {
            "type": "string",
            "nullable": false
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "number",
            "nullable": true
          },
          "quantity": {
            "type": "number",
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "nullable": false
          },
          "status": {
            "type": "string",
            "enum": [
              "Draft",
              "Active",
              "Inactive"
            ]
          },
          "billingPeriodId": {
            "type": "string",
            "format": "uuid"
          },
          "createdTs": {
            "type": "string",
            "format": "date-time",
            "nullable": false
          },
          "updatedTs": {
            "type": "string",
            "format": "date-time",
            "nullable": false
          },
          "addonId": {
            "type": "string",
            "format": "uuid"
          },
          "billingPeriodName": {
            "type": "string",
            "nullable": false
          },
          "externalName": {
            "type": "string",
            "nullable": true
          },
          "addonPriceKey": {
            "type": "string",
            "nullable": false
          },
          "pricingModel": {
            "type": "string",
            "enum": [
              "Fixed",
              "Volume",
              "Per Unit",
              "Tier",
              "Hybrid"
            ]
          },
          "overage": {
            "type": "number",
            "nullable": true
          },
          "showDescInInvoice": {
            "type": "boolean",
            "nullable": false
          },
          "showDescInQuote": {
            "type": "boolean",
            "nullable": false
          },
          "invoiceNote": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "Omit<Partial<AddonPrice>, 'id'>"
      },
      "AccountPartialExcluding_accountId_": {
        "title": "AccountPartialExcluding_accountId_",
        "type": "object",
        "description": "(tsType: Omit<Partial<Account>, 'accountId'>, schemaOptions: { partial: true, exclude: [ 'accountId' ] })",
        "properties": {
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "accountType": {
            "type": "string",
            "enum": [
              "Organisation",
              "Individual"
            ]
          },
          "parentAccountId": {
            "type": "string",
            "format": "uuid"
          },
          "sameAsSoldTo": {
            "type": "boolean"
          },
          "soldToId": {
            "type": "string",
            "format": "uuid"
          },
          "billToId": {
            "type": "string",
            "format": "uuid"
          },
          "autoPay": {
            "type": "boolean"
          },
          "currency": {
            "type": "string",
            "enum": [
              "INR",
              "USD",
              "CAD",
              "GBP"
            ]
          },
          "balance": {
            "type": "number"
          },
          "mrr": {
            "type": "number"
          },
          "netTermDays": {
            "type": "number"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "enum": [
              "Draft",
              "In Trial",
              "Active",
              "Inactive",
              "Dormant"
            ]
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "Omit<Partial<Account>, 'accountId'>"
      },
      "PaymentMethod": {
        "title": "PaymentMethod",
        "type": "object",
        "properties": {
          "paymentMethodId": {
            "type": "string",
            "format": "uuid"
          },
          "accountId": {
            "type": "string"
          },
          "extCustomerProfileId": {
            "type": "string"
          },
          "extCustomerPaymentProfileId": {
            "type": "string"
          },
          "isDefault": {
            "type": "boolean"
          },
          "paymentMethodType": {
            "type": "string"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/CreditCard"
          },
          "isAuthorised": {
            "type": "boolean"
          }
        },
        "required": [
          "accountId",
          "paymentMethodType"
        ],
        "additionalProperties": false
      },
      "NewPaymentMethodReq": {
        "title": "NewPaymentMethodReq",
        "type": "object",
        "description": "(tsType: Omit<PaymentMethodDto, 'paymentMethodId'>, schemaOptions: { title: 'NewPaymentMethodReq', exclude: [ 'paymentMethodId' ] })",
        "properties": {
          "name": {
            "type": "string"
          },
          "isDefault": {
            "type": "boolean"
          },
          "paymentMethodType": {
            "type": "string",
            "enum": [
              "ACH",
              "Bank Transfer",
              "Cash",
              "CC Reference Transaction",
              "Cheque",
              "Wire Transfer",
              "Card"
            ]
          },
          "details": {
            "$ref": "#/components/schemas/CreditCard"
          },
          "isAuthorised": {
            "type": "boolean"
          }
        },
        "required": [
          "paymentMethodType"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Omit<PaymentMethodDto, 'paymentMethodId'>"
      },
      "PaymentMethodDto": {
        "title": "PaymentMethodDto",
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "isDefault": {
            "type": "boolean"
          },
          "paymentMethodType": {
            "type": "string",
            "enum": [
              "ACH",
              "Bank Transfer",
              "Cash",
              "CC Reference Transaction",
              "Cheque",
              "Wire Transfer",
              "Card"
            ]
          },
          "details": {
            "$ref": "#/components/schemas/CreditCard"
          },
          "isAuthorised": {
            "type": "boolean"
          }
        },
        "required": [
          "paymentMethodType"
        ],
        "additionalProperties": false
      },
      "PaymentMethodPartial": {
        "title": "PaymentMethodPartial",
        "type": "object",
        "description": "(tsType: Partial<PaymentMethod>, schemaOptions: { partial: true })",
        "properties": {
          "paymentMethodId": {
            "type": "string",
            "format": "uuid"
          },
          "accountId": {
            "type": "string"
          },
          "extCustomerProfileId": {
            "type": "string"
          },
          "extCustomerPaymentProfileId": {
            "type": "string"
          },
          "isDefault": {
            "type": "boolean"
          },
          "paymentMethodType": {
            "type": "string"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/CreditCard"
          },
          "isAuthorised": {
            "type": "boolean"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "Partial<PaymentMethod>"
      },
      "PaymentAuth": {
        "title": "PaymentAuth",
        "type": "object",
        "properties": {
          "paymentMethodType": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "cardNumber": {
            "type": "string"
          },
          "expirationDate": {
            "type": "string",
            "pattern": "^\\d{4}-\\d{2}$"
          },
          "cardCode": {
            "type": "string"
          },
          "isAuthorised": {
            "type": "boolean"
          },
          "isDefault": {
            "type": "boolean"
          }
        },
        "required": [
          "paymentMethodType",
          "name",
          "isAuthorised",
          "isDefault"
        ],
        "additionalProperties": true
      },
      "AuthorizePayment": {
        "title": "AuthorizePayment",
        "type": "object",
        "description": "(tsType: PaymentAuth, schemaOptions: { title: 'AuthorizePayment' })",
        "properties": {
          "paymentMethodType": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "cardNumber": {
            "type": "string"
          },
          "expirationDate": {
            "type": "string",
            "pattern": "^\\d{4}-\\d{2}$"
          },
          "cardCode": {
            "type": "string"
          },
          "isAuthorised": {
            "type": "boolean"
          },
          "isDefault": {
            "type": "boolean"
          }
        },
        "required": [
          "paymentMethodType",
          "name",
          "isAuthorised",
          "isDefault"
        ],
        "additionalProperties": true,
        "x-typescript-type": "PaymentAuth"
      },
      "Contact": {
        "title": "Contact",
        "type": "object",
        "properties": {
          "contactId": {
            "type": "string",
            "format": "uuid"
          },
          "fullName": {
            "type": "string"
          },
          "orgName": {
            "type": "string"
          },
          "accountId": {
            "type": "string",
            "format": "uuid"
          },
          "address": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "type": "string",
            "enum": [
              "Active",
              "Inactive"
            ]
          },
          "billNotification": {
            "type": "boolean"
          },
          "accountNotification": {
            "type": "boolean"
          }
        },
        "required": [
          "fullName",
          "accountId",
          "phone",
          "email",
          "tenantId",
          "status"
        ],
        "additionalProperties": false
      },
      "NewContact": {
        "title": "NewContact",
        "type": "object",
        "description": "(tsType: Omit<Contact, 'contactId' | 'accountId' | 'status' | 'tenantId'>, schemaOptions: { title: 'NewContact', exclude: [ 'contactId', 'accountId', 'status', 'tenantId' ] })",
        "properties": {
          "fullName": {
            "type": "string"
          },
          "orgName": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "billNotification": {
            "type": "boolean"
          },
          "accountNotification": {
            "type": "boolean"
          }
        },
        "required": [
          "fullName",
          "phone",
          "email"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Omit<Contact, 'contactId' | 'accountId' | 'status' | 'tenantId'>"
      },
      "ContactPartial": {
        "title": "ContactPartial",
        "type": "object",
        "description": "(tsType: Partial<Contact>, schemaOptions: { partial: true })",
        "properties": {
          "contactId": {
            "type": "string",
            "format": "uuid"
          },
          "fullName": {
            "type": "string"
          },
          "orgName": {
            "type": "string"
          },
          "accountId": {
            "type": "string",
            "format": "uuid"
          },
          "address": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "type": "string",
            "enum": [
              "Active",
              "Inactive"
            ]
          },
          "billNotification": {
            "type": "boolean"
          },
          "accountNotification": {
            "type": "boolean"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "Partial<Contact>"
      },
      "ContactWithRelations": {
        "title": "ContactWithRelations",
        "type": "object",
        "description": "(tsType: ContactWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "contactId": {
            "type": "string",
            "format": "uuid"
          },
          "fullName": {
            "type": "string"
          },
          "orgName": {
            "type": "string"
          },
          "accountId": {
            "type": "string",
            "format": "uuid"
          },
          "address": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "type": "string",
            "enum": [
              "Active",
              "Inactive"
            ]
          },
          "billNotification": {
            "type": "boolean"
          },
          "accountNotification": {
            "type": "boolean"
          }
        },
        "required": [
          "fullName",
          "accountId",
          "phone",
          "email",
          "tenantId",
          "status"
        ],
        "additionalProperties": false,
        "x-typescript-type": "ContactWithRelations"
      },
      "ActivityLog": {
        "title": "ActivityLog",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "timeStamp": {
            "type": "string",
            "format": "date-time"
          },
          "event": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "entityId": {
            "type": "string",
            "format": "uuid"
          },
          "difference": {
            "type": "object"
          }
        },
        "required": [
          "event",
          "category"
        ],
        "additionalProperties": false
      },
      "NewBillingAddress": {
        "title": "NewBillingAddress",
        "type": "object",
        "description": "(tsType: Omit<Address, 'contactId' | 'tenantId'>, schemaOptions: { title: 'NewBillingAddress', exclude: [ 'contactId', 'tenantId' ] })",
        "properties": {
          "fullName": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "isPrimary": {
            "type": "boolean"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "Omit<Address, 'contactId' | 'tenantId'>"
      },
      "loopback.Count": {
        "type": "object",
        "title": "loopback.Count",
        "x-typescript-type": "@loopback/repository#Count",
        "properties": {
          "count": {
            "type": "number"
          }
        }
      },
      "Address.Filter": {
        "type": "object",
        "title": "Address.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "contactId": {
                    "type": "boolean"
                  },
                  "fullName": {
                    "type": "boolean"
                  },
                  "address": {
                    "type": "boolean"
                  },
                  "country": {
                    "type": "boolean"
                  },
                  "phone": {
                    "type": "boolean"
                  },
                  "email": {
                    "type": "boolean"
                  },
                  "isPrimary": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "contactId",
                    "fullName",
                    "address",
                    "country",
                    "phone",
                    "email",
                    "isPrimary"
                  ],
                  "example": "contactId"
                },
                "uniqueItems": true
              }
            ],
            "title": "Address.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Address>"
      },
      "Contact.Filter": {
        "type": "object",
        "title": "Contact.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "Contact.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "contactId": {
                    "type": "boolean"
                  },
                  "fullName": {
                    "type": "boolean"
                  },
                  "orgName": {
                    "type": "boolean"
                  },
                  "accountId": {
                    "type": "boolean"
                  },
                  "address": {
                    "type": "boolean"
                  },
                  "country": {
                    "type": "boolean"
                  },
                  "phone": {
                    "type": "boolean"
                  },
                  "email": {
                    "type": "boolean"
                  },
                  "tenantId": {
                    "type": "boolean"
                  },
                  "status": {
                    "type": "boolean"
                  },
                  "billNotification": {
                    "type": "boolean"
                  },
                  "accountNotification": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "contactId",
                    "fullName",
                    "orgName",
                    "accountId",
                    "address",
                    "country",
                    "phone",
                    "email",
                    "tenantId",
                    "status",
                    "billNotification",
                    "accountNotification"
                  ],
                  "example": "contactId"
                },
                "uniqueItems": true
              }
            ],
            "title": "Contact.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Contact>"
      },
      "PaymentMethod.Filter": {
        "type": "object",
        "title": "PaymentMethod.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "PaymentMethod.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "paymentMethodId": {
                    "type": "boolean"
                  },
                  "accountId": {
                    "type": "boolean"
                  },
                  "extCustomerProfileId": {
                    "type": "boolean"
                  },
                  "extCustomerPaymentProfileId": {
                    "type": "boolean"
                  },
                  "isDefault": {
                    "type": "boolean"
                  },
                  "paymentMethodType": {
                    "type": "boolean"
                  },
                  "paymentMethod": {
                    "type": "boolean"
                  },
                  "isAuthorised": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "paymentMethodId",
                    "accountId",
                    "extCustomerProfileId",
                    "extCustomerPaymentProfileId",
                    "isDefault",
                    "paymentMethodType",
                    "paymentMethod",
                    "isAuthorised"
                  ],
                  "example": "paymentMethodId"
                },
                "uniqueItems": true
              }
            ],
            "title": "PaymentMethod.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<PaymentMethod>"
      },
      "Account.Filter": {
        "type": "object",
        "title": "Account.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "tenantId": {
                    "type": "boolean"
                  },
                  "accountId": {
                    "type": "boolean"
                  },
                  "name": {
                    "type": "boolean"
                  },
                  "address": {
                    "type": "boolean"
                  },
                  "country": {
                    "type": "boolean"
                  },
                  "phone": {
                    "type": "boolean"
                  },
                  "email": {
                    "type": "boolean"
                  },
                  "accountType": {
                    "type": "boolean"
                  },
                  "parentAccountId": {
                    "type": "boolean"
                  },
                  "sameAsSoldTo": {
                    "type": "boolean"
                  },
                  "soldToId": {
                    "type": "boolean"
                  },
                  "billToId": {
                    "type": "boolean"
                  },
                  "autoPay": {
                    "type": "boolean"
                  },
                  "currency": {
                    "type": "boolean"
                  },
                  "balance": {
                    "type": "boolean"
                  },
                  "mrr": {
                    "type": "boolean"
                  },
                  "netTermDays": {
                    "type": "boolean"
                  },
                  "createdOn": {
                    "type": "boolean"
                  },
                  "status": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "tenantId",
                    "accountId",
                    "name",
                    "address",
                    "country",
                    "phone",
                    "email",
                    "accountType",
                    "parentAccountId",
                    "sameAsSoldTo",
                    "soldToId",
                    "billToId",
                    "autoPay",
                    "currency",
                    "balance",
                    "mrr",
                    "netTermDays",
                    "createdOn",
                    "status"
                  ],
                  "example": "tenantId"
                },
                "uniqueItems": true
              }
            ],
            "title": "Account.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Account>"
      },
      "Account.Filter1": {
        "type": "object",
        "title": "Account.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "Account.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "tenantId": {
                    "type": "boolean"
                  },
                  "accountId": {
                    "type": "boolean"
                  },
                  "name": {
                    "type": "boolean"
                  },
                  "address": {
                    "type": "boolean"
                  },
                  "country": {
                    "type": "boolean"
                  },
                  "phone": {
                    "type": "boolean"
                  },
                  "email": {
                    "type": "boolean"
                  },
                  "accountType": {
                    "type": "boolean"
                  },
                  "parentAccountId": {
                    "type": "boolean"
                  },
                  "sameAsSoldTo": {
                    "type": "boolean"
                  },
                  "soldToId": {
                    "type": "boolean"
                  },
                  "billToId": {
                    "type": "boolean"
                  },
                  "autoPay": {
                    "type": "boolean"
                  },
                  "currency": {
                    "type": "boolean"
                  },
                  "balance": {
                    "type": "boolean"
                  },
                  "mrr": {
                    "type": "boolean"
                  },
                  "netTermDays": {
                    "type": "boolean"
                  },
                  "createdOn": {
                    "type": "boolean"
                  },
                  "status": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "tenantId",
                    "accountId",
                    "name",
                    "address",
                    "country",
                    "phone",
                    "email",
                    "accountType",
                    "parentAccountId",
                    "sameAsSoldTo",
                    "soldToId",
                    "billToId",
                    "autoPay",
                    "currency",
                    "balance",
                    "mrr",
                    "netTermDays",
                    "createdOn",
                    "status"
                  ],
                  "example": "tenantId"
                },
                "uniqueItems": true
              }
            ],
            "title": "Account.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Account>"
      },
      "ActivityLog.Filter": {
        "type": "object",
        "title": "ActivityLog.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "ActivityLog.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "boolean"
                  },
                  "timeStamp": {
                    "type": "boolean"
                  },
                  "event": {
                    "type": "boolean"
                  },
                  "category": {
                    "type": "boolean"
                  },
                  "entityId": {
                    "type": "boolean"
                  },
                  "difference": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "id",
                    "timeStamp",
                    "event",
                    "category",
                    "entityId",
                    "difference"
                  ],
                  "example": "id"
                },
                "uniqueItems": true
              }
            ],
            "title": "ActivityLog.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<ActivityLog>"
      },
      "Addon.Filter": {
        "type": "object",
        "title": "Addon.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "boolean"
                  },
                  "name": {
                    "type": "boolean"
                  },
                  "description": {
                    "type": "boolean"
                  },
                  "status": {
                    "type": "boolean"
                  },
                  "createdTs": {
                    "type": "boolean"
                  },
                  "updatedTs": {
                    "type": "boolean"
                  },
                  "addonKey": {
                    "type": "boolean"
                  },
                  "externalName": {
                    "type": "boolean"
                  },
                  "unitOfMeasurement": {
                    "type": "boolean"
                  },
                  "isVisibleInPortal": {
                    "type": "boolean"
                  },
                  "productId": {
                    "type": "boolean"
                  },
                  "tenantId": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "id",
                    "name",
                    "description",
                    "status",
                    "createdTs",
                    "updatedTs",
                    "addonKey",
                    "externalName",
                    "unitOfMeasurement",
                    "isVisibleInPortal",
                    "productId",
                    "tenantId"
                  ],
                  "example": "id"
                },
                "uniqueItems": true
              }
            ],
            "title": "Addon.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Addon>"
      },
      "AddonPrice.Filter": {
        "type": "object",
        "title": "AddonPrice.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "boolean"
                  },
                  "name": {
                    "type": "boolean"
                  },
                  "description": {
                    "type": "boolean"
                  },
                  "price": {
                    "type": "boolean"
                  },
                  "quantity": {
                    "type": "boolean"
                  },
                  "currencyCode": {
                    "type": "boolean"
                  },
                  "status": {
                    "type": "boolean"
                  },
                  "billingPeriodId": {
                    "type": "boolean"
                  },
                  "createdTs": {
                    "type": "boolean"
                  },
                  "updatedTs": {
                    "type": "boolean"
                  },
                  "addonId": {
                    "type": "boolean"
                  },
                  "billingPeriodName": {
                    "type": "boolean"
                  },
                  "externalName": {
                    "type": "boolean"
                  },
                  "addonPriceKey": {
                    "type": "boolean"
                  },
                  "pricingModel": {
                    "type": "boolean"
                  },
                  "overage": {
                    "type": "boolean"
                  },
                  "showDescInInvoice": {
                    "type": "boolean"
                  },
                  "showDescInQuote": {
                    "type": "boolean"
                  },
                  "invoiceNote": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "id",
                    "name",
                    "description",
                    "price",
                    "quantity",
                    "currencyCode",
                    "status",
                    "billingPeriodId",
                    "createdTs",
                    "updatedTs",
                    "addonId",
                    "billingPeriodName",
                    "externalName",
                    "addonPriceKey",
                    "pricingModel",
                    "overage",
                    "showDescInInvoice",
                    "showDescInQuote",
                    "invoiceNote"
                  ],
                  "example": "id"
                },
                "uniqueItems": true
              }
            ],
            "title": "AddonPrice.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<AddonPrice>"
      },
      "Addon.Filter1": {
        "type": "object",
        "title": "Addon.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "Addon.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "boolean"
                  },
                  "name": {
                    "type": "boolean"
                  },
                  "description": {
                    "type": "boolean"
                  },
                  "status": {
                    "type": "boolean"
                  },
                  "createdTs": {
                    "type": "boolean"
                  },
                  "updatedTs": {
                    "type": "boolean"
                  },
                  "addonKey": {
                    "type": "boolean"
                  },
                  "externalName": {
                    "type": "boolean"
                  },
                  "unitOfMeasurement": {
                    "type": "boolean"
                  },
                  "isVisibleInPortal": {
                    "type": "boolean"
                  },
                  "productId": {
                    "type": "boolean"
                  },
                  "tenantId": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "id",
                    "name",
                    "description",
                    "status",
                    "createdTs",
                    "updatedTs",
                    "addonKey",
                    "externalName",
                    "unitOfMeasurement",
                    "isVisibleInPortal",
                    "productId",
                    "tenantId"
                  ],
                  "example": "id"
                },
                "uniqueItems": true
              }
            ],
            "title": "Addon.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Addon>"
      },
      "Amendment.Filter": {
        "type": "object",
        "title": "Amendment.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "Amendment.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "amendmentId": {
                    "type": "boolean"
                  },
                  "name": {
                    "type": "boolean"
                  },
                  "bookingTs": {
                    "type": "boolean"
                  },
                  "effectiveDate": {
                    "type": "boolean"
                  },
                  "type": {
                    "type": "boolean"
                  },
                  "autoRenew": {
                    "type": "boolean"
                  },
                  "pauseDate": {
                    "type": "boolean"
                  },
                  "resumeDate": {
                    "type": "boolean"
                  },
                  "termStartDate": {
                    "type": "boolean"
                  },
                  "status": {
                    "type": "boolean"
                  },
                  "source": {
                    "type": "boolean"
                  },
                  "subscriptionId": {
                    "type": "boolean"
                  },
                  "tenantId": {
                    "type": "boolean"
                  },
                  "destinationAccountId": {
                    "type": "boolean"
                  },
                  "description": {
                    "type": "boolean"
                  },
                  "accountId": {
                    "type": "boolean"
                  },
                  "accountName": {
                    "type": "boolean"
                  },
                  "cancellationReason": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "amendmentId",
                    "name",
                    "bookingTs",
                    "effectiveDate",
                    "type",
                    "autoRenew",
                    "pauseDate",
                    "resumeDate",
                    "termStartDate",
                    "status",
                    "source",
                    "subscriptionId",
                    "tenantId",
                    "destinationAccountId",
                    "description",
                    "accountId",
                    "accountName",
                    "cancellationReason"
                  ],
                  "example": "amendmentId"
                },
                "uniqueItems": true
              }
            ],
            "title": "Amendment.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Amendment>"
      },
      "Permission.Filter": {
        "type": "object",
        "title": "Permission.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "Permission.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "deny": {
                    "type": "boolean"
                  },
                  "allow": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "deny",
                    "allow"
                  ],
                  "example": "deny"
                },
                "uniqueItems": true
              }
            ],
            "title": "Permission.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Permission>"
      },
      "ApiKey.Filter": {
        "type": "object",
        "title": "ApiKey.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "ApiKey.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "boolean"
                  },
                  "tenantId": {
                    "type": "boolean"
                  },
                  "key": {
                    "type": "boolean"
                  },
                  "isActive": {
                    "type": "boolean"
                  },
                  "permissionId": {
                    "type": "boolean"
                  },
                  "createdAt": {
                    "type": "boolean"
                  },
                  "name": {
                    "type": "boolean"
                  },
                  "keyType": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "id",
                    "tenantId",
                    "key",
                    "isActive",
                    "permissionId",
                    "createdAt",
                    "name",
                    "keyType"
                  ],
                  "example": "id"
                },
                "uniqueItems": true
              }
            ],
            "title": "ApiKey.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<ApiKey>"
      },
      "ApplyTransaction.Filter": {
        "type": "object",
        "title": "ApplyTransaction.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "boolean"
                  },
                  "transactionId": {
                    "type": "boolean"
                  },
                  "subscriptionId": {
                    "type": "boolean"
                  },
                  "invoiceId": {
                    "type": "boolean"
                  },
                  "accountId": {
                    "type": "boolean"
                  },
                  "amount": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "id",
                    "transactionId",
                    "subscriptionId",
                    "invoiceId",
                    "accountId",
                    "amount"
                  ],
                  "example": "id"
                },
                "uniqueItems": true
              }
            ],
            "title": "ApplyTransaction.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<ApplyTransaction>"
      },
      "Period.Filter": {
        "type": "object",
        "title": "Period.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "Period.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "boolean"
                  },
                  "periodName": {
                    "type": "boolean"
                  },
                  "term": {
                    "type": "boolean"
                  },
                  "period": {
                    "type": "boolean"
                  },
                  "tenantId": {
                    "type": "boolean"
                  },
                  "isOpted": {
                    "type": "boolean"
                  },
                  "isTrial": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "id",
                    "periodName",
                    "term",
                    "period",
                    "tenantId",
                    "isOpted",
                    "isTrial"
                  ],
                  "example": "id"
                },
                "uniqueItems": true
              }
            ],
            "title": "Period.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Period>"
      },
      "Charge.Filter": {
        "type": "object",
        "title": "Charge.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "Charge.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "chargeId": {
                    "type": "boolean"
                  },
                  "name": {
                    "type": "boolean"
                  },
                  "ratePlanId": {
                    "type": "boolean"
                  },
                  "chargeModel": {
                    "type": "boolean"
                  },
                  "chargeType": {
                    "type": "boolean"
                  },
                  "currency": {
                    "type": "boolean"
                  },
                  "price": {
                    "type": "boolean"
                  },
                  "status": {
                    "type": "boolean"
                  },
                  "uom": {
                    "type": "boolean"
                  },
                  "tenantId": {
                    "type": "boolean"
                  },
                  "billingFrequency": {
                    "type": "boolean"
                  },
                  "recurringPeriod": {
                    "type": "boolean"
                  },
                  "originalChargeId": {
                    "type": "boolean"
                  },
                  "chargeLinkType": {
                    "type": "boolean"
                  },
                  "subscriptionId": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "chargeId",
                    "name",
                    "ratePlanId",
                    "chargeModel",
                    "chargeType",
                    "currency",
                    "price",
                    "status",
                    "uom",
                    "tenantId",
                    "billingFrequency",
                    "recurringPeriod",
                    "originalChargeId",
                    "chargeLinkType",
                    "subscriptionId"
                  ],
                  "example": "chargeId"
                },
                "uniqueItems": true
              }
            ],
            "title": "Charge.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Charge>"
      },
      "Coupon.Filter": {
        "type": "object",
        "title": "Coupon.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "Coupon.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "couponId": {
                    "type": "boolean"
                  },
                  "name": {
                    "type": "boolean"
                  },
                  "code": {
                    "type": "boolean"
                  },
                  "discountType": {
                    "type": "boolean"
                  },
                  "currency": {
                    "type": "boolean"
                  },
                  "amount": {
                    "type": "boolean"
                  },
                  "maxRedemptionCount": {
                    "type": "boolean"
                  },
                  "maxRedemptionLimit": {
                    "type": "boolean"
                  },
                  "discountDurationType": {
                    "type": "boolean"
                  },
                  "maxRedemptionLimitPerCustomer": {
                    "type": "boolean"
                  },
                  "maxRedemptionCountPerCustomer": {
                    "type": "boolean"
                  },
                  "redeemptionEndDate": {
                    "type": "boolean"
                  },
                  "eligibleRateplanOption": {
                    "type": "boolean"
                  },
                  "level": {
                    "type": "boolean"
                  },
                  "status": {
                    "type": "boolean"
                  },
                  "paymentDescription": {
                    "type": "boolean"
                  },
                  "invoiceDescription": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "couponId",
                    "name",
                    "code",
                    "discountType",
                    "currency",
                    "amount",
                    "maxRedemptionCount",
                    "maxRedemptionLimit",
                    "discountDurationType",
                    "maxRedemptionLimitPerCustomer",
                    "maxRedemptionCountPerCustomer",
                    "redeemptionEndDate",
                    "eligibleRateplanOption",
                    "level",
                    "status",
                    "paymentDescription",
                    "invoiceDescription"
                  ],
                  "example": "couponId"
                },
                "uniqueItems": true
              }
            ],
            "title": "Coupon.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Coupon>"
      },
      "Invoice.Filter": {
        "type": "object",
        "title": "Invoice.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "Invoice.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "invoiceId": {
                    "type": "boolean"
                  },
                  "invoiceDate": {
                    "type": "boolean"
                  },
                  "dueDate": {
                    "type": "boolean"
                  },
                  "accountId": {
                    "type": "boolean"
                  },
                  "subscriptionId": {
                    "type": "boolean"
                  },
                  "amountWithoutTax": {
                    "type": "boolean"
                  },
                  "amount": {
                    "type": "boolean"
                  },
                  "tenantId": {
                    "type": "boolean"
                  },
                  "path": {
                    "type": "boolean"
                  },
                  "taxAmount": {
                    "type": "boolean"
                  },
                  "discountAmount": {
                    "type": "boolean"
                  },
                  "accountName": {
                    "type": "boolean"
                  },
                  "currency": {
                    "type": "boolean"
                  },
                  "balance": {
                    "type": "boolean"
                  },
                  "billingAddress": {
                    "type": "boolean"
                  },
                  "lastEmailSentDate": {
                    "type": "boolean"
                  },
                  "paymentAmount": {
                    "type": "boolean"
                  },
                  "postedDate": {
                    "type": "boolean"
                  },
                  "refundAmount": {
                    "type": "boolean"
                  },
                  "transactionId": {
                    "type": "boolean"
                  },
                  "createdTs": {
                    "type": "boolean"
                  },
                  "updatedTs": {
                    "type": "boolean"
                  },
                  "status": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "invoiceId",
                    "invoiceDate",
                    "dueDate",
                    "accountId",
                    "subscriptionId",
                    "amountWithoutTax",
                    "amount",
                    "tenantId",
                    "path",
                    "taxAmount",
                    "discountAmount",
                    "accountName",
                    "currency",
                    "balance",
                    "billingAddress",
                    "lastEmailSentDate",
                    "paymentAmount",
                    "postedDate",
                    "refundAmount",
                    "transactionId",
                    "createdTs",
                    "updatedTs",
                    "status"
                  ],
                  "example": "invoiceId"
                },
                "uniqueItems": true
              }
            ],
            "title": "Invoice.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Invoice>"
      },
      "Memo.Filter": {
        "type": "object",
        "title": "Memo.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "Memo.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "memoId": {
                    "type": "boolean"
                  },
                  "tenantId": {
                    "type": "boolean"
                  },
                  "sourceType": {
                    "type": "boolean"
                  },
                  "type": {
                    "type": "boolean"
                  },
                  "accountId": {
                    "type": "boolean"
                  },
                  "accountName": {
                    "type": "boolean"
                  },
                  "invoiceId": {
                    "type": "boolean"
                  },
                  "currency": {
                    "type": "boolean"
                  },
                  "amount": {
                    "type": "boolean"
                  },
                  "unappliedAmount": {
                    "type": "boolean"
                  },
                  "appliedAmount": {
                    "type": "boolean"
                  },
                  "autoPost": {
                    "type": "boolean"
                  },
                  "excludeFromAutoApplyRules": {
                    "type": "boolean"
                  },
                  "comment": {
                    "type": "boolean"
                  },
                  "reasonCode": {
                    "type": "boolean"
                  },
                  "effectiveDate": {
                    "type": "boolean"
                  },
                  "status": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "memoId",
                    "tenantId",
                    "sourceType",
                    "type",
                    "accountId",
                    "accountName",
                    "invoiceId",
                    "currency",
                    "amount",
                    "unappliedAmount",
                    "appliedAmount",
                    "autoPost",
                    "excludeFromAutoApplyRules",
                    "comment",
                    "reasonCode",
                    "effectiveDate",
                    "status"
                  ],
                  "example": "memoId"
                },
                "uniqueItems": true
              }
            ],
            "title": "Memo.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Memo>"
      },
      "Notification.Filter": {
        "type": "object",
        "title": "Notification.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "Notification.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "notificationId": {
                    "type": "boolean"
                  },
                  "sender": {
                    "type": "boolean"
                  },
                  "subject": {
                    "type": "boolean"
                  },
                  "body": {
                    "type": "boolean"
                  },
                  "receiver": {
                    "type": "boolean"
                  },
                  "type": {
                    "type": "boolean"
                  },
                  "status": {
                    "type": "boolean"
                  },
                  "tenantId": {
                    "type": "boolean"
                  },
                  "accountId": {
                    "type": "boolean"
                  },
                  "sentTs": {
                    "type": "boolean"
                  },
                  "plannedDate": {
                    "type": "boolean"
                  },
                  "name": {
                    "type": "boolean"
                  },
                  "attachments": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "notificationId",
                    "sender",
                    "subject",
                    "body",
                    "receiver",
                    "type",
                    "status",
                    "tenantId",
                    "accountId",
                    "sentTs",
                    "plannedDate",
                    "name",
                    "attachments"
                  ],
                  "example": "notificationId"
                },
                "uniqueItems": true
              }
            ],
            "title": "Notification.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Notification>"
      },
      "Order.Filter": {
        "type": "object",
        "title": "Order.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "Order.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "boolean"
                  },
                  "date": {
                    "type": "boolean"
                  },
                  "accountId": {
                    "type": "boolean"
                  },
                  "invoiceId": {
                    "type": "boolean"
                  },
                  "amount": {
                    "type": "boolean"
                  },
                  "status": {
                    "type": "boolean"
                  },
                  "srcSysCode": {
                    "type": "boolean"
                  },
                  "eventType": {
                    "type": "boolean"
                  },
                  "createdTs": {
                    "type": "boolean"
                  },
                  "updatedTs": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "id",
                    "date",
                    "accountId",
                    "invoiceId",
                    "amount",
                    "status",
                    "srcSysCode",
                    "eventType",
                    "createdTs",
                    "updatedTs"
                  ],
                  "example": "id"
                },
                "uniqueItems": true
              }
            ],
            "title": "Order.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Order>"
      },
      "PaymentGateway.Filter": {
        "type": "object",
        "title": "PaymentGateway.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "PaymentGateway.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "tenantId": {
                    "type": "boolean"
                  },
                  "paymentGateway": {
                    "type": "boolean"
                  },
                  "credentials": {
                    "type": "boolean"
                  },
                  "paymentGatewayId": {
                    "type": "boolean"
                  },
                  "successCallbackMethod": {
                    "type": "boolean"
                  },
                  "successCallbackUrl": {
                    "type": "boolean"
                  },
                  "failCallbackMethod": {
                    "type": "boolean"
                  },
                  "failCallbackUrl": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "tenantId",
                    "paymentGateway",
                    "credentials",
                    "paymentGatewayId",
                    "successCallbackMethod",
                    "successCallbackUrl",
                    "failCallbackMethod",
                    "failCallbackUrl"
                  ],
                  "example": "tenantId"
                },
                "uniqueItems": true
              }
            ],
            "title": "PaymentGateway.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<PaymentGateway>"
      },
      "PaymentGatewayMaster.Filter": {
        "type": "object",
        "title": "PaymentGatewayMaster.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "PaymentGatewayMaster.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "gatewayName": {
                    "type": "boolean"
                  },
                  "gatewayId": {
                    "type": "boolean"
                  },
                  "gatewayCode": {
                    "type": "boolean"
                  },
                  "apiKey": {
                    "type": "boolean"
                  },
                  "apiSecret": {
                    "type": "boolean"
                  },
                  "status": {
                    "type": "boolean"
                  },
                  "createdTs": {
                    "type": "boolean"
                  },
                  "updatedTs": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "gatewayName",
                    "gatewayId",
                    "gatewayCode",
                    "apiKey",
                    "apiSecret",
                    "status",
                    "createdTs",
                    "updatedTs"
                  ],
                  "example": "gatewayName"
                },
                "uniqueItems": true
              }
            ],
            "title": "PaymentGatewayMaster.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<PaymentGatewayMaster>"
      },
      "PaymentGatewayMetadata.Filter": {
        "type": "object",
        "title": "PaymentGatewayMetadata.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "PaymentGatewayMetadata.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "paymentGateway": {
                    "type": "boolean"
                  },
                  "url": {
                    "type": "boolean"
                  },
                  "cards": {
                    "type": "boolean"
                  },
                  "netBanking": {
                    "type": "boolean"
                  },
                  "upi": {
                    "type": "boolean"
                  },
                  "bankTransfer": {
                    "type": "boolean"
                  },
                  "sepaDirectDebit": {
                    "type": "boolean"
                  },
                  "achDebit": {
                    "type": "boolean"
                  },
                  "amazonPay": {
                    "type": "boolean"
                  },
                  "paypal": {
                    "type": "boolean"
                  },
                  "applePay": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "paymentGateway",
                    "url",
                    "cards",
                    "netBanking",
                    "upi",
                    "bankTransfer",
                    "sepaDirectDebit",
                    "achDebit",
                    "amazonPay",
                    "paypal",
                    "applePay"
                  ],
                  "example": "paymentGateway"
                },
                "uniqueItems": true
              }
            ],
            "title": "PaymentGatewayMetadata.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<PaymentGatewayMetadata>"
      },
      "PaymentMethodMaster.Filter": {
        "type": "object",
        "title": "PaymentMethodMaster.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "PaymentMethodMaster.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "methodId": {
                    "type": "boolean"
                  },
                  "methodName": {
                    "type": "boolean"
                  },
                  "methodCode": {
                    "type": "boolean"
                  },
                  "status": {
                    "type": "boolean"
                  },
                  "createdTs": {
                    "type": "boolean"
                  },
                  "updatedTs": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "methodId",
                    "methodName",
                    "methodCode",
                    "status",
                    "createdTs",
                    "updatedTs"
                  ],
                  "example": "methodId"
                },
                "uniqueItems": true
              }
            ],
            "title": "PaymentMethodMaster.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<PaymentMethodMaster>"
      },
      "PaymentMethod.Filter1": {
        "type": "object",
        "title": "PaymentMethod.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "paymentMethodId": {
                    "type": "boolean"
                  },
                  "accountId": {
                    "type": "boolean"
                  },
                  "extCustomerProfileId": {
                    "type": "boolean"
                  },
                  "extCustomerPaymentProfileId": {
                    "type": "boolean"
                  },
                  "isDefault": {
                    "type": "boolean"
                  },
                  "paymentMethodType": {
                    "type": "boolean"
                  },
                  "paymentMethod": {
                    "type": "boolean"
                  },
                  "isAuthorised": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "paymentMethodId",
                    "accountId",
                    "extCustomerProfileId",
                    "extCustomerPaymentProfileId",
                    "isDefault",
                    "paymentMethodType",
                    "paymentMethod",
                    "isAuthorised"
                  ],
                  "example": "paymentMethodId"
                },
                "uniqueItems": true
              }
            ],
            "title": "PaymentMethod.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<PaymentMethod>"
      },
      "Payment.Filter": {
        "type": "object",
        "title": "Payment.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "Payment.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "paymentId": {
                    "type": "boolean"
                  },
                  "tenantId": {
                    "type": "boolean"
                  },
                  "accountId": {
                    "type": "boolean"
                  },
                  "requestedAmount": {
                    "type": "boolean"
                  },
                  "amountPaid": {
                    "type": "boolean"
                  },
                  "currency": {
                    "type": "boolean"
                  },
                  "status": {
                    "type": "boolean"
                  },
                  "acceptPartial": {
                    "type": "boolean"
                  },
                  "expireBy": {
                    "type": "boolean"
                  },
                  "description": {
                    "type": "boolean"
                  },
                  "customer": {
                    "type": "boolean"
                  },
                  "paymentLink": {
                    "type": "boolean"
                  },
                  "paymentLinkId": {
                    "type": "boolean"
                  },
                  "referenceId": {
                    "type": "boolean"
                  },
                  "updateTs": {
                    "type": "boolean"
                  },
                  "transactionId": {
                    "type": "boolean"
                  },
                  "paymentMethod": {
                    "type": "boolean"
                  },
                  "paymentDetails": {
                    "type": "boolean"
                  },
                  "paymentDate": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "paymentId",
                    "tenantId",
                    "accountId",
                    "requestedAmount",
                    "amountPaid",
                    "currency",
                    "status",
                    "acceptPartial",
                    "expireBy",
                    "description",
                    "customer",
                    "paymentLink",
                    "paymentLinkId",
                    "referenceId",
                    "updateTs",
                    "transactionId",
                    "paymentMethod",
                    "paymentDetails",
                    "paymentDate"
                  ],
                  "example": "paymentId"
                },
                "uniqueItems": true
              }
            ],
            "title": "Payment.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Payment>"
      },
      "PingResponse": {
        "type": "object",
        "title": "PingResponse",
        "properties": {
          "greeting": {
            "type": "string"
          },
          "date": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "headers": {
            "type": "object",
            "properties": {
              "Content-Type": {
                "type": "string"
              }
            },
            "additionalProperties": true
          }
        }
      },
      "Product.Filter": {
        "type": "object",
        "title": "Product.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "Product.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "tenantId": {
                    "type": "boolean"
                  },
                  "productId": {
                    "type": "boolean"
                  },
                  "name": {
                    "type": "boolean"
                  },
                  "description": {
                    "type": "boolean"
                  },
                  "effectiveFromDate": {
                    "type": "boolean"
                  },
                  "effectiveToDate": {
                    "type": "boolean"
                  },
                  "logoPath": {
                    "type": "boolean"
                  },
                  "status": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "tenantId",
                    "productId",
                    "name",
                    "description",
                    "effectiveFromDate",
                    "effectiveToDate",
                    "logoPath",
                    "status"
                  ],
                  "example": "tenantId"
                },
                "uniqueItems": true
              }
            ],
            "title": "Product.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Product>"
      },
      "RatePlanPrice.Filter": {
        "type": "object",
        "title": "RatePlanPrice.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "RatePlanPrice.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "boolean"
                  },
                  "name": {
                    "type": "boolean"
                  },
                  "planId": {
                    "type": "boolean"
                  },
                  "productId": {
                    "type": "boolean"
                  },
                  "tenantId": {
                    "type": "boolean"
                  },
                  "isTrial": {
                    "type": "boolean"
                  },
                  "status": {
                    "type": "boolean"
                  },
                  "productName": {
                    "type": "boolean"
                  },
                  "description": {
                    "type": "boolean"
                  },
                  "requireBillingAtSignup": {
                    "type": "boolean"
                  },
                  "setupFee": {
                    "type": "boolean"
                  },
                  "termLength": {
                    "type": "boolean"
                  },
                  "autoRenew": {
                    "type": "boolean"
                  },
                  "pricingModel": {
                    "type": "boolean"
                  },
                  "currencyCode": {
                    "type": "boolean"
                  },
                  "price": {
                    "type": "boolean"
                  },
                  "ratePlanId": {
                    "type": "boolean"
                  },
                  "trialPeriodId": {
                    "type": "boolean"
                  },
                  "billingPeriodId": {
                    "type": "boolean"
                  },
                  "isAutoCalculated": {
                    "type": "boolean"
                  },
                  "currencyId": {
                    "type": "boolean"
                  },
                  "taxIncluded": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "id",
                    "name",
                    "planId",
                    "productId",
                    "tenantId",
                    "isTrial",
                    "status",
                    "productName",
                    "description",
                    "requireBillingAtSignup",
                    "setupFee",
                    "termLength",
                    "autoRenew",
                    "pricingModel",
                    "currencyCode",
                    "price",
                    "ratePlanId",
                    "trialPeriodId",
                    "billingPeriodId",
                    "isAutoCalculated",
                    "currencyId",
                    "taxIncluded"
                  ],
                  "example": "id"
                },
                "uniqueItems": true
              }
            ],
            "title": "RatePlanPrice.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<RatePlanPrice>"
      },
      "RatePlanCharge.Filter": {
        "type": "object",
        "title": "RatePlanCharge.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "RatePlanCharge.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "chargeId": {
                    "type": "boolean"
                  },
                  "name": {
                    "type": "boolean"
                  },
                  "description": {
                    "type": "boolean"
                  },
                  "ratePlanId": {
                    "type": "boolean"
                  },
                  "chargeType": {
                    "type": "boolean"
                  },
                  "chargeModel": {
                    "type": "boolean"
                  },
                  "price": {
                    "type": "boolean"
                  },
                  "quantity": {
                    "type": "boolean"
                  },
                  "overage": {
                    "type": "boolean"
                  },
                  "measuringUnit": {
                    "type": "boolean"
                  },
                  "pricePerUnit": {
                    "type": "boolean"
                  },
                  "itemId": {
                    "type": "boolean"
                  },
                  "currency": {
                    "type": "boolean"
                  },
                  "paymentTiming": {
                    "type": "boolean"
                  },
                  "billingPeriod": {
                    "type": "boolean"
                  },
                  "status": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "chargeId",
                    "name",
                    "description",
                    "ratePlanId",
                    "chargeType",
                    "chargeModel",
                    "price",
                    "quantity",
                    "overage",
                    "measuringUnit",
                    "pricePerUnit",
                    "itemId",
                    "currency",
                    "paymentTiming",
                    "billingPeriod",
                    "status"
                  ],
                  "example": "chargeId"
                },
                "uniqueItems": true
              }
            ],
            "title": "RatePlanCharge.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<RatePlanCharge>"
      },
      "RatePlan.Filter": {
        "type": "object",
        "title": "RatePlan.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "RatePlan.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "boolean"
                  },
                  "name": {
                    "type": "boolean"
                  },
                  "description": {
                    "type": "boolean"
                  },
                  "createdTs": {
                    "type": "boolean"
                  },
                  "updatedTs": {
                    "type": "boolean"
                  },
                  "planLevel": {
                    "type": "boolean"
                  },
                  "isPopular": {
                    "type": "boolean"
                  },
                  "productId": {
                    "type": "boolean"
                  },
                  "planId": {
                    "type": "boolean"
                  },
                  "selfserve": {
                    "type": "boolean"
                  },
                  "checkout": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "id",
                    "name",
                    "description",
                    "createdTs",
                    "updatedTs",
                    "planLevel",
                    "isPopular",
                    "productId",
                    "planId",
                    "selfserve",
                    "checkout"
                  ],
                  "example": "id"
                },
                "uniqueItems": true
              }
            ],
            "title": "RatePlan.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<RatePlan>"
      },
      "SmtpServer.Filter": {
        "type": "object",
        "title": "SmtpServer.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "SmtpServer.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "tenantId": {
                    "type": "boolean"
                  },
                  "host": {
                    "type": "boolean"
                  },
                  "port": {
                    "type": "boolean"
                  },
                  "secure": {
                    "type": "boolean"
                  },
                  "tls": {
                    "type": "boolean"
                  },
                  "auth": {
                    "type": "boolean"
                  },
                  "user": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "tenantId",
                    "host",
                    "port",
                    "secure",
                    "tls",
                    "auth",
                    "user"
                  ],
                  "example": "tenantId"
                },
                "uniqueItems": true
              }
            ],
            "title": "SmtpServer.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<SmtpServer>"
      },
      "SubscriptionSettings.Filter": {
        "type": "object",
        "title": "SubscriptionSettings.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "SubscriptionSettings.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "settingId": {
                    "type": "boolean"
                  },
                  "tenantId": {
                    "type": "boolean"
                  },
                  "settingKey": {
                    "type": "boolean"
                  },
                  "settingValue": {
                    "type": "boolean"
                  },
                  "createdTs": {
                    "type": "boolean"
                  },
                  "updatedTs": {
                    "type": "boolean"
                  },
                  "category": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "settingId",
                    "tenantId",
                    "settingKey",
                    "settingValue",
                    "createdTs",
                    "updatedTs",
                    "category"
                  ],
                  "example": "settingId"
                },
                "uniqueItems": true
              }
            ],
            "title": "SubscriptionSettings.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<SubscriptionSettings>"
      },
      "AuditLog.Filter": {
        "type": "object",
        "title": "AuditLog.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "boolean"
                  },
                  "action": {
                    "type": "boolean"
                  },
                  "actedAt": {
                    "type": "boolean"
                  },
                  "actedOn": {
                    "type": "boolean"
                  },
                  "actionKey": {
                    "type": "boolean"
                  },
                  "entityId": {
                    "type": "boolean"
                  },
                  "actor": {
                    "type": "boolean"
                  },
                  "before": {
                    "type": "boolean"
                  },
                  "after": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "id",
                    "action",
                    "actedAt",
                    "actedOn",
                    "actionKey",
                    "entityId",
                    "actor",
                    "before",
                    "after"
                  ],
                  "example": "id"
                },
                "uniqueItems": true
              }
            ],
            "title": "AuditLog.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<AuditLog>"
      },
      "Subscription.Filter": {
        "type": "object",
        "title": "Subscription.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "Subscription.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "termSubscriptionId": {
                    "type": "boolean"
                  },
                  "version": {
                    "type": "boolean"
                  },
                  "accountId": {
                    "type": "boolean"
                  },
                  "accountName": {
                    "type": "boolean"
                  },
                  "autoRenew": {
                    "type": "boolean"
                  },
                  "subscriptionStartDate": {
                    "type": "boolean"
                  },
                  "subscriptionEndDate": {
                    "type": "boolean"
                  },
                  "termStartDate": {
                    "type": "boolean"
                  },
                  "termEndDate": {
                    "type": "boolean"
                  },
                  "status": {
                    "type": "boolean"
                  },
                  "tenantId": {
                    "type": "boolean"
                  },
                  "productId": {
                    "type": "boolean"
                  },
                  "ratePlanId": {
                    "type": "boolean"
                  },
                  "ratePlanName": {
                    "type": "boolean"
                  },
                  "productName": {
                    "type": "boolean"
                  },
                  "currency": {
                    "type": "boolean"
                  },
                  "billingPeriodId": {
                    "type": "boolean"
                  },
                  "billingCycle": {
                    "type": "boolean"
                  },
                  "isTrial": {
                    "type": "boolean"
                  },
                  "trialPeriodId": {
                    "type": "boolean"
                  },
                  "paymentMethodId": {
                    "type": "boolean"
                  },
                  "createdTs": {
                    "type": "boolean"
                  },
                  "updatedTs": {
                    "type": "boolean"
                  },
                  "subscriptionId": {
                    "type": "boolean"
                  },
                  "effectiveFromTs": {
                    "type": "boolean"
                  },
                  "effectiveToTs": {
                    "type": "boolean"
                  },
                  "isLatest": {
                    "type": "boolean"
                  },
                  "subscriptionType": {
                    "type": "boolean"
                  },
                  "amount": {
                    "type": "boolean"
                  },
                  "usedDays": {
                    "type": "boolean"
                  },
                  "totalDays": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "termSubscriptionId",
                    "version",
                    "accountId",
                    "accountName",
                    "autoRenew",
                    "subscriptionStartDate",
                    "subscriptionEndDate",
                    "termStartDate",
                    "termEndDate",
                    "status",
                    "tenantId",
                    "productId",
                    "ratePlanId",
                    "ratePlanName",
                    "productName",
                    "currency",
                    "billingPeriodId",
                    "billingCycle",
                    "isTrial",
                    "trialPeriodId",
                    "paymentMethodId",
                    "createdTs",
                    "updatedTs",
                    "subscriptionId",
                    "effectiveFromTs",
                    "effectiveToTs",
                    "isLatest",
                    "subscriptionType",
                    "amount",
                    "usedDays",
                    "totalDays"
                  ],
                  "example": "termSubscriptionId"
                },
                "uniqueItems": true
              }
            ],
            "title": "Subscription.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Subscription>"
      },
      "TemplateConfig.Filter": {
        "type": "object",
        "title": "TemplateConfig.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "TemplateConfig.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "tenantId": {
                    "type": "boolean"
                  },
                  "name": {
                    "type": "boolean"
                  },
                  "type": {
                    "type": "boolean"
                  },
                  "from": {
                    "type": "boolean"
                  },
                  "to": {
                    "type": "boolean"
                  },
                  "cc": {
                    "type": "boolean"
                  },
                  "bcc": {
                    "type": "boolean"
                  },
                  "subject": {
                    "type": "boolean"
                  },
                  "isOpted": {
                    "type": "boolean"
                  },
                  "fileName": {
                    "type": "boolean"
                  },
                  "fileFormat": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "tenantId",
                    "name",
                    "type",
                    "from",
                    "to",
                    "cc",
                    "bcc",
                    "subject",
                    "isOpted",
                    "fileName",
                    "fileFormat"
                  ],
                  "example": "tenantId"
                },
                "uniqueItems": true
              }
            ],
            "title": "TemplateConfig.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<TemplateConfig>"
      },
      "TemplateVar.Filter": {
        "type": "object",
        "title": "TemplateVar.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "TemplateVar.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "templateId": {
                    "type": "boolean"
                  },
                  "entity": {
                    "type": "boolean"
                  },
                  "variable": {
                    "type": "boolean"
                  },
                  "constant": {
                    "type": "boolean"
                  },
                  "url": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "templateId",
                    "entity",
                    "variable",
                    "constant",
                    "url"
                  ],
                  "example": "templateId"
                },
                "uniqueItems": true
              }
            ],
            "title": "TemplateVar.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<TemplateVar>"
      },
      "Template.Filter": {
        "type": "object",
        "title": "Template.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "templateId": {
                    "type": "boolean"
                  },
                  "tenantId": {
                    "type": "boolean"
                  },
                  "content": {
                    "type": "boolean"
                  },
                  "isDefault": {
                    "type": "boolean"
                  },
                  "active": {
                    "type": "boolean"
                  },
                  "name": {
                    "type": "boolean"
                  },
                  "description": {
                    "type": "boolean"
                  },
                  "format": {
                    "type": "boolean"
                  },
                  "version": {
                    "type": "boolean"
                  },
                  "type": {
                    "type": "boolean"
                  },
                  "subject": {
                    "type": "boolean"
                  },
                  "isOpted": {
                    "type": "boolean"
                  },
                  "fileName": {
                    "type": "boolean"
                  },
                  "fileFormat": {
                    "type": "boolean"
                  },
                  "recipientEntity": {
                    "type": "boolean"
                  },
                  "trialExpiryReminderLeadDays": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "templateId",
                    "tenantId",
                    "content",
                    "isDefault",
                    "active",
                    "name",
                    "description",
                    "format",
                    "version",
                    "type",
                    "subject",
                    "isOpted",
                    "fileName",
                    "fileFormat",
                    "recipientEntity",
                    "trialExpiryReminderLeadDays"
                  ],
                  "example": "templateId"
                },
                "uniqueItems": true
              }
            ],
            "title": "Template.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Template>"
      },
      "Template.Filter1": {
        "type": "object",
        "title": "Template.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "Template.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "templateId": {
                    "type": "boolean"
                  },
                  "tenantId": {
                    "type": "boolean"
                  },
                  "content": {
                    "type": "boolean"
                  },
                  "isDefault": {
                    "type": "boolean"
                  },
                  "active": {
                    "type": "boolean"
                  },
                  "name": {
                    "type": "boolean"
                  },
                  "description": {
                    "type": "boolean"
                  },
                  "format": {
                    "type": "boolean"
                  },
                  "version": {
                    "type": "boolean"
                  },
                  "type": {
                    "type": "boolean"
                  },
                  "subject": {
                    "type": "boolean"
                  },
                  "isOpted": {
                    "type": "boolean"
                  },
                  "fileName": {
                    "type": "boolean"
                  },
                  "fileFormat": {
                    "type": "boolean"
                  },
                  "recipientEntity": {
                    "type": "boolean"
                  },
                  "trialExpiryReminderLeadDays": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "templateId",
                    "tenantId",
                    "content",
                    "isDefault",
                    "active",
                    "name",
                    "description",
                    "format",
                    "version",
                    "type",
                    "subject",
                    "isOpted",
                    "fileName",
                    "fileFormat",
                    "recipientEntity",
                    "trialExpiryReminderLeadDays"
                  ],
                  "example": "templateId"
                },
                "uniqueItems": true
              }
            ],
            "title": "Template.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Template>"
      },
      "Transaction.Filter": {
        "type": "object",
        "title": "Transaction.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "Transaction.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "transactionId": {
                    "type": "boolean"
                  },
                  "referenceId": {
                    "type": "boolean"
                  },
                  "amount": {
                    "type": "boolean"
                  },
                  "unappliedAmount": {
                    "type": "boolean"
                  },
                  "appliedAmount": {
                    "type": "boolean"
                  },
                  "currency": {
                    "type": "boolean"
                  },
                  "accountId": {
                    "type": "boolean"
                  },
                  "accountName": {
                    "type": "boolean"
                  },
                  "type": {
                    "type": "boolean"
                  },
                  "transactionDate": {
                    "type": "boolean"
                  },
                  "mode": {
                    "type": "boolean"
                  },
                  "status": {
                    "type": "boolean"
                  },
                  "createdOn": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "transactionId",
                    "referenceId",
                    "amount",
                    "unappliedAmount",
                    "appliedAmount",
                    "currency",
                    "accountId",
                    "accountName",
                    "type",
                    "transactionDate",
                    "mode",
                    "status",
                    "createdOn"
                  ],
                  "example": "transactionId"
                },
                "uniqueItems": true
              }
            ],
            "title": "Transaction.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Transaction>"
      },
      "Usage.Filter": {
        "type": "object",
        "title": "Usage.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "Usage.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "usageId": {
                    "type": "boolean"
                  },
                  "tenantId": {
                    "type": "boolean"
                  },
                  "accountId": {
                    "type": "boolean"
                  },
                  "accountName": {
                    "type": "boolean"
                  },
                  "termSubscriptionId": {
                    "type": "boolean"
                  },
                  "version": {
                    "type": "boolean"
                  },
                  "chargeId": {
                    "type": "boolean"
                  },
                  "chargeName": {
                    "type": "boolean"
                  },
                  "usageDate": {
                    "type": "boolean"
                  },
                  "quantity": {
                    "type": "boolean"
                  },
                  "createdTs": {
                    "type": "boolean"
                  },
                  "source": {
                    "type": "boolean"
                  },
                  "status": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "usageId",
                    "tenantId",
                    "accountId",
                    "accountName",
                    "termSubscriptionId",
                    "version",
                    "chargeId",
                    "chargeName",
                    "usageDate",
                    "quantity",
                    "createdTs",
                    "source",
                    "status"
                  ],
                  "example": "usageId"
                },
                "uniqueItems": true
              }
            ],
            "title": "Usage.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Usage>"
      },
      "User.Filter": {
        "type": "object",
        "title": "User.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "User.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "tenantId": {
                    "type": "boolean"
                  },
                  "firstName": {
                    "type": "boolean"
                  },
                  "lastName": {
                    "type": "boolean"
                  },
                  "email": {
                    "type": "boolean"
                  },
                  "status": {
                    "type": "boolean"
                  },
                  "id": {
                    "type": "boolean"
                  },
                  "roles": {
                    "type": "boolean"
                  },
                  "keycloakId": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "tenantId",
                    "firstName",
                    "lastName",
                    "email",
                    "status",
                    "id",
                    "roles",
                    "keycloakId"
                  ],
                  "example": "tenantId"
                },
                "uniqueItems": true
              }
            ],
            "title": "User.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<User>"
      },
      "Webhook.Filter": {
        "type": "object",
        "title": "Webhook.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "Webhook.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "webhookId": {
                    "type": "boolean"
                  },
                  "url": {
                    "type": "boolean"
                  },
                  "secret": {
                    "type": "boolean"
                  },
                  "alertEmail": {
                    "type": "boolean"
                  },
                  "activeEvents": {
                    "type": "boolean"
                  },
                  "tenantId": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "webhookId",
                    "url",
                    "secret",
                    "alertEmail",
                    "activeEvents",
                    "tenantId"
                  ],
                  "example": "webhookId"
                },
                "uniqueItems": true
              }
            ],
            "title": "Webhook.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Webhook>"
      }
    }
  },
  "security": [
    {
      "jwt": []
    },
    {
      "apiKeyAuth": []
    }
  ],
  "servers": [
    {
      "url": "/"
    }
  ]
}