{
  "openapi": "3.0.0",
  "info": {
    "title": "BillHive",
    "version": "0.0.1",
    "description": "facades",
    "contact": {
      "name": "Mohit Aggarwal",
      "email": "mohitetc2008@gmail.com"
    }
  },
  "paths": {
    "/accounts/{accountId}/payment-methods": {
      "get": {
        "x-controller-name": "AccountController",
        "x-operation-name": "findPaymentMethods",
        "tags": [
          "Customer"
        ],
        "summary": "List payment methods for a customer",
        "description": "Updates payment method details for a customer.",
        "responses": {
          "200": {
            "description": "Array of PaymentMethod model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentMethodWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethod.Filter"
                }
              }
            }
          }
        ],
        "operationId": "AccountController.findPaymentMethods"
      }
    },
    "/accounts/{id}": {
      "patch": {
        "x-controller-name": "AccountController",
        "x-operation-name": "updateById",
        "tags": [
          "Customer"
        ],
        "summary": "Update a customer",
        "description": "Updates the customer resource.",
        "responses": {
          "204": {
            "description": "Account PATCH success"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountPartial"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "AccountController.updateById"
      },
      "get": {
        "x-controller-name": "AccountController",
        "x-operation-name": "findById",
        "tags": [
          "Customer"
        ],
        "summary": "Fetch a customer",
        "description": "Retrieves the details of the desired customer. You can use the unique identifier for a particular customer to retrieve the desired details.",
        "responses": {
          "200": {
            "description": "Account model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account.Filter"
                }
              }
            }
          }
        ],
        "operationId": "AccountController.findById"
      },
      "delete": {
        "x-controller-name": "AccountController",
        "x-operation-name": "deleteById",
        "tags": [
          "Customer"
        ],
        "summary": "Delete a customer",
        "description": "Deletes a specific account asynchronously.",
        "responses": {
          "204": {
            "description": "Account PATCH success"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "operationId": "AccountController.deleteById"
      }
    },
    "/accounts": {
      "post": {
        "x-controller-name": "AccountController",
        "x-operation-name": "create",
        "tags": [
          "Customer"
        ],
        "summary": "Create a customer",
        "description": "Creates a customer account with an optional sold-to contact. contactPerson represents sold-to contact.<br><br>The transaction is atomic; if any part fails for any reason, the entire transaction is rolled back.",
        "responses": {
          "200": {
            "description": "Account model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewAccountInfo"
              }
            }
          }
        },
        "operationId": "AccountController.create"
      },
      "get": {
        "x-controller-name": "AccountController",
        "x-operation-name": "find",
        "tags": [
          "Customer"
        ],
        "summary": "List customers",
        "description": "Retrieves a list of customers added.",
        "responses": {
          "200": {
            "description": "Array of Account model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account.Filter1"
                }
              }
            }
          }
        ],
        "operationId": "AccountController.find"
      }
    },
    "/actions": {
      "get": {
        "x-controller-name": "ActionController",
        "x-operation-name": "find",
        "tags": [
          "ActionController"
        ],
        "responses": {
          "200": {
            "description": "Array of Action model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActionWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Action.Filter"
                }
              }
            }
          }
        ],
        "operationId": "ActionController.find"
      }
    },
    "/cb-payment-success": {
      "post": {
        "x-controller-name": "CallbackUrlsController",
        "x-operation-name": "cbPaymentSuccess",
        "tags": [
          "CallbackUrlsController"
        ],
        "responses": {},
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "operationId": "CallbackUrlsController.cbPaymentSuccess"
      }
    },
    "/charges/{id}": {
      "delete": {
        "x-controller-name": "ChargeController",
        "x-operation-name": "deleteById",
        "tags": [
          "ChargeController"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "description": "product-rate-plan-components DELETE success"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "operationId": "ChargeController.deleteById"
      }
    },
    "/charges": {
      "post": {
        "x-controller-name": "ChargeController",
        "x-operation-name": "create",
        "tags": [
          "ChargeController"
        ],
        "responses": {
          "200": {
            "description": "Charges model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Charge"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewCharge"
              }
            }
          }
        },
        "operationId": "ChargeController.create"
      },
      "get": {
        "x-controller-name": "ChargeController",
        "x-operation-name": "find",
        "tags": [
          "ChargeController"
        ],
        "responses": {
          "200": {
            "description": "Array of Charges model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChargeWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Charge.Filter"
                }
              }
            }
          }
        ],
        "operationId": "ChargeController.find"
      }
    },
    "/download/{filename}": {
      "get": {
        "x-controller-name": "InvoiceController",
        "x-operation-name": "downloadFile",
        "tags": [
          "InvoiceController"
        ],
        "responses": {
          "200": {
            "description": "Return value of InvoiceController.downloadFile"
          }
        },
        "parameters": [
          {
            "name": "filename",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "operationId": "InvoiceController.downloadFile"
      }
    },
    "/features/{id}": {
      "patch": {
        "x-controller-name": "FeatureController",
        "x-operation-name": "updateById",
        "tags": [
          "FeatureController"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Feature PATCH success"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FeaturePartial"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "FeatureController.updateById"
      },
      "delete": {
        "x-controller-name": "FeatureController",
        "x-operation-name": "deleteById",
        "tags": [
          "FeatureController"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Feature DELETE success"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "operationId": "FeatureController.deleteById"
      }
    },
    "/features": {
      "post": {
        "x-controller-name": "FeatureController",
        "x-operation-name": "create",
        "tags": [
          "FeatureController"
        ],
        "responses": {
          "200": {
            "description": "Feature model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Feature"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewFeature"
              }
            }
          }
        },
        "operationId": "FeatureController.create"
      },
      "get": {
        "x-controller-name": "FeatureController",
        "x-operation-name": "find",
        "tags": [
          "FeatureController"
        ],
        "responses": {
          "200": {
            "description": "Array of Feature model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FeatureWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Feature.Filter"
                }
              }
            }
          }
        ],
        "operationId": "FeatureController.find"
      }
    },
    "/forget-password": {
      "post": {
        "x-controller-name": "AuthController",
        "x-operation-name": "forgetPassword",
        "tags": [
          "AuthController"
        ],
        "responses": {
          "200": {
            "description": "Return value of AuthController.forgetPassword"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForgetPassword"
              }
            }
          }
        },
        "operationId": "AuthController.forgetPassword"
      }
    },
    "/groups": {
      "post": {
        "x-controller-name": "GroupController",
        "x-operation-name": "create",
        "tags": [
          "GroupController"
        ],
        "responses": {
          "200": {
            "description": "Group model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewGroup"
              }
            }
          }
        },
        "operationId": "GroupController.create"
      },
      "get": {
        "x-controller-name": "GroupController",
        "x-operation-name": "find",
        "tags": [
          "GroupController"
        ],
        "responses": {
          "200": {
            "description": "Array of Feature model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group.Filter"
                }
              }
            }
          }
        ],
        "operationId": "GroupController.find"
      }
    },
    "/invoices/{invoiceId}/invoice-items": {
      "get": {
        "x-controller-name": "InvoiceController",
        "x-operation-name": "findByInvoiceId",
        "tags": [
          "InvoiceController"
        ],
        "responses": {
          "200": {
            "description": "Array of Invoice Item model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvoiceItemWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "invoiceId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "operationId": "InvoiceController.findByInvoiceId"
      }
    },
    "/invoices/{invoiceId}": {
      "get": {
        "x-controller-name": "InvoiceController",
        "x-operation-name": "findById",
        "tags": [
          "InvoiceController"
        ],
        "responses": {
          "200": {
            "description": "Array of Invoice model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvoiceWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "invoiceId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "operationId": "InvoiceController.findById"
      }
    },
    "/invoices": {
      "get": {
        "x-controller-name": "InvoiceController",
        "x-operation-name": "find",
        "tags": [
          "InvoiceController"
        ],
        "responses": {
          "200": {
            "description": "Array of Invoice model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvoiceWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice.Filter"
                }
              }
            }
          }
        ],
        "operationId": "InvoiceController.find"
      }
    },
    "/login": {
      "post": {
        "x-controller-name": "AuthController",
        "x-operation-name": "login",
        "tags": [
          "AuthController"
        ],
        "responses": {
          "200": {
            "description": "Users model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Credentials"
              }
            }
          }
        },
        "operationId": "AuthController.login"
      }
    },
    "/menu/formatted": {
      "get": {
        "x-controller-name": "MenuController",
        "x-operation-name": "findFormatted",
        "tags": [
          "MenuController"
        ],
        "responses": {
          "200": {
            "description": "Return value of MenuController.findFormatted"
          }
        },
        "operationId": "MenuController.findFormatted"
      }
    },
    "/menu": {
      "post": {
        "x-controller-name": "MenuController",
        "x-operation-name": "create",
        "tags": [
          "MenuController"
        ],
        "responses": {
          "200": {
            "description": "Menu model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Menu"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewMenu"
              }
            }
          }
        },
        "operationId": "MenuController.create"
      },
      "get": {
        "x-controller-name": "MenuController",
        "x-operation-name": "find",
        "tags": [
          "MenuController"
        ],
        "responses": {
          "200": {
            "description": "Array of Menu model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MenuWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Menu.Filter"
                }
              }
            }
          }
        ],
        "operationId": "MenuController.find"
      }
    },
    "/metadata/{variable}": {
      "get": {
        "x-controller-name": "MetaDataController",
        "x-operation-name": "find",
        "tags": [
          "MetaDataController"
        ],
        "responses": {
          "200": {
            "description": "Array of Feature model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": "string"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "variable",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "operationId": "MetaDataController.find"
      }
    },
    "/mytenant": {
      "get": {
        "x-controller-name": "TenantController",
        "x-operation-name": "findMyTenant",
        "tags": [
          "TenantController"
        ],
        "responses": {
          "200": {
            "description": "Tenant model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantWithRelations"
                }
              }
            }
          }
        },
        "operationId": "TenantController.findMyTenant"
      }
    },
    "/notifications": {
      "get": {
        "x-controller-name": "NotificationController",
        "x-operation-name": "find",
        "tags": [
          "NotificationController"
        ],
        "responses": {
          "200": {
            "description": "Array of Notification model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NotificationWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Notification.Filter"
                }
              }
            }
          }
        ],
        "operationId": "NotificationController.find"
      }
    },
    "/openapi/actions": {
      "get": {
        "x-controller-name": "ActionController",
        "x-operation-name": "createActionsFromOpenapi",
        "tags": [
          "ActionController"
        ],
        "description": "fetch endpoints from openapi.json of current service and store as Actions",
        "responses": {
          "200": {
            "description": "Successful execution",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "operationId": "ActionController.createActionsFromOpenapi"
      }
    },
    "/payments": {
      "post": {
        "x-controller-name": "PaymentController",
        "x-operation-name": "create",
        "tags": [
          "PaymentController"
        ],
        "responses": {
          "200": {
            "description": "Payment model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewPayment"
              }
            }
          }
        },
        "operationId": "PaymentController.create"
      },
      "get": {
        "x-controller-name": "PaymentController",
        "x-operation-name": "find",
        "tags": [
          "PaymentController"
        ],
        "responses": {
          "200": {
            "description": "Array of Payment model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payment.Filter"
                }
              }
            }
          }
        ],
        "operationId": "PaymentController.find"
      }
    },
    "/ping": {
      "get": {
        "x-controller-name": "PingController",
        "x-operation-name": "ping",
        "tags": [
          "PingController"
        ],
        "responses": {
          "200": {
            "description": "Ping Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PingResponse"
                }
              }
            }
          }
        },
        "operationId": "PingController.ping"
      }
    },
    "/policies/{id}": {
      "patch": {
        "x-controller-name": "PolicyController",
        "x-operation-name": "updateById",
        "tags": [
          "PolicyController"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Policy PATCH success"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PolicyPartial"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "PolicyController.updateById"
      },
      "delete": {
        "x-controller-name": "PolicyController",
        "x-operation-name": "deleteById",
        "tags": [
          "PolicyController"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Policy DELETE success"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "operationId": "PolicyController.deleteById"
      }
    },
    "/policies/{roleId}": {
      "get": {
        "x-controller-name": "PolicyController",
        "x-operation-name": "findByRoleId",
        "tags": [
          "PolicyController"
        ],
        "responses": {
          "200": {
            "description": "Array of Policy model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PolicyWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "operationId": "PolicyController.findByRoleId"
      }
    },
    "/policies": {
      "post": {
        "x-controller-name": "PolicyController",
        "x-operation-name": "create",
        "tags": [
          "PolicyController"
        ],
        "responses": {
          "200": {
            "description": "Policy model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Policy"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewPolicy"
              }
            }
          }
        },
        "operationId": "PolicyController.create"
      },
      "get": {
        "x-controller-name": "PolicyController",
        "x-operation-name": "find",
        "tags": [
          "PolicyController"
        ],
        "responses": {
          "200": {
            "description": "Array of Policy model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PolicyWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Policy.Filter"
                }
              }
            }
          }
        ],
        "operationId": "PolicyController.find"
      }
    },
    "/products/{id}": {
      "patch": {
        "x-controller-name": "ProductController",
        "x-operation-name": "updateById",
        "tags": [
          "ProductController"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Product PATCH success"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductPartial"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "ProductController.updateById"
      },
      "get": {
        "x-controller-name": "ProductController",
        "x-operation-name": "findById",
        "tags": [
          "ProductController"
        ],
        "responses": {
          "200": {
            "description": "Product model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductWithRelations"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product.Filter"
                }
              }
            }
          }
        ],
        "operationId": "ProductController.findById"
      },
      "delete": {
        "x-controller-name": "ProductController",
        "x-operation-name": "deleteById",
        "tags": [
          "ProductController"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Product DELETE success"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "operationId": "ProductController.deleteById"
      }
    },
    "/products": {
      "post": {
        "x-controller-name": "ProductController",
        "x-operation-name": "create",
        "tags": [
          "ProductController"
        ],
        "responses": {
          "200": {
            "description": "Product model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewProduct"
              }
            }
          }
        },
        "operationId": "ProductController.create"
      },
      "get": {
        "x-controller-name": "ProductController",
        "x-operation-name": "find",
        "tags": [
          "ProductController"
        ],
        "responses": {
          "200": {
            "description": "Array of Product model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product.Filter"
                }
              }
            }
          }
        ],
        "operationId": "ProductController.find"
      }
    },
    "/rate-plans/{id}": {
      "get": {
        "x-controller-name": "RatePlanController",
        "x-operation-name": "findById",
        "tags": [
          "RatePlanController"
        ],
        "responses": {
          "200": {
            "description": "Array of RatePlan model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RatePlanWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RatePlan.Filter"
                }
              }
            }
          }
        ],
        "operationId": "RatePlanController.findById"
      },
      "delete": {
        "x-controller-name": "RatePlanController",
        "x-operation-name": "deleteById",
        "tags": [
          "RatePlanController"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "description": "rate-plan DELETE success"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "operationId": "RatePlanController.deleteById"
      }
    },
    "/rate-plans": {
      "post": {
        "x-controller-name": "RatePlanController",
        "x-operation-name": "create",
        "tags": [
          "RatePlanController"
        ],
        "responses": {
          "200": {
            "description": "RatePlan model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RatePlan"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewRatePlan"
              }
            }
          }
        },
        "operationId": "RatePlanController.create"
      },
      "get": {
        "x-controller-name": "RatePlanController",
        "x-operation-name": "find",
        "tags": [
          "RatePlanController"
        ],
        "responses": {
          "200": {
            "description": "Array of RatePlan model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RatePlanWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RatePlan.Filter"
                }
              }
            }
          }
        ],
        "operationId": "RatePlanController.find"
      }
    },
    "/refreshToken": {
      "post": {
        "x-controller-name": "AuthController",
        "x-operation-name": "refresh",
        "tags": [
          "AuthController"
        ],
        "responses": {
          "200": {
            "description": "Token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "accessToken": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "refreshToken"
                ],
                "properties": {
                  "refreshToken": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "description": "Reissuing Access Token",
          "required": true
        },
        "operationId": "AuthController.refresh"
      }
    },
    "/reset-password": {
      "post": {
        "x-controller-name": "AuthController",
        "x-operation-name": "resetPassword",
        "tags": [
          "AuthController"
        ],
        "responses": {
          "200": {
            "description": "Users model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "operationId": "AuthController.resetPassword"
      }
    },
    "/roles": {
      "post": {
        "x-controller-name": "RoleController",
        "x-operation-name": "create",
        "tags": [
          "RoleController"
        ],
        "responses": {
          "200": {
            "description": "Role model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewRole"
              }
            }
          }
        },
        "operationId": "RoleController.create"
      },
      "get": {
        "x-controller-name": "RoleController",
        "x-operation-name": "find",
        "tags": [
          "RoleController"
        ],
        "responses": {
          "200": {
            "description": "Array of Action model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role.Filter"
                }
              }
            }
          }
        ],
        "operationId": "RoleController.find"
      }
    },
    "/settings": {
      "post": {
        "x-controller-name": "SettingController",
        "x-operation-name": "create",
        "tags": [
          "SettingController"
        ],
        "responses": {
          "200": {
            "description": "Setting model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Setting"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewSetting"
              }
            }
          }
        },
        "operationId": "SettingController.create"
      },
      "get": {
        "x-controller-name": "SettingController",
        "x-operation-name": "find",
        "tags": [
          "SettingController"
        ],
        "responses": {
          "200": {
            "description": "Array of Setting model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SettingWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Setting.Filter"
                }
              }
            }
          }
        ],
        "operationId": "SettingController.find"
      }
    },
    "/smtp-server": {
      "get": {
        "x-controller-name": "ConfigureSmtpServerController",
        "x-operation-name": "find",
        "tags": [
          "ConfigureSmtpServerController"
        ],
        "responses": {
          "200": {
            "description": "Array of Configured SMTP Server model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SmtpServerWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmtpServer.Filter"
                }
              }
            }
          }
        ],
        "operationId": "ConfigureSmtpServerController.find"
      }
    },
    "/subscriptions/{id}": {
      "get": {
        "x-controller-name": "SubscriptionController",
        "x-operation-name": "findById",
        "tags": [
          "SubscriptionController"
        ],
        "responses": {
          "200": {
            "description": "Array of Feature model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubscriptionWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription.Filter"
                }
              }
            }
          }
        ],
        "operationId": "SubscriptionController.findById"
      }
    },
    "/subscriptions": {
      "get": {
        "x-controller-name": "SubscriptionController",
        "x-operation-name": "find",
        "tags": [
          "SubscriptionController"
        ],
        "responses": {
          "200": {
            "description": "Array of Feature model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubscriptionWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription.Filter"
                }
              }
            }
          }
        ],
        "operationId": "SubscriptionController.find"
      }
    },
    "/template-vars": {
      "get": {
        "x-controller-name": "TemplateVarController",
        "x-operation-name": "find",
        "tags": [
          "TemplateVarController"
        ],
        "responses": {
          "200": {
            "description": "Array of TemplateVar model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TemplateVarWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateVar.Filter"
                }
              }
            }
          }
        ],
        "operationId": "TemplateVarController.find"
      }
    },
    "/templates/getPreSignedUrl": {
      "post": {
        "x-controller-name": "TemplateController",
        "x-operation-name": "generatePreSignedUrl",
        "tags": [
          "TemplateController"
        ],
        "responses": {
          "200": {
            "description": "Return value of TemplateController.generatePreSignedUrl"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "operationId": "TemplateController.generatePreSignedUrl"
      }
    },
    "/templates/{id}/mergefields": {
      "get": {
        "x-controller-name": "TemplateController",
        "x-operation-name": "getMergedFields",
        "tags": [
          "TemplateController"
        ],
        "responses": {
          "200": {
            "description": "Return value of TemplateController.getMergedFields"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Template.Filter"
                }
              }
            }
          }
        ],
        "operationId": "TemplateController.getMergedFields"
      }
    },
    "/templates/{id}": {
      "delete": {
        "x-controller-name": "TemplateController",
        "x-operation-name": "deleteById",
        "tags": [
          "TemplateController"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Template DELETE success"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "operationId": "TemplateController.deleteById"
      }
    },
    "/templates": {
      "post": {
        "x-controller-name": "TemplateController",
        "x-operation-name": "login",
        "tags": [
          "TemplateController"
        ],
        "responses": {
          "200": {
            "description": "Return value of TemplateController.login"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewTemplate"
              }
            }
          }
        },
        "operationId": "TemplateController.login"
      },
      "get": {
        "x-controller-name": "TemplateController",
        "x-operation-name": "find",
        "tags": [
          "TemplateController"
        ],
        "responses": {
          "200": {
            "description": "Array of Template model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TemplateWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Template.Filter1"
                }
              }
            }
          }
        ],
        "operationId": "TemplateController.find"
      }
    },
    "/tenants/{id}": {
      "patch": {
        "x-controller-name": "TenantController",
        "x-operation-name": "updateById",
        "tags": [
          "TenantController"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Tenant PATCH success"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TenantPartial"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "TenantController.updateById"
      },
      "delete": {
        "x-controller-name": "TenantController",
        "x-operation-name": "deleteById",
        "tags": [
          "TenantController"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Tenant Successful deleted"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "operationId": "TenantController.deleteById"
      }
    },
    "/tenants": {
      "post": {
        "x-controller-name": "TenantController",
        "x-operation-name": "create",
        "tags": [
          "TenantController"
        ],
        "responses": {
          "200": {
            "description": "Tenant model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tenant"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewTenant"
              }
            }
          }
        },
        "operationId": "TenantController.create"
      },
      "get": {
        "x-controller-name": "TenantController",
        "x-operation-name": "find",
        "tags": [
          "TenantController"
        ],
        "responses": {
          "200": {
            "description": "Return value of TenantController.find"
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tenant.Filter"
                }
              }
            }
          }
        ],
        "operationId": "TenantController.find"
      }
    },
    "/transactions": {
      "post": {
        "x-controller-name": "TransactionController",
        "x-operation-name": "create",
        "tags": [
          "TransactionController"
        ],
        "responses": {
          "200": {
            "description": "Transaction model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewTransaction"
              }
            }
          }
        },
        "operationId": "TransactionController.create"
      },
      "get": {
        "x-controller-name": "TransactionController",
        "x-operation-name": "find",
        "tags": [
          "TransactionController"
        ],
        "responses": {
          "200": {
            "description": "Array of Transaction model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TransactionWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction.Filter"
                }
              }
            }
          }
        ],
        "operationId": "TransactionController.find"
      }
    },
    "/uoms/{id}": {
      "patch": {
        "x-controller-name": "UomController",
        "x-operation-name": "updateById",
        "tags": [
          "UomController"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Uom PATCH success"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UomPartial"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "UomController.updateById"
      },
      "delete": {
        "x-controller-name": "UomController",
        "x-operation-name": "deleteById",
        "tags": [
          "UomController"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Uom DELETE success"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "operationId": "UomController.deleteById"
      }
    },
    "/uoms": {
      "post": {
        "x-controller-name": "UomController",
        "x-operation-name": "create",
        "tags": [
          "UomController"
        ],
        "responses": {
          "200": {
            "description": "Uom model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Uom"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewUom"
              }
            }
          }
        },
        "operationId": "UomController.create"
      },
      "get": {
        "x-controller-name": "UomController",
        "x-operation-name": "find",
        "tags": [
          "UomController"
        ],
        "responses": {
          "200": {
            "description": "Array of Uom model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UomWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Uom.Filter"
                }
              }
            }
          }
        ],
        "operationId": "UomController.find"
      }
    },
    "/usages": {
      "post": {
        "x-controller-name": "UsageController",
        "x-operation-name": "create",
        "tags": [
          "UsageController"
        ],
        "responses": {
          "200": {
            "description": "Usage model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Usage"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewUsage"
              }
            }
          }
        },
        "operationId": "UsageController.create"
      },
      "get": {
        "x-controller-name": "UsageController",
        "x-operation-name": "find",
        "tags": [
          "UsageController"
        ],
        "responses": {
          "200": {
            "description": "Array of Usage model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UsageWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Usage.Filter"
                }
              }
            }
          }
        ],
        "operationId": "UsageController.find"
      }
    },
    "/users/count": {
      "get": {
        "x-controller-name": "UserController",
        "x-operation-name": "count",
        "tags": [
          "UserController"
        ],
        "responses": {
          "200": {
            "description": "Return value of UserController.count"
          }
        },
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "User.WhereFilter",
                  "additionalProperties": true,
                  "x-typescript-type": "@loopback/repository#Where<User>"
                }
              }
            }
          }
        ],
        "operationId": "UserController.count"
      }
    },
    "/users/{id}": {
      "patch": {
        "x-controller-name": "UserController",
        "x-operation-name": "updateById",
        "tags": [
          "UserController"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "description": "User PATCH success"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "UserController.updateById"
      },
      "delete": {
        "x-controller-name": "UserController",
        "x-operation-name": "deleteById",
        "tags": [
          "UserController"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "description": "User DELETE success"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "operationId": "UserController.deleteById"
      }
    },
    "/users": {
      "post": {
        "x-controller-name": "UserController",
        "x-operation-name": "create",
        "tags": [
          "UserController"
        ],
        "description": "Create User",
        "responses": {
          "200": {
            "description": "Successful execution",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewUser"
              }
            }
          }
        },
        "operationId": "UserController.create"
      },
      "get": {
        "x-controller-name": "UserController",
        "x-operation-name": "find",
        "tags": [
          "UserController"
        ],
        "responses": {
          "200": {
            "description": "Return value of UserController.find"
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User.Filter"
                }
              }
            }
          }
        ],
        "operationId": "UserController.find"
      }
    },
    "/webhooks": {
      "post": {
        "x-controller-name": "WebhookController",
        "x-operation-name": "create",
        "tags": [
          "WebhookController"
        ],
        "responses": {
          "200": {
            "description": "Webhook model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookDTO"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewWebhook"
              }
            }
          }
        },
        "operationId": "WebhookController.create"
      },
      "get": {
        "x-controller-name": "WebhookController",
        "x-operation-name": "find",
        "tags": [
          "WebhookController"
        ],
        "responses": {
          "200": {
            "description": "Array of Webhook model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WebhookWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook.Filter"
                }
              }
            }
          }
        ],
        "operationId": "WebhookController.find"
      }
    },
    "/whoami": {
      "get": {
        "x-controller-name": "AuthController",
        "x-operation-name": "whoami",
        "tags": [
          "AuthController"
        ],
        "responses": {
          "200": {
            "description": "Return value of AuthController.whoami"
          }
        },
        "operationId": "AuthController.whoami"
      }
    },
    "/{accountId}/contacts/{id}": {
      "put": {
        "x-controller-name": "ContactController",
        "x-operation-name": "replaceById",
        "tags": [
          "ContactController"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Contact PUT success"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Contact"
              }
            }
          },
          "x-parameter-index": 2
        },
        "operationId": "ContactController.replaceById"
      }
    },
    "/{accountId}/contacts": {
      "post": {
        "x-controller-name": "ContactController",
        "x-operation-name": "create",
        "tags": [
          "ContactController"
        ],
        "responses": {
          "200": {
            "description": "Contact model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contact"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewContact"
              }
            }
          }
        },
        "operationId": "ContactController.create"
      },
      "patch": {
        "x-controller-name": "ContactController",
        "x-operation-name": "updateAll",
        "tags": [
          "ContactController"
        ],
        "responses": {
          "200": {
            "description": "Contact PATCH success count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/loopback.Count"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "where",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Contact.WhereFilter",
                  "additionalProperties": true,
                  "x-typescript-type": "@loopback/repository#Where<Contact>"
                }
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactPartial"
              }
            }
          }
        },
        "operationId": "ContactController.updateAll"
      },
      "get": {
        "x-controller-name": "ContactController",
        "x-operation-name": "find",
        "tags": [
          "ContactController"
        ],
        "responses": {
          "200": {
            "description": "Array of Contact model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contact.Filter"
                }
              }
            }
          }
        ],
        "operationId": "ContactController.find"
      }
    },
    "/{accountId}/invoices/generate": {
      "get": {
        "x-controller-name": "InvoiceController",
        "x-operation-name": "generate",
        "tags": [
          "InvoiceController"
        ],
        "responses": {
          "200": {
            "description": "Array of Invoice model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvoiceWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "operationId": "InvoiceController.generate"
      }
    },
    "/{accountId}/payment-methods": {
      "get": {
        "x-controller-name": "PaymentMethodController",
        "x-operation-name": "find",
        "tags": [
          "PaymentMethodController"
        ],
        "responses": {
          "200": {
            "description": "Array of PaymentMethod model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentMethodWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethod.Filter"
                }
              }
            }
          }
        ],
        "operationId": "PaymentMethodController.find"
      }
    },
    "/{productId}/rate-plans/{id}": {
      "put": {
        "x-controller-name": "RatePlanController",
        "x-operation-name": "replaceById",
        "tags": [
          "RatePlanController"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "description": "RatePlan PUT success"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewRatePlan"
              }
            }
          },
          "x-parameter-index": 2
        },
        "operationId": "RatePlanController.replaceById"
      }
    },
    "/{productId}/rate-plans": {
      "get": {
        "x-controller-name": "RatePlanController",
        "x-operation-name": "findByProductId",
        "tags": [
          "RatePlanController"
        ],
        "responses": {
          "200": {
            "description": "Array of RatePlan model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RatePlanWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RatePlan.Filter"
                }
              }
            }
          }
        ],
        "operationId": "RatePlanController.findByProductId"
      }
    },
    "/{accountId}/subscriptions": {
      "post": {
        "x-controller-name": "SubscriptionController",
        "x-operation-name": "create",
        "tags": [
          "SubscriptionController"
        ],
        "responses": {
          "200": {
            "description": "Product model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewSubscription"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "SubscriptionController.create"
      }
    }
  },
  "components": {
    "securitySchemes": {
      "jwt": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "CommunicationProfile": {
        "title": "CommunicationProfile",
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "postalcode": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Account": {
        "title": "Account",
        "type": "object",
        "properties": {
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "accountId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "communicationProfile": {
            "$ref": "#/components/schemas/CommunicationProfile"
          },
          "orgName": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "accountType": {
            "type": "string",
            "enum": [
              "Organisation",
              "Individual"
            ]
          },
          "parentAccountId": {
            "type": "string",
            "format": "uuid"
          },
          "autoPay": {
            "type": "boolean"
          },
          "currency": {
            "type": "string",
            "enum": [
              "INR",
              "USD",
              "CAD",
              "GBP"
            ]
          },
          "balance": {
            "type": "number"
          },
          "mrr": {
            "type": "number"
          },
          "netTermDays": {
            "type": "number"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "enum": [
              "Draft",
              "In Trial",
              "Active",
              "Inactive",
              "Dormant"
            ]
          }
        },
        "required": [
          "tenantId",
          "accountId",
          "accountType"
        ],
        "additionalProperties": false
      },
      "CommunicationProfileExcluding_accountId-tenantId_": {
        "title": "CommunicationProfileExcluding_accountId-tenantId_",
        "type": "object",
        "description": "(tsType: Omit<CommunicationProfile, 'accountId' | 'tenantId'>, schemaOptions: { exclude: [ 'accountId', 'tenantId' ] })",
        "properties": {
          "address": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "postalcode": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "Omit<CommunicationProfile, 'accountId' | 'tenantId'>"
      },
      "ContactPersonExcluding_accountId-tenantId_": {
        "title": "ContactPersonExcluding_accountId-tenantId_",
        "type": "object",
        "description": "Only available for Organization. This contact is considered as sold-to contact. Product and services are sold to this contact. This contact acts as main point of contact from the organisation. (tsType: Omit<ContactPerson, 'accountId' | 'tenantId'>, schemaOptions: { exclude: [ 'accountId', 'tenantId' ] })",
        "properties": {
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ContactExcluding_accountId-tenantId_": {
        "title": "ContactExcluding_accountId-tenantId_",
        "type": "object",
        "description": "(tsType: Omit<Contact, 'accountId' | 'tenantId'>, schemaOptions: { exclude: [ 'accountId', 'tenantId' ] })",
        "properties": {
          "contactId": {
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "type": "string",
            "enum": [
              "Bill To",
              "Sold To",
              "Others",
              "Bill & Sold To"
            ]
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "postalcode": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "Active",
              "Inactive"
            ]
          }
        },
        "required": [
          "type",
          "firstName",
          "lastName",
          "phone",
          "email",
          "status"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Omit<Contact, 'accountId' | 'tenantId'>"
      },
      "NewAccountInfo": {
        "title": "NewAccountInfo",
        "type": "object",
        "description": "(tsType: Omit<AccountInfo, 'accountId' | 'tenantId'>, schemaOptions: { title: 'NewAccountInfo', exclude: [ 'accountId', 'tenantId' ] })",
        "properties": {
          "name": {
            "type": "string",
            "description": "Optional <br>Name of the account. It will be organization name if accountType is \"Organisation\" and concatenation of first name and last name if accountType is \"Individual\""
          },
          "communicationProfile": {
            "$ref": "#/components/schemas/CommunicationProfileExcluding_accountId-tenantId_"
          },
          "contactPerson": {
            "$ref": "#/components/schemas/ContactPersonExcluding_accountId-tenantId_"
          },
          "orgName": {
            "type": "string",
            "description": "Mandatory if accountType is Organization. As its name suggests, it is name of the organisation."
          },
          "firstName": {
            "type": "string",
            "description": "Mandatory if accountType is Individual. First name of the customer"
          },
          "lastName": {
            "type": "string",
            "description": "Optional <br> Lirst name of the customer"
          },
          "accountType": {
            "type": "string",
            "description": "Represents the type of customer.",
            "enum": [
              "Organisation",
              "Individual"
            ]
          },
          "parentAccountId": {
            "type": "string",
            "description": "Optional <br>In an account hierarchy, the parent account ID refers to the unique identifier of the account that is considered the parent or superior account in the hierarchy. It represents the relationship between different accounts within a hierarchical structure.",
            "format": "uuid"
          },
          "autoPay": {
            "type": "boolean",
            "description": "Optional <br>Auto Pay refers to the automatic collection of payment for a subscription or service.<br>Default value: false"
          },
          "currency": {
            "type": "string",
            "description": "Preferred currency customer would like to deal in. <br>Not mandatory to create a customer but it should be updated before subscription to any service.",
            "enum": [
              "INR",
              "USD",
              "CAD",
              "GBP"
            ]
          },
          "balance": {
            "type": "number",
            "description": "Balance of the account"
          },
          "mrr": {
            "type": "number"
          },
          "netTermDays": {
            "type": "number",
            "description": "Optional <br>Net term days, also known as payment terms or credit terms, refer to the number of days a buyer has to pay an invoice or outstanding balance to a seller or vendor. It specifies the timeframe within which payment is expected to be made after the delivery of goods or completion of services."
          },
          "createdOn": {
            "type": "string",
            "description": "Timestamp when customer is created. No need to mention as system automatically capture this.",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "description": "Represents current status of customer.",
            "enum": [
              "Draft",
              "In Trial",
              "Active",
              "Inactive",
              "Dormant"
            ]
          },
          "billToContact": {
            "$ref": "#/components/schemas/ContactExcluding_accountId-tenantId_"
          }
        },
        "required": [
          "communicationProfile",
          "accountType"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Omit<AccountInfo, 'accountId' | 'tenantId'>"
      },
      "ContactPerson": {
        "title": "ContactPerson",
        "type": "object",
        "description": "Only available for Organization. This contact is considered as sold-to contact. Product and services are sold to this contact. This contact acts as main point of contact from the organisation.",
        "properties": {
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Contact": {
        "title": "Contact",
        "type": "object",
        "properties": {
          "contactId": {
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "type": "string",
            "enum": [
              "Bill To",
              "Sold To",
              "Others",
              "Bill & Sold To"
            ]
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "accountId": {
            "type": "string",
            "format": "uuid"
          },
          "address": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "postalcode": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "type": "string",
            "enum": [
              "Active",
              "Inactive"
            ]
          }
        },
        "required": [
          "type",
          "firstName",
          "lastName",
          "accountId",
          "phone",
          "email",
          "tenantId",
          "status"
        ],
        "additionalProperties": false
      },
      "AccountInfo": {
        "title": "AccountInfo",
        "type": "object",
        "properties": {
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "accountId": {
            "type": "string",
            "description": "Unique Identifier of customer",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Optional <br>Name of the account. It will be organization name if accountType is \"Organisation\" and concatenation of first name and last name if accountType is \"Individual\""
          },
          "communicationProfile": {
            "$ref": "#/components/schemas/CommunicationProfile"
          },
          "contactPerson": {
            "$ref": "#/components/schemas/ContactPerson"
          },
          "orgName": {
            "type": "string",
            "description": "Mandatory if accountType is Organization. As its name suggests, it is name of the organisation."
          },
          "firstName": {
            "type": "string",
            "description": "Mandatory if accountType is Individual. First name of the customer"
          },
          "lastName": {
            "type": "string",
            "description": "Optional <br> Lirst name of the customer"
          },
          "accountType": {
            "type": "string",
            "description": "Represents the type of customer.",
            "enum": [
              "Organisation",
              "Individual"
            ]
          },
          "parentAccountId": {
            "type": "string",
            "description": "Optional <br>In an account hierarchy, the parent account ID refers to the unique identifier of the account that is considered the parent or superior account in the hierarchy. It represents the relationship between different accounts within a hierarchical structure.",
            "format": "uuid"
          },
          "autoPay": {
            "type": "boolean",
            "description": "Optional <br>Auto Pay refers to the automatic collection of payment for a subscription or service.<br>Default value: false"
          },
          "currency": {
            "type": "string",
            "description": "Preferred currency customer would like to deal in. <br>Not mandatory to create a customer but it should be updated before subscription to any service.",
            "enum": [
              "INR",
              "USD",
              "CAD",
              "GBP"
            ]
          },
          "balance": {
            "type": "number",
            "description": "Balance of the account"
          },
          "mrr": {
            "type": "number"
          },
          "netTermDays": {
            "type": "number",
            "description": "Optional <br>Net term days, also known as payment terms or credit terms, refer to the number of days a buyer has to pay an invoice or outstanding balance to a seller or vendor. It specifies the timeframe within which payment is expected to be made after the delivery of goods or completion of services."
          },
          "createdOn": {
            "type": "string",
            "description": "Timestamp when customer is created. No need to mention as system automatically capture this.",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "description": "Represents current status of customer.",
            "enum": [
              "Draft",
              "In Trial",
              "Active",
              "Inactive",
              "Dormant"
            ]
          },
          "billToContact": {
            "$ref": "#/components/schemas/Contact"
          }
        },
        "required": [
          "tenantId",
          "accountId",
          "communicationProfile",
          "accountType"
        ],
        "additionalProperties": false
      },
      "CommunicationProfileWithRelations": {
        "title": "CommunicationProfileWithRelations",
        "type": "object",
        "description": "(tsType: CommunicationProfileWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "address": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "postalcode": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "CommunicationProfileWithRelations"
      },
      "AccountWithRelations": {
        "title": "AccountWithRelations",
        "type": "object",
        "description": "(tsType: AccountWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "accountId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "communicationProfile": {
            "$ref": "#/components/schemas/CommunicationProfileWithRelations"
          },
          "orgName": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "accountType": {
            "type": "string",
            "enum": [
              "Organisation",
              "Individual"
            ]
          },
          "parentAccountId": {
            "type": "string",
            "format": "uuid"
          },
          "autoPay": {
            "type": "boolean"
          },
          "currency": {
            "type": "string",
            "enum": [
              "INR",
              "USD",
              "CAD",
              "GBP"
            ]
          },
          "balance": {
            "type": "number"
          },
          "mrr": {
            "type": "number"
          },
          "netTermDays": {
            "type": "number"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "enum": [
              "Draft",
              "In Trial",
              "Active",
              "Inactive",
              "Dormant"
            ]
          }
        },
        "required": [
          "tenantId",
          "accountId",
          "accountType"
        ],
        "additionalProperties": false,
        "x-typescript-type": "AccountWithRelations"
      },
      "AccountPartial": {
        "title": "AccountPartial",
        "type": "object",
        "description": "(tsType: Partial<Account>, schemaOptions: { partial: true })",
        "properties": {
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "accountId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "communicationProfile": {
            "$ref": "#/components/schemas/CommunicationProfile"
          },
          "orgName": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "accountType": {
            "type": "string",
            "enum": [
              "Organisation",
              "Individual"
            ]
          },
          "parentAccountId": {
            "type": "string",
            "format": "uuid"
          },
          "autoPay": {
            "type": "boolean"
          },
          "currency": {
            "type": "string",
            "enum": [
              "INR",
              "USD",
              "CAD",
              "GBP"
            ]
          },
          "balance": {
            "type": "number"
          },
          "mrr": {
            "type": "number"
          },
          "netTermDays": {
            "type": "number"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "enum": [
              "Draft",
              "In Trial",
              "Active",
              "Inactive",
              "Dormant"
            ]
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "Partial<Account>"
      },
      "CreditCardWithRelations": {
        "title": "CreditCardWithRelations",
        "type": "object",
        "description": "(tsType: CreditCardWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "cardNumber": {
            "type": "string"
          },
          "expirationDate": {
            "type": "string"
          },
          "cardCode": {
            "type": "string"
          },
          "cardType": {
            "type": "string"
          }
        },
        "required": [
          "cardNumber",
          "expirationDate"
        ],
        "additionalProperties": false,
        "x-typescript-type": "CreditCardWithRelations"
      },
      "PaymentMethodWithRelations": {
        "title": "PaymentMethodWithRelations",
        "type": "object",
        "description": "(tsType: PaymentMethodWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "paymentMethodId": {
            "type": "string",
            "format": "uuid"
          },
          "accountId": {
            "type": "string"
          },
          "extCustomerProfileId": {
            "type": "string"
          },
          "extCustomerPaymentProfileId": {
            "type": "string"
          },
          "isDefault": {
            "type": "boolean"
          },
          "paymentMethodType": {
            "type": "string"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/CreditCardWithRelations"
          },
          "isAuthorised": {
            "type": "boolean"
          }
        },
        "required": [
          "accountId",
          "paymentMethodType"
        ],
        "additionalProperties": false,
        "x-typescript-type": "PaymentMethodWithRelations"
      },
      "ActionWithRelations": {
        "title": "ActionWithRelations",
        "type": "object",
        "description": "(tsType: ActionWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "module": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "route": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "notForTenant": {
            "type": "boolean"
          }
        },
        "required": [
          "module",
          "method",
          "route",
          "name"
        ],
        "additionalProperties": false,
        "x-typescript-type": "ActionWithRelations"
      },
      "ErrorMessage": {
        "title": "ErrorMessage",
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "statusCode",
          "message"
        ],
        "additionalProperties": false
      },
      "ErrorResponse": {
        "title": "ErrorResponse",
        "type": "object",
        "properties": {
          "error": {
            "$ref": "#/components/schemas/ErrorMessage"
          }
        },
        "required": [
          "error"
        ],
        "additionalProperties": false
      },
      "PermissionItem": {
        "title": "PermissionItem",
        "type": "object",
        "properties": {
          "actions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "resources": {
            "type": "object"
          }
        },
        "additionalProperties": false
      },
      "Permission": {
        "title": "Permission",
        "type": "object",
        "properties": {
          "deny": {
            "$ref": "#/components/schemas/PermissionItem"
          },
          "allow": {
            "$ref": "#/components/schemas/PermissionItem"
          }
        },
        "additionalProperties": false
      },
      "User": {
        "title": "User",
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "roleId": {
            "type": "string"
          },
          "role": {
            "type": "string"
          },
          "permission": {
            "$ref": "#/components/schemas/Permission"
          },
          "menu": {
            "type": "object"
          },
          "tenantId": {
            "type": "string"
          },
          "refreshToken": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        },
        "required": [
          "firstName",
          "email",
          "password",
          "roleId",
          "role",
          "permission",
          "status"
        ],
        "additionalProperties": false
      },
      "Credentials": {
        "title": "Credentials",
        "type": "object",
        "description": "(tsType: Credential, schemaOptions: { title: 'Credentials' })",
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        },
        "required": [
          "email",
          "password"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Credential"
      },
      "Credential": {
        "title": "Credential",
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        },
        "required": [
          "email",
          "password"
        ],
        "additionalProperties": false
      },
      "ForgetPassword": {
        "title": "ForgetPassword",
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          }
        },
        "required": [
          "email"
        ],
        "additionalProperties": false
      },
      "UomWithRelations": {
        "title": "UomWithRelations",
        "type": "object",
        "description": "(tsType: UomWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "uomId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "displayAs": {
            "type": "string"
          },
          "decimalPlaces": {
            "type": "number"
          },
          "status": {
            "type": "string",
            "enum": [
              "Active",
              "Inactive"
            ]
          },
          "roundingMode": {
            "type": "string",
            "enum": [
              "Up",
              "Down"
            ]
          },
          "tenantId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "name",
          "displayAs"
        ],
        "additionalProperties": false,
        "x-typescript-type": "UomWithRelations"
      },
      "BillingFrequencyWithRelations": {
        "title": "BillingFrequencyWithRelations",
        "type": "object",
        "description": "(tsType: BillingFrequencyWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "term": {
            "type": "number"
          },
          "period": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "BillingFrequencyWithRelations"
      },
      "ChargeWithRelations": {
        "title": "ChargeWithRelations",
        "type": "object",
        "description": "(tsType: ChargeWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "chargeId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "ratePlanId": {
            "type": "string",
            "format": "uuid"
          },
          "chargeModel": {
            "type": "string",
            "enum": [
              "Flat Fee Pricing",
              "Per Unit Pricing",
              "Overage Pricing",
              "Volume Pricing",
              "Tiered Pricing",
              "Tiered with Overage Pricing",
              "Discount-Fixed Amount",
              "Discount-Percentage"
            ]
          },
          "chargeType": {
            "type": "string",
            "enum": [
              "One-Time",
              "Recurring",
              "Usage"
            ]
          },
          "currency": {
            "type": "string",
            "enum": [
              "INR",
              "USD",
              "CAD",
              "GBP"
            ]
          },
          "price": {
            "type": "number"
          },
          "status": {
            "type": "string",
            "enum": [
              "Draft",
              "Active",
              "Pending",
              "Charged",
              "Paid",
              "Unpaid",
              "Partially-Paid"
            ]
          },
          "uom": {
            "$ref": "#/components/schemas/UomWithRelations"
          },
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "billingFrequency": {
            "$ref": "#/components/schemas/BillingFrequencyWithRelations"
          },
          "recurringPeriod": {
            "$ref": "#/components/schemas/BillingFrequencyWithRelations"
          },
          "originalChargeId": {
            "type": "string",
            "format": "uuid"
          },
          "chargeLinkType": {
            "type": "string",
            "enum": [
              "Organisation",
              "Rate Plan"
            ]
          },
          "subscriptionId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "name"
        ],
        "additionalProperties": false,
        "x-typescript-type": "ChargeWithRelations"
      },
      "Uom": {
        "title": "Uom",
        "type": "object",
        "properties": {
          "uomId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "displayAs": {
            "type": "string"
          },
          "decimalPlaces": {
            "type": "number"
          },
          "status": {
            "type": "string",
            "enum": [
              "Active",
              "Inactive"
            ]
          },
          "roundingMode": {
            "type": "string",
            "enum": [
              "Up",
              "Down"
            ]
          },
          "tenantId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "name",
          "displayAs"
        ],
        "additionalProperties": false
      },
      "BillingFrequency": {
        "title": "BillingFrequency",
        "type": "object",
        "properties": {
          "term": {
            "type": "number"
          },
          "period": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Charge": {
        "title": "Charge",
        "type": "object",
        "properties": {
          "chargeId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "ratePlanId": {
            "type": "string",
            "format": "uuid"
          },
          "chargeModel": {
            "type": "string",
            "enum": [
              "Flat Fee Pricing",
              "Per Unit Pricing",
              "Overage Pricing",
              "Volume Pricing",
              "Tiered Pricing",
              "Tiered with Overage Pricing",
              "Discount-Fixed Amount",
              "Discount-Percentage"
            ]
          },
          "chargeType": {
            "type": "string",
            "enum": [
              "One-Time",
              "Recurring",
              "Usage"
            ]
          },
          "currency": {
            "type": "string",
            "enum": [
              "INR",
              "USD",
              "CAD",
              "GBP"
            ]
          },
          "price": {
            "type": "number"
          },
          "status": {
            "type": "string",
            "enum": [
              "Draft",
              "Active",
              "Pending",
              "Charged",
              "Paid",
              "Unpaid",
              "Partially-Paid"
            ]
          },
          "uom": {
            "$ref": "#/components/schemas/Uom"
          },
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "billingFrequency": {
            "$ref": "#/components/schemas/BillingFrequency"
          },
          "recurringPeriod": {
            "$ref": "#/components/schemas/BillingFrequency"
          },
          "originalChargeId": {
            "type": "string",
            "format": "uuid"
          },
          "chargeLinkType": {
            "type": "string",
            "enum": [
              "Organisation",
              "Rate Plan"
            ]
          },
          "subscriptionId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "name"
        ],
        "additionalProperties": false
      },
      "UomExcluding_chargeId-status-tenantId_": {
        "title": "UomExcluding_chargeId-status-tenantId_",
        "type": "object",
        "description": "(tsType: Omit<Uom, 'chargeId' | 'status' | 'tenantId'>, schemaOptions: { exclude: [ 'chargeId', 'status', 'tenantId' ] })",
        "properties": {
          "uomId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "displayAs": {
            "type": "string"
          },
          "decimalPlaces": {
            "type": "number"
          },
          "roundingMode": {
            "type": "string",
            "enum": [
              "Up",
              "Down"
            ]
          }
        },
        "required": [
          "name",
          "displayAs"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Omit<Uom, 'chargeId' | 'status' | 'tenantId'>"
      },
      "BillingFrequencyExcluding_chargeId-status-tenantId_": {
        "title": "BillingFrequencyExcluding_chargeId-status-tenantId_",
        "type": "object",
        "description": "(tsType: Omit<BillingFrequency, 'chargeId' | 'status' | 'tenantId'>, schemaOptions: { exclude: [ 'chargeId', 'status', 'tenantId' ] })",
        "properties": {
          "term": {
            "type": "number"
          },
          "period": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "Omit<BillingFrequency, 'chargeId' | 'status' | 'tenantId'>"
      },
      "NewCharge": {
        "title": "NewCharge",
        "type": "object",
        "description": "(tsType: Omit<Charge, 'chargeId' | 'status' | 'tenantId'>, schemaOptions: { title: 'NewCharge', exclude: [ 'chargeId', 'status', 'tenantId' ] })",
        "properties": {
          "name": {
            "type": "string"
          },
          "ratePlanId": {
            "type": "string",
            "format": "uuid"
          },
          "chargeModel": {
            "type": "string",
            "enum": [
              "Flat Fee Pricing",
              "Per Unit Pricing",
              "Overage Pricing",
              "Volume Pricing",
              "Tiered Pricing",
              "Tiered with Overage Pricing",
              "Discount-Fixed Amount",
              "Discount-Percentage"
            ]
          },
          "chargeType": {
            "type": "string",
            "enum": [
              "One-Time",
              "Recurring",
              "Usage"
            ]
          },
          "currency": {
            "type": "string",
            "enum": [
              "INR",
              "USD",
              "CAD",
              "GBP"
            ]
          },
          "price": {
            "type": "number"
          },
          "uom": {
            "$ref": "#/components/schemas/UomExcluding_chargeId-status-tenantId_"
          },
          "billingFrequency": {
            "$ref": "#/components/schemas/BillingFrequencyExcluding_chargeId-status-tenantId_"
          },
          "recurringPeriod": {
            "$ref": "#/components/schemas/BillingFrequencyExcluding_chargeId-status-tenantId_"
          },
          "originalChargeId": {
            "type": "string",
            "format": "uuid"
          },
          "chargeLinkType": {
            "type": "string",
            "enum": [
              "Organisation",
              "Rate Plan"
            ]
          },
          "subscriptionId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "name"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Omit<Charge, 'chargeId' | 'status' | 'tenantId'>"
      },
      "SMTPTLSWithRelations": {
        "title": "SMTPTLSWithRelations",
        "type": "object",
        "description": "(tsType: SMTPTLSWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "rejectUnauthorized": {
            "type": "boolean"
          }
        },
        "required": [
          "rejectUnauthorized"
        ],
        "additionalProperties": false,
        "x-typescript-type": "SMTPTLSWithRelations"
      },
      "SMTPAuthWithRelations": {
        "title": "SMTPAuthWithRelations",
        "type": "object",
        "description": "(tsType: SMTPAuthWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "user": {
            "type": "string"
          },
          "pass": {
            "type": "string"
          }
        },
        "required": [
          "user",
          "pass"
        ],
        "additionalProperties": false,
        "x-typescript-type": "SMTPAuthWithRelations"
      },
      "SmtpServerWithRelations": {
        "title": "SmtpServerWithRelations",
        "type": "object",
        "description": "(tsType: SmtpServerWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "tenantId": {
            "type": "string"
          },
          "host": {
            "type": "string"
          },
          "port": {
            "type": "number"
          },
          "secure": {
            "type": "boolean"
          },
          "tls": {
            "$ref": "#/components/schemas/SMTPTLSWithRelations"
          },
          "auth": {
            "$ref": "#/components/schemas/SMTPAuthWithRelations"
          },
          "user": {
            "type": "string"
          }
        },
        "required": [
          "tenantId",
          "host",
          "port",
          "secure",
          "user"
        ],
        "additionalProperties": false,
        "x-typescript-type": "SmtpServerWithRelations"
      },
      "NewContact": {
        "title": "NewContact",
        "type": "object",
        "description": "(tsType: Omit<Contact, 'contactId' | 'accountId' | 'status' | 'tenantId'>, schemaOptions: { title: 'NewContact', exclude: [ 'contactId', 'accountId', 'status', 'tenantId' ] })",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "Bill To",
              "Sold To",
              "Others",
              "Bill & Sold To"
            ]
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "postalcode": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "firstName",
          "lastName",
          "phone",
          "email"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Omit<Contact, 'contactId' | 'accountId' | 'status' | 'tenantId'>"
      },
      "ContactPartial": {
        "title": "ContactPartial",
        "type": "object",
        "description": "(tsType: Partial<Contact>, schemaOptions: { partial: true })",
        "properties": {
          "contactId": {
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "type": "string",
            "enum": [
              "Bill To",
              "Sold To",
              "Others",
              "Bill & Sold To"
            ]
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "accountId": {
            "type": "string",
            "format": "uuid"
          },
          "address": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "postalcode": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "type": "string",
            "enum": [
              "Active",
              "Inactive"
            ]
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "Partial<Contact>"
      },
      "ContactWithRelations": {
        "title": "ContactWithRelations",
        "type": "object",
        "description": "(tsType: ContactWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "contactId": {
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "type": "string",
            "enum": [
              "Bill To",
              "Sold To",
              "Others",
              "Bill & Sold To"
            ]
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "accountId": {
            "type": "string",
            "format": "uuid"
          },
          "address": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "postalcode": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "type": "string",
            "enum": [
              "Active",
              "Inactive"
            ]
          }
        },
        "required": [
          "type",
          "firstName",
          "lastName",
          "accountId",
          "phone",
          "email",
          "tenantId",
          "status"
        ],
        "additionalProperties": false,
        "x-typescript-type": "ContactWithRelations"
      },
      "Feature": {
        "title": "Feature",
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "Active",
              "Inactive"
            ]
          },
          "tenantId": {
            "type": "string"
          },
          "featureCode": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "tenantId",
          "featureCode"
        ],
        "additionalProperties": false
      },
      "NewFeature": {
        "title": "NewFeature",
        "type": "object",
        "description": "(tsType: Omit<Feature, 'featureId' | 'tenantId' | 'status'>, schemaOptions: { title: 'NewFeature', exclude: [ 'featureId', 'tenantId', 'status' ] })",
        "properties": {
          "name": {
            "type": "string"
          },
          "featureCode": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "featureCode"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Omit<Feature, 'featureId' | 'tenantId' | 'status'>"
      },
      "FeatureWithRelations": {
        "title": "FeatureWithRelations",
        "type": "object",
        "description": "(tsType: FeatureWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "Active",
              "Inactive"
            ]
          },
          "tenantId": {
            "type": "string"
          },
          "featureCode": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "tenantId",
          "featureCode"
        ],
        "additionalProperties": false,
        "x-typescript-type": "FeatureWithRelations"
      },
      "FeaturePartial": {
        "title": "FeaturePartial",
        "type": "object",
        "description": "(tsType: Partial<Feature>, schemaOptions: { partial: true })",
        "properties": {
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "Active",
              "Inactive"
            ]
          },
          "tenantId": {
            "type": "string"
          },
          "featureCode": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "Partial<Feature>"
      },
      "GroupRole": {
        "title": "GroupRole",
        "type": "object",
        "properties": {
          "roleId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "GroupScope": {
        "title": "GroupScope",
        "type": "object",
        "properties": {
          "entity": {
            "type": "string"
          },
          "values": {
            "type": "string"
          }
        },
        "required": [
          "entity",
          "values"
        ],
        "additionalProperties": false
      },
      "UserEmail": {
        "title": "UserEmail",
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          }
        },
        "required": [
          "email"
        ],
        "additionalProperties": false
      },
      "Group": {
        "title": "Group",
        "type": "object",
        "properties": {
          "groupId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupRole"
            }
          },
          "scope": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupScope"
            }
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserEmail"
            }
          },
          "tenantId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "name",
          "tenantId"
        ],
        "additionalProperties": false
      },
      "GroupRoleExcluding_groupId-tenantId_": {
        "title": "GroupRoleExcluding_groupId-tenantId_",
        "type": "object",
        "description": "(tsType: Omit<GroupRole, 'groupId' | 'tenantId'>, schemaOptions: { exclude: [ 'groupId', 'tenantId' ] })",
        "properties": {
          "roleId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "Omit<GroupRole, 'groupId' | 'tenantId'>"
      },
      "GroupScopeExcluding_groupId-tenantId_": {
        "title": "GroupScopeExcluding_groupId-tenantId_",
        "type": "object",
        "description": "(tsType: Omit<GroupScope, 'groupId' | 'tenantId'>, schemaOptions: { exclude: [ 'groupId', 'tenantId' ] })",
        "properties": {
          "entity": {
            "type": "string"
          },
          "values": {
            "type": "string"
          }
        },
        "required": [
          "entity",
          "values"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Omit<GroupScope, 'groupId' | 'tenantId'>"
      },
      "UserEmailExcluding_groupId-tenantId_": {
        "title": "UserEmailExcluding_groupId-tenantId_",
        "type": "object",
        "description": "(tsType: Omit<UserEmail, 'groupId' | 'tenantId'>, schemaOptions: { exclude: [ 'groupId', 'tenantId' ] })",
        "properties": {
          "email": {
            "type": "string"
          }
        },
        "required": [
          "email"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Omit<UserEmail, 'groupId' | 'tenantId'>"
      },
      "NewGroup": {
        "title": "NewGroup",
        "type": "object",
        "description": "(tsType: Omit<Group, 'groupId' | 'tenantId'>, schemaOptions: { title: 'NewGroup', exclude: [ 'groupId', 'tenantId' ] })",
        "properties": {
          "name": {
            "type": "string"
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupRoleExcluding_groupId-tenantId_"
            }
          },
          "scope": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupScopeExcluding_groupId-tenantId_"
            }
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserEmailExcluding_groupId-tenantId_"
            }
          }
        },
        "required": [
          "name"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Omit<Group, 'groupId' | 'tenantId'>"
      },
      "GroupRoleWithRelations": {
        "title": "GroupRoleWithRelations",
        "type": "object",
        "description": "(tsType: GroupRoleWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "roleId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "GroupRoleWithRelations"
      },
      "GroupScopeWithRelations": {
        "title": "GroupScopeWithRelations",
        "type": "object",
        "description": "(tsType: GroupScopeWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "entity": {
            "type": "string"
          },
          "values": {
            "type": "string"
          }
        },
        "required": [
          "entity",
          "values"
        ],
        "additionalProperties": false,
        "x-typescript-type": "GroupScopeWithRelations"
      },
      "UserEmailWithRelations": {
        "title": "UserEmailWithRelations",
        "type": "object",
        "description": "(tsType: UserEmailWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "email": {
            "type": "string"
          }
        },
        "required": [
          "email"
        ],
        "additionalProperties": false,
        "x-typescript-type": "UserEmailWithRelations"
      },
      "GroupWithRelations": {
        "title": "GroupWithRelations",
        "type": "object",
        "description": "(tsType: GroupWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "groupId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupRoleWithRelations"
            }
          },
          "scope": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupScopeWithRelations"
            }
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserEmailWithRelations"
            }
          },
          "tenantId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "name",
          "tenantId"
        ],
        "additionalProperties": false,
        "x-typescript-type": "GroupWithRelations"
      },
      "InvoiceWithRelations": {
        "title": "InvoiceWithRelations",
        "type": "object",
        "description": "(tsType: InvoiceWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "invoiceId": {
            "type": "string",
            "format": "uuid"
          },
          "invoiceDate": {
            "type": "string",
            "format": "date"
          },
          "dueDate": {
            "type": "string",
            "format": "date"
          },
          "accountId": {
            "type": "string",
            "format": "uuid"
          },
          "accountName": {
            "type": "string"
          },
          "totalAmount": {
            "type": "number"
          },
          "taxAmount": {
            "type": "number"
          },
          "discountAmount": {
            "type": "number"
          },
          "invoiceAmount": {
            "type": "number"
          },
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "type": "string",
            "enum": [
              "Created",
              "PDF-Generated",
              "Sent",
              "Paid",
              "Partially-Paid",
              "Pending",
              "Pending-Partially-Paid",
              "Delayed-Partially-Paid",
              "Delayed-Paid"
            ]
          },
          "path": {
            "type": "string"
          },
          "paymentLink": {
            "type": "string"
          },
          "linkedInvoiceId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "invoiceDate",
          "dueDate",
          "accountId",
          "tenantId",
          "status"
        ],
        "additionalProperties": false,
        "x-typescript-type": "InvoiceWithRelations"
      },
      "InvoiceItemWithRelations": {
        "title": "InvoiceItemWithRelations",
        "type": "object",
        "description": "(tsType: InvoiceItemWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "invoiceItemId": {
            "type": "string",
            "format": "uuid"
          },
          "invoiceId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          },
          "quantity": {
            "type": "number"
          },
          "unitPrice": {
            "type": "number"
          },
          "tenantId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "invoiceId",
          "name",
          "amount",
          "quantity",
          "unitPrice",
          "tenantId"
        ],
        "additionalProperties": false,
        "x-typescript-type": "InvoiceItemWithRelations"
      },
      "Menu": {
        "title": "Menu",
        "type": "object",
        "properties": {
          "label": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          },
          "routeTo": {
            "type": "string"
          },
          "level": {
            "type": "number"
          },
          "sequence": {
            "type": "number"
          },
          "upLabel": {
            "type": "string"
          },
          "status": {
            "type": "number"
          }
        },
        "required": [
          "label",
          "level",
          "sequence",
          "status"
        ],
        "additionalProperties": false
      },
      "NewMenu": {
        "title": "NewMenu",
        "type": "object",
        "description": "(tsType: Menu, schemaOptions: { title: 'NewMenu' })",
        "properties": {
          "label": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          },
          "routeTo": {
            "type": "string"
          },
          "level": {
            "type": "number"
          },
          "sequence": {
            "type": "number"
          },
          "upLabel": {
            "type": "string"
          },
          "status": {
            "type": "number"
          }
        },
        "required": [
          "label",
          "level",
          "sequence",
          "status"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Menu"
      },
      "MenuWithRelations": {
        "title": "MenuWithRelations",
        "type": "object",
        "description": "(tsType: MenuWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "label": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          },
          "routeTo": {
            "type": "string"
          },
          "level": {
            "type": "number"
          },
          "sequence": {
            "type": "number"
          },
          "upLabel": {
            "type": "string"
          },
          "status": {
            "type": "number"
          }
        },
        "required": [
          "label",
          "level",
          "sequence",
          "status"
        ],
        "additionalProperties": false,
        "x-typescript-type": "MenuWithRelations"
      },
      "ReceiverWithRelations": {
        "title": "ReceiverWithRelations",
        "type": "object",
        "description": "(tsType: ReceiverWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "to": {
            "type": "string"
          },
          "cc": {
            "type": "string"
          },
          "bcc": {
            "type": "string"
          }
        },
        "required": [
          "to"
        ],
        "additionalProperties": false,
        "x-typescript-type": "ReceiverWithRelations"
      },
      "AttachmentWithRelations": {
        "title": "AttachmentWithRelations",
        "type": "object",
        "description": "(tsType: AttachmentWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "attachmentType": {
            "type": "string",
            "enum": [
              "URL",
              "String",
              "Encoded-string"
            ]
          },
          "filename": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "encoding": {
            "type": "string"
          }
        },
        "required": [
          "attachmentType",
          "filename"
        ],
        "additionalProperties": false,
        "x-typescript-type": "AttachmentWithRelations"
      },
      "NotificationWithRelations": {
        "title": "NotificationWithRelations",
        "type": "object",
        "description": "(tsType: NotificationWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "notificationId": {
            "type": "string"
          },
          "sender": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          },
          "body": {
            "type": "string"
          },
          "receiver": {
            "$ref": "#/components/schemas/ReceiverWithRelations"
          },
          "type": {
            "type": "string",
            "enum": [
              "Push",
              "Email",
              "SMS",
              "Doc"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "waiting replacements",
              "merged",
              "sent",
              "failed"
            ]
          },
          "tenantId": {
            "type": "string"
          },
          "sentTs": {
            "type": "string",
            "format": "date-time"
          },
          "plannedDate": {
            "type": "string",
            "format": "date"
          },
          "name": {
            "type": "string"
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentWithRelations"
            }
          }
        },
        "required": [
          "sender",
          "receiver",
          "type",
          "tenantId"
        ],
        "additionalProperties": false,
        "x-typescript-type": "NotificationWithRelations"
      },
      "Payment": {
        "title": "Payment",
        "type": "object",
        "properties": {
          "paymentId": {
            "type": "string",
            "format": "uuid"
          },
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "accountId": {
            "type": "string",
            "format": "uuid"
          },
          "requestedAmount": {
            "type": "number"
          },
          "amountPaid": {
            "type": "number"
          },
          "currency": {
            "type": "string",
            "enum": [
              "INR",
              "USD",
              "CAD",
              "GBP"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "Requested",
              "Paid",
              "Expired",
              "Partially-Paid"
            ]
          },
          "acceptPartial": {
            "type": "boolean"
          },
          "expireBy": {
            "type": "number"
          },
          "description": {
            "type": "string"
          },
          "customer": {
            "type": "object"
          },
          "paymentLink": {
            "type": "string"
          },
          "paymentLinkId": {
            "type": "string"
          },
          "referenceId": {
            "type": "string"
          },
          "updateTs": {
            "type": "string",
            "format": "date-time"
          },
          "transactionId": {
            "type": "string"
          },
          "paymentMethod": {
            "type": "string",
            "enum": [
              "ACH",
              "Bank Transfer",
              "Cash",
              "CC Reference Transaction",
              "Cheque",
              "Credit Card",
              "Debit Card",
              "Wire Transfer"
            ]
          },
          "paymentDetails": {
            "type": "object"
          },
          "paymentDate": {
            "type": "string",
            "format": "date"
          }
        },
        "required": [
          "amountPaid",
          "currency",
          "status"
        ],
        "additionalProperties": false
      },
      "NewPayment": {
        "title": "NewPayment",
        "type": "object",
        "description": "(tsType: Omit<Payment, 'paymentId' | 'tenantId'>, schemaOptions: { title: 'NewPayment', exclude: [ 'paymentId', 'tenantId' ] })",
        "properties": {
          "accountId": {
            "type": "string",
            "format": "uuid"
          },
          "requestedAmount": {
            "type": "number"
          },
          "amountPaid": {
            "type": "number"
          },
          "currency": {
            "type": "string",
            "enum": [
              "INR",
              "USD",
              "CAD",
              "GBP"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "Requested",
              "Paid",
              "Expired",
              "Partially-Paid"
            ]
          },
          "acceptPartial": {
            "type": "boolean"
          },
          "expireBy": {
            "type": "number"
          },
          "description": {
            "type": "string"
          },
          "customer": {
            "type": "object"
          },
          "paymentLink": {
            "type": "string"
          },
          "paymentLinkId": {
            "type": "string"
          },
          "referenceId": {
            "type": "string"
          },
          "updateTs": {
            "type": "string",
            "format": "date-time"
          },
          "transactionId": {
            "type": "string"
          },
          "paymentMethod": {
            "type": "string",
            "enum": [
              "ACH",
              "Bank Transfer",
              "Cash",
              "CC Reference Transaction",
              "Cheque",
              "Credit Card",
              "Debit Card",
              "Wire Transfer"
            ]
          },
          "paymentDetails": {
            "type": "object"
          },
          "paymentDate": {
            "type": "string",
            "format": "date"
          }
        },
        "required": [
          "amountPaid",
          "currency",
          "status"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Omit<Payment, 'paymentId' | 'tenantId'>"
      },
      "PaymentWithRelations": {
        "title": "PaymentWithRelations",
        "type": "object",
        "description": "(tsType: PaymentWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "paymentId": {
            "type": "string",
            "format": "uuid"
          },
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "accountId": {
            "type": "string",
            "format": "uuid"
          },
          "requestedAmount": {
            "type": "number"
          },
          "amountPaid": {
            "type": "number"
          },
          "currency": {
            "type": "string",
            "enum": [
              "INR",
              "USD",
              "CAD",
              "GBP"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "Requested",
              "Paid",
              "Expired",
              "Partially-Paid"
            ]
          },
          "acceptPartial": {
            "type": "boolean"
          },
          "expireBy": {
            "type": "number"
          },
          "description": {
            "type": "string"
          },
          "customer": {
            "type": "object"
          },
          "paymentLink": {
            "type": "string"
          },
          "paymentLinkId": {
            "type": "string"
          },
          "referenceId": {
            "type": "string"
          },
          "updateTs": {
            "type": "string",
            "format": "date-time"
          },
          "transactionId": {
            "type": "string"
          },
          "paymentMethod": {
            "type": "string",
            "enum": [
              "ACH",
              "Bank Transfer",
              "Cash",
              "CC Reference Transaction",
              "Cheque",
              "Credit Card",
              "Debit Card",
              "Wire Transfer"
            ]
          },
          "paymentDetails": {
            "type": "object"
          },
          "paymentDate": {
            "type": "string",
            "format": "date"
          }
        },
        "required": [
          "amountPaid",
          "currency",
          "status"
        ],
        "additionalProperties": false,
        "x-typescript-type": "PaymentWithRelations"
      },
      "PermissionItemWithRelations": {
        "title": "PermissionItemWithRelations",
        "type": "object",
        "description": "(tsType: PermissionItemWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "actions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "resources": {
            "type": "object"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "PermissionItemWithRelations"
      },
      "PermissionWithRelations": {
        "title": "PermissionWithRelations",
        "type": "object",
        "description": "(tsType: PermissionWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "deny": {
            "$ref": "#/components/schemas/PermissionItemWithRelations"
          },
          "allow": {
            "$ref": "#/components/schemas/PermissionItemWithRelations"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "PermissionWithRelations"
      },
      "PolicyWithRelations": {
        "title": "PolicyWithRelations",
        "type": "object",
        "description": "(tsType: PolicyWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "name": {
            "type": "string"
          },
          "tenantId": {
            "type": "string"
          },
          "permission": {
            "$ref": "#/components/schemas/PermissionWithRelations"
          },
          "menu": {
            "type": "object"
          },
          "type": {
            "type": "string"
          },
          "policyId": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "permission"
        ],
        "additionalProperties": false,
        "x-typescript-type": "PolicyWithRelations"
      },
      "Policy": {
        "title": "Policy",
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "tenantId": {
            "type": "string"
          },
          "permission": {
            "$ref": "#/components/schemas/Permission"
          },
          "menu": {
            "type": "object"
          },
          "type": {
            "type": "string"
          },
          "policyId": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "permission"
        ],
        "additionalProperties": false
      },
      "NewPolicy": {
        "title": "NewPolicy",
        "type": "object",
        "description": "(tsType: Policy, schemaOptions: { title: 'NewPolicy' })",
        "properties": {
          "name": {
            "type": "string"
          },
          "tenantId": {
            "type": "string"
          },
          "permission": {
            "$ref": "#/components/schemas/Permission"
          },
          "menu": {
            "type": "object"
          },
          "type": {
            "type": "string"
          },
          "policyId": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "permission"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Policy"
      },
      "PolicyPartial": {
        "title": "PolicyPartial",
        "type": "object",
        "description": "(tsType: Partial<Policy>, schemaOptions: { partial: true })",
        "properties": {
          "name": {
            "type": "string"
          },
          "tenantId": {
            "type": "string"
          },
          "permission": {
            "$ref": "#/components/schemas/Permission"
          },
          "menu": {
            "type": "object"
          },
          "type": {
            "type": "string"
          },
          "policyId": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "Partial<Policy>"
      },
      "FeatureJSONWithRelations": {
        "title": "FeatureJSONWithRelations",
        "type": "object",
        "description": "(tsType: FeatureJSONWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeatureWithRelations"
            }
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "FeatureJSONWithRelations"
      },
      "ProductWithRelations": {
        "title": "ProductWithRelations",
        "type": "object",
        "description": "(tsType: ProductWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "productId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "effectiveFromDate": {
            "type": "string",
            "format": "date"
          },
          "effectiveToDate": {
            "type": "string",
            "format": "date"
          },
          "logoPath": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "Draft",
              "Active",
              "Inactive"
            ]
          },
          "features": {
            "$ref": "#/components/schemas/FeatureJSONWithRelations"
          }
        },
        "required": [
          "name",
          "effectiveFromDate"
        ],
        "additionalProperties": false,
        "x-typescript-type": "ProductWithRelations"
      },
      "FeatureJSON": {
        "title": "FeatureJSON",
        "type": "object",
        "properties": {
          "features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Feature"
            }
          }
        },
        "additionalProperties": false
      },
      "Product": {
        "title": "Product",
        "type": "object",
        "properties": {
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "productId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "effectiveFromDate": {
            "type": "string",
            "format": "date"
          },
          "effectiveToDate": {
            "type": "string",
            "format": "date"
          },
          "logoPath": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "Draft",
              "Active",
              "Inactive"
            ]
          },
          "features": {
            "$ref": "#/components/schemas/FeatureJSON"
          }
        },
        "required": [
          "name",
          "effectiveFromDate"
        ],
        "additionalProperties": false
      },
      "NewProduct": {
        "title": "NewProduct",
        "type": "object",
        "description": "(tsType: Omit<Product, 'productId' | 'effectiveFromDate' | 'effectiveToDate' | 'logoPath' | 'status' | 'features'>, schemaOptions: { title: 'NewProduct', exclude: [ 'productId', 'effectiveFromDate', 'effectiveToDate', 'logoPath', 'status', 'features' ] })",
        "properties": {
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Omit<Product, 'productId' | 'effectiveFromDate' | 'effectiveToDate' | 'logoPath' | 'status' | 'features'>"
      },
      "ProductPartial": {
        "title": "ProductPartial",
        "type": "object",
        "description": "(tsType: Partial<Product>, schemaOptions: { partial: true })",
        "properties": {
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "productId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "effectiveFromDate": {
            "type": "string",
            "format": "date"
          },
          "effectiveToDate": {
            "type": "string",
            "format": "date"
          },
          "logoPath": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "Draft",
              "Active",
              "Inactive"
            ]
          },
          "features": {
            "$ref": "#/components/schemas/FeatureJSON"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "Partial<Product>"
      },
      "RPFeature": {
        "title": "RPFeature",
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "Active",
              "Inactive"
            ]
          },
          "tenantId": {
            "type": "string"
          },
          "featureCode": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "tenantId",
          "featureCode"
        ],
        "additionalProperties": false
      },
      "TrialPeriod": {
        "title": "TrialPeriod",
        "type": "object",
        "properties": {
          "term": {
            "type": "number"
          },
          "period": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "RatePlan": {
        "title": "RatePlan",
        "type": "object",
        "properties": {
          "ratePlanId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "effectiveFromDate": {
            "type": "string",
            "format": "date"
          },
          "effectiveToDate": {
            "type": "string",
            "format": "date"
          },
          "productId": {
            "type": "string",
            "format": "uuid"
          },
          "productName": {
            "type": "string"
          },
          "currencies": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "INR",
                "USD",
                "CAD",
                "GBP"
              ]
            }
          },
          "features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RPFeature"
            }
          },
          "status": {
            "type": "string",
            "enum": [
              "Draft",
              "In Review",
              "Approved",
              "Active",
              "Inactive"
            ]
          },
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "isTrial": {
            "type": "boolean"
          },
          "trialPeriod": {
            "$ref": "#/components/schemas/TrialPeriod"
          },
          "billingFrequencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrialPeriod"
            }
          },
          "charges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Charge"
            }
          }
        },
        "required": [
          "ratePlanId",
          "name",
          "productId",
          "currencies"
        ],
        "additionalProperties": false
      },
      "RPFeatureExcluding_ratePlanId-effectiveFromDate_": {
        "title": "RPFeatureExcluding_ratePlanId-effectiveFromDate_",
        "type": "object",
        "description": "(tsType: Omit<RPFeature, 'ratePlanId' | 'effectiveFromDate'>, schemaOptions: { exclude: [ 'ratePlanId', 'effectiveFromDate' ] })",
        "properties": {
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "Active",
              "Inactive"
            ]
          },
          "tenantId": {
            "type": "string"
          },
          "featureCode": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "tenantId",
          "featureCode"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Omit<RPFeature, 'ratePlanId' | 'effectiveFromDate'>"
      },
      "TrialPeriodExcluding_ratePlanId-effectiveFromDate_": {
        "title": "TrialPeriodExcluding_ratePlanId-effectiveFromDate_",
        "type": "object",
        "description": "(tsType: Omit<TrialPeriod, 'ratePlanId' | 'effectiveFromDate'>, schemaOptions: { exclude: [ 'ratePlanId', 'effectiveFromDate' ] })",
        "properties": {
          "term": {
            "type": "number"
          },
          "period": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "Omit<TrialPeriod, 'ratePlanId' | 'effectiveFromDate'>"
      },
      "UomExcluding_ratePlanId-effectiveFromDate_": {
        "title": "UomExcluding_ratePlanId-effectiveFromDate_",
        "type": "object",
        "description": "(tsType: Omit<Uom, 'ratePlanId' | 'effectiveFromDate'>, schemaOptions: { exclude: [ 'ratePlanId', 'effectiveFromDate' ] })",
        "properties": {
          "uomId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "displayAs": {
            "type": "string"
          },
          "decimalPlaces": {
            "type": "number"
          },
          "status": {
            "type": "string",
            "enum": [
              "Active",
              "Inactive"
            ]
          },
          "roundingMode": {
            "type": "string",
            "enum": [
              "Up",
              "Down"
            ]
          },
          "tenantId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "name",
          "displayAs"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Omit<Uom, 'ratePlanId' | 'effectiveFromDate'>"
      },
      "BillingFrequencyExcluding_ratePlanId-effectiveFromDate_": {
        "title": "BillingFrequencyExcluding_ratePlanId-effectiveFromDate_",
        "type": "object",
        "description": "(tsType: Omit<BillingFrequency, 'ratePlanId' | 'effectiveFromDate'>, schemaOptions: { exclude: [ 'ratePlanId', 'effectiveFromDate' ] })",
        "properties": {
          "term": {
            "type": "number"
          },
          "period": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "Omit<BillingFrequency, 'ratePlanId' | 'effectiveFromDate'>"
      },
      "ChargeExcluding_ratePlanId-effectiveFromDate_": {
        "title": "ChargeExcluding_ratePlanId-effectiveFromDate_",
        "type": "object",
        "description": "(tsType: Omit<Charge, 'ratePlanId' | 'effectiveFromDate'>, schemaOptions: { exclude: [ 'ratePlanId', 'effectiveFromDate' ] })",
        "properties": {
          "chargeId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "chargeModel": {
            "type": "string",
            "enum": [
              "Flat Fee Pricing",
              "Per Unit Pricing",
              "Overage Pricing",
              "Volume Pricing",
              "Tiered Pricing",
              "Tiered with Overage Pricing",
              "Discount-Fixed Amount",
              "Discount-Percentage"
            ]
          },
          "chargeType": {
            "type": "string",
            "enum": [
              "One-Time",
              "Recurring",
              "Usage"
            ]
          },
          "currency": {
            "type": "string",
            "enum": [
              "INR",
              "USD",
              "CAD",
              "GBP"
            ]
          },
          "price": {
            "type": "number"
          },
          "status": {
            "type": "string",
            "enum": [
              "Draft",
              "Active",
              "Pending",
              "Charged",
              "Paid",
              "Unpaid",
              "Partially-Paid"
            ]
          },
          "uom": {
            "$ref": "#/components/schemas/UomExcluding_ratePlanId-effectiveFromDate_"
          },
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "billingFrequency": {
            "$ref": "#/components/schemas/BillingFrequencyExcluding_ratePlanId-effectiveFromDate_"
          },
          "recurringPeriod": {
            "$ref": "#/components/schemas/BillingFrequencyExcluding_ratePlanId-effectiveFromDate_"
          },
          "originalChargeId": {
            "type": "string",
            "format": "uuid"
          },
          "chargeLinkType": {
            "type": "string",
            "enum": [
              "Organisation",
              "Rate Plan"
            ]
          },
          "subscriptionId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "name"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Omit<Charge, 'ratePlanId' | 'effectiveFromDate'>"
      },
      "NewRatePlan": {
        "title": "NewRatePlan",
        "type": "object",
        "description": "(tsType: Omit<RatePlan, 'ratePlanId' | 'effectiveFromDate'>, schemaOptions: { title: 'NewRatePlan', exclude: [ 'ratePlanId', 'effectiveFromDate' ] })",
        "properties": {
          "name": {
            "type": "string"
          },
          "effectiveToDate": {
            "type": "string",
            "format": "date"
          },
          "productId": {
            "type": "string",
            "format": "uuid"
          },
          "productName": {
            "type": "string"
          },
          "currencies": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "INR",
                "USD",
                "CAD",
                "GBP"
              ]
            }
          },
          "features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RPFeatureExcluding_ratePlanId-effectiveFromDate_"
            }
          },
          "status": {
            "type": "string",
            "enum": [
              "Draft",
              "In Review",
              "Approved",
              "Active",
              "Inactive"
            ]
          },
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "isTrial": {
            "type": "boolean"
          },
          "trialPeriod": {
            "$ref": "#/components/schemas/TrialPeriodExcluding_ratePlanId-effectiveFromDate_"
          },
          "billingFrequencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrialPeriodExcluding_ratePlanId-effectiveFromDate_"
            }
          },
          "charges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChargeExcluding_ratePlanId-effectiveFromDate_"
            }
          }
        },
        "required": [
          "name",
          "productId",
          "currencies"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Omit<RatePlan, 'ratePlanId' | 'effectiveFromDate'>"
      },
      "RPFeatureExcluding_ratePlanId-effectiveFromDate-subscriptionId_": {
        "title": "RPFeatureExcluding_ratePlanId-effectiveFromDate-subscriptionId_",
        "type": "object",
        "description": "(tsType: Omit<RPFeature, 'ratePlanId' | 'effectiveFromDate' | 'subscriptionId'>, schemaOptions: { exclude: [ 'ratePlanId', 'effectiveFromDate', 'subscriptionId' ] })",
        "properties": {
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "Active",
              "Inactive"
            ]
          },
          "tenantId": {
            "type": "string"
          },
          "featureCode": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "tenantId",
          "featureCode"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Omit<RPFeature, 'ratePlanId' | 'effectiveFromDate' | 'subscriptionId'>"
      },
      "TrialPeriodExcluding_ratePlanId-effectiveFromDate-subscriptionId_": {
        "title": "TrialPeriodExcluding_ratePlanId-effectiveFromDate-subscriptionId_",
        "type": "object",
        "description": "(tsType: Omit<TrialPeriod, 'ratePlanId' | 'effectiveFromDate' | 'subscriptionId'>, schemaOptions: { exclude: [ 'ratePlanId', 'effectiveFromDate', 'subscriptionId' ] })",
        "properties": {
          "term": {
            "type": "number"
          },
          "period": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "Omit<TrialPeriod, 'ratePlanId' | 'effectiveFromDate' | 'subscriptionId'>"
      },
      "UomExcluding_ratePlanId-effectiveFromDate-subscriptionId_": {
        "title": "UomExcluding_ratePlanId-effectiveFromDate-subscriptionId_",
        "type": "object",
        "description": "(tsType: Omit<Uom, 'ratePlanId' | 'effectiveFromDate' | 'subscriptionId'>, schemaOptions: { exclude: [ 'ratePlanId', 'effectiveFromDate', 'subscriptionId' ] })",
        "properties": {
          "uomId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "displayAs": {
            "type": "string"
          },
          "decimalPlaces": {
            "type": "number"
          },
          "status": {
            "type": "string",
            "enum": [
              "Active",
              "Inactive"
            ]
          },
          "roundingMode": {
            "type": "string",
            "enum": [
              "Up",
              "Down"
            ]
          },
          "tenantId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "name",
          "displayAs"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Omit<Uom, 'ratePlanId' | 'effectiveFromDate' | 'subscriptionId'>"
      },
      "BillingFrequencyExcluding_ratePlanId-effectiveFromDate-subscriptionId_": {
        "title": "BillingFrequencyExcluding_ratePlanId-effectiveFromDate-subscriptionId_",
        "type": "object",
        "description": "(tsType: Omit<BillingFrequency, 'ratePlanId' | 'effectiveFromDate' | 'subscriptionId'>, schemaOptions: { exclude: [ 'ratePlanId', 'effectiveFromDate', 'subscriptionId' ] })",
        "properties": {
          "term": {
            "type": "number"
          },
          "period": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "Omit<BillingFrequency, 'ratePlanId' | 'effectiveFromDate' | 'subscriptionId'>"
      },
      "ChargeExcluding_ratePlanId-effectiveFromDate-subscriptionId_": {
        "title": "ChargeExcluding_ratePlanId-effectiveFromDate-subscriptionId_",
        "type": "object",
        "description": "(tsType: Omit<Charge, 'ratePlanId' | 'effectiveFromDate' | 'subscriptionId'>, schemaOptions: { exclude: [ 'ratePlanId', 'effectiveFromDate', 'subscriptionId' ] })",
        "properties": {
          "chargeId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "chargeModel": {
            "type": "string",
            "enum": [
              "Flat Fee Pricing",
              "Per Unit Pricing",
              "Overage Pricing",
              "Volume Pricing",
              "Tiered Pricing",
              "Tiered with Overage Pricing",
              "Discount-Fixed Amount",
              "Discount-Percentage"
            ]
          },
          "chargeType": {
            "type": "string",
            "enum": [
              "One-Time",
              "Recurring",
              "Usage"
            ]
          },
          "currency": {
            "type": "string",
            "enum": [
              "INR",
              "USD",
              "CAD",
              "GBP"
            ]
          },
          "price": {
            "type": "number"
          },
          "status": {
            "type": "string",
            "enum": [
              "Draft",
              "Active",
              "Pending",
              "Charged",
              "Paid",
              "Unpaid",
              "Partially-Paid"
            ]
          },
          "uom": {
            "$ref": "#/components/schemas/UomExcluding_ratePlanId-effectiveFromDate-subscriptionId_"
          },
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "billingFrequency": {
            "$ref": "#/components/schemas/BillingFrequencyExcluding_ratePlanId-effectiveFromDate-subscriptionId_"
          },
          "recurringPeriod": {
            "$ref": "#/components/schemas/BillingFrequencyExcluding_ratePlanId-effectiveFromDate-subscriptionId_"
          },
          "originalChargeId": {
            "type": "string",
            "format": "uuid"
          },
          "chargeLinkType": {
            "type": "string",
            "enum": [
              "Organisation",
              "Rate Plan"
            ]
          }
        },
        "required": [
          "name"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Omit<Charge, 'ratePlanId' | 'effectiveFromDate' | 'subscriptionId'>"
      },
      "RPFeatureWithRelations": {
        "title": "RPFeatureWithRelations",
        "type": "object",
        "description": "(tsType: RPFeatureWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "Active",
              "Inactive"
            ]
          },
          "tenantId": {
            "type": "string"
          },
          "featureCode": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "tenantId",
          "featureCode"
        ],
        "additionalProperties": false,
        "x-typescript-type": "RPFeatureWithRelations"
      },
      "TrialPeriodWithRelations": {
        "title": "TrialPeriodWithRelations",
        "type": "object",
        "description": "(tsType: TrialPeriodWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "term": {
            "type": "number"
          },
          "period": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "TrialPeriodWithRelations"
      },
      "RatePlanWithRelations": {
        "title": "RatePlanWithRelations",
        "type": "object",
        "description": "(tsType: RatePlanWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "ratePlanId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "effectiveFromDate": {
            "type": "string",
            "format": "date"
          },
          "effectiveToDate": {
            "type": "string",
            "format": "date"
          },
          "productId": {
            "type": "string",
            "format": "uuid"
          },
          "productName": {
            "type": "string"
          },
          "currencies": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "INR",
                "USD",
                "CAD",
                "GBP"
              ]
            }
          },
          "features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RPFeatureWithRelations"
            }
          },
          "status": {
            "type": "string",
            "enum": [
              "Draft",
              "In Review",
              "Approved",
              "Active",
              "Inactive"
            ]
          },
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "isTrial": {
            "type": "boolean"
          },
          "trialPeriod": {
            "$ref": "#/components/schemas/TrialPeriodWithRelations"
          },
          "billingFrequencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrialPeriodWithRelations"
            }
          },
          "charges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChargeWithRelations"
            }
          }
        },
        "required": [
          "ratePlanId",
          "name",
          "productId",
          "currencies"
        ],
        "additionalProperties": false,
        "x-typescript-type": "RatePlanWithRelations"
      },
      "RoleWithRelations": {
        "title": "RoleWithRelations",
        "type": "object",
        "description": "(tsType: RoleWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "name": {
            "type": "string"
          },
          "tenantId": {
            "type": "string"
          },
          "permission": {
            "$ref": "#/components/schemas/PermissionWithRelations"
          },
          "menu": {
            "type": "object"
          },
          "type": {
            "type": "string"
          },
          "roleId": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "RoleWithRelations"
      },
      "Role": {
        "title": "Role",
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "tenantId": {
            "type": "string"
          },
          "permission": {
            "$ref": "#/components/schemas/Permission"
          },
          "menu": {
            "type": "object"
          },
          "type": {
            "type": "string"
          },
          "roleId": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "NewRole": {
        "title": "NewRole",
        "type": "object",
        "description": "(tsType: Omit<RoleRequest, 'tenantId'>, schemaOptions: { title: 'NewRole', exclude: [ 'tenantId' ] })",
        "properties": {
          "name": {
            "type": "string"
          },
          "policyIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "name",
          "policyIds"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Omit<RoleRequest, 'tenantId'>"
      },
      "RoleRequest": {
        "title": "RoleRequest",
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "policyIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tenantId": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "policyIds"
        ],
        "additionalProperties": false
      },
      "Setting": {
        "title": "Setting",
        "type": "object",
        "properties": {
          "tenantId": {
            "type": "string"
          },
          "accessContinuity": {
            "type": "boolean"
          },
          "prePayFlatFee": {
            "type": "boolean"
          },
          "proratedBilling": {
            "type": "boolean"
          },
          "upfrontCostAdjustment": {
            "type": "string",
            "enum": [
              "No Adjustment",
              "Full Adjustment"
            ]
          },
          "netTermDays": {
            "type": "number"
          },
          "dunningDays": {
            "type": "number"
          }
        },
        "required": [
          "tenantId",
          "accessContinuity",
          "prePayFlatFee",
          "proratedBilling"
        ],
        "additionalProperties": false
      },
      "NewSetting": {
        "title": "NewSetting",
        "type": "object",
        "description": "(tsType: Omit<Setting, 'tenantId'>, schemaOptions: { title: 'NewSetting', exclude: [ 'tenantId' ] })",
        "properties": {
          "accessContinuity": {
            "type": "boolean"
          },
          "prePayFlatFee": {
            "type": "boolean"
          },
          "proratedBilling": {
            "type": "boolean"
          },
          "upfrontCostAdjustment": {
            "type": "string",
            "enum": [
              "No Adjustment",
              "Full Adjustment"
            ]
          },
          "netTermDays": {
            "type": "number"
          },
          "dunningDays": {
            "type": "number"
          }
        },
        "required": [
          "accessContinuity",
          "prePayFlatFee",
          "proratedBilling"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Omit<Setting, 'tenantId'>"
      },
      "SettingWithRelations": {
        "title": "SettingWithRelations",
        "type": "object",
        "description": "(tsType: SettingWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "tenantId": {
            "type": "string"
          },
          "accessContinuity": {
            "type": "boolean"
          },
          "prePayFlatFee": {
            "type": "boolean"
          },
          "proratedBilling": {
            "type": "boolean"
          },
          "upfrontCostAdjustment": {
            "type": "string",
            "enum": [
              "No Adjustment",
              "Full Adjustment"
            ]
          },
          "netTermDays": {
            "type": "number"
          },
          "dunningDays": {
            "type": "number"
          }
        },
        "required": [
          "tenantId",
          "accessContinuity",
          "prePayFlatFee",
          "proratedBilling"
        ],
        "additionalProperties": false,
        "x-typescript-type": "SettingWithRelations"
      },
      "SubscriptionWithRelations": {
        "title": "SubscriptionWithRelations",
        "type": "object",
        "description": "(tsType: SubscriptionWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "subscriptionId": {
            "type": "string",
            "format": "uuid"
          },
          "accountId": {
            "type": "string",
            "format": "uuid"
          },
          "accountName": {
            "type": "string"
          },
          "autoRenew": {
            "type": "boolean"
          },
          "subscriptionStartDate": {
            "type": "string",
            "format": "date"
          },
          "subscriptionEndDate": {
            "type": "string",
            "format": "date"
          },
          "termStartDate": {
            "type": "string",
            "format": "date"
          },
          "termEndDate": {
            "type": "string",
            "format": "date"
          },
          "status": {
            "type": "string",
            "enum": [
              "Draft",
              "Pending Activation",
              "Pending Acceptance",
              "Yet-To-Start",
              "Active",
              "Cancelled",
              "Expired",
              "Suspended"
            ]
          },
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "productId": {
            "type": "string",
            "format": "uuid"
          },
          "originalRatePlanId": {
            "type": "string",
            "format": "uuid"
          },
          "ratePlanName": {
            "type": "string"
          },
          "currency": {
            "type": "string",
            "enum": [
              "INR",
              "USD",
              "CAD",
              "GBP"
            ]
          },
          "billingFrequency": {
            "$ref": "#/components/schemas/TrialPeriodWithRelations"
          },
          "billingCycle": {
            "type": "number"
          },
          "features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeatureWithRelations"
            }
          }
        },
        "required": [
          "accountId",
          "autoRenew",
          "status",
          "tenantId",
          "productId",
          "originalRatePlanId",
          "ratePlanName",
          "currency",
          "billingCycle"
        ],
        "additionalProperties": false,
        "x-typescript-type": "SubscriptionWithRelations"
      },
      "Subscription": {
        "title": "Subscription",
        "type": "object",
        "properties": {
          "subscriptionId": {
            "type": "string",
            "format": "uuid"
          },
          "accountId": {
            "type": "string",
            "format": "uuid"
          },
          "accountName": {
            "type": "string"
          },
          "autoRenew": {
            "type": "boolean"
          },
          "subscriptionStartDate": {
            "type": "string",
            "format": "date"
          },
          "subscriptionEndDate": {
            "type": "string",
            "format": "date"
          },
          "termStartDate": {
            "type": "string",
            "format": "date"
          },
          "termEndDate": {
            "type": "string",
            "format": "date"
          },
          "status": {
            "type": "string",
            "enum": [
              "Draft",
              "Pending Activation",
              "Pending Acceptance",
              "Yet-To-Start",
              "Active",
              "Cancelled",
              "Expired",
              "Suspended"
            ]
          },
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "productId": {
            "type": "string",
            "format": "uuid"
          },
          "originalRatePlanId": {
            "type": "string",
            "format": "uuid"
          },
          "ratePlanName": {
            "type": "string"
          },
          "currency": {
            "type": "string",
            "enum": [
              "INR",
              "USD",
              "CAD",
              "GBP"
            ]
          },
          "billingFrequency": {
            "$ref": "#/components/schemas/TrialPeriod"
          },
          "billingCycle": {
            "type": "number"
          },
          "features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Feature"
            }
          }
        },
        "required": [
          "accountId",
          "autoRenew",
          "status",
          "tenantId",
          "productId",
          "originalRatePlanId",
          "ratePlanName",
          "currency",
          "billingCycle"
        ],
        "additionalProperties": false
      },
      "TrialPeriodExcluding_subscriptionId-accountId-tenantId-subscriptionEndDate_": {
        "title": "TrialPeriodExcluding_subscriptionId-accountId-tenantId-subscriptionEndDate_",
        "type": "object",
        "description": "(tsType: Omit<TrialPeriod, 'subscriptionId' | 'accountId' | 'tenantId' | 'subscriptionEndDate'>, schemaOptions: { exclude: [ 'subscriptionId', 'accountId', 'tenantId', 'subscriptionEndDate' ] })",
        "properties": {
          "term": {
            "type": "number"
          },
          "period": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "Omit<TrialPeriod, 'subscriptionId' | 'accountId' | 'tenantId' | 'subscriptionEndDate'>"
      },
      "FeatureExcluding_subscriptionId-accountId-tenantId-subscriptionEndDate_": {
        "title": "FeatureExcluding_subscriptionId-accountId-tenantId-subscriptionEndDate_",
        "type": "object",
        "description": "(tsType: Omit<Feature, 'subscriptionId' | 'accountId' | 'tenantId' | 'subscriptionEndDate'>, schemaOptions: { exclude: [ 'subscriptionId', 'accountId', 'tenantId', 'subscriptionEndDate' ] })",
        "properties": {
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "Active",
              "Inactive"
            ]
          },
          "featureCode": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "featureCode"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Omit<Feature, 'subscriptionId' | 'accountId' | 'tenantId' | 'subscriptionEndDate'>"
      },
      "NewSubscription": {
        "title": "NewSubscription",
        "type": "object",
        "description": "(tsType: Omit<SubscriptionRequest, 'subscriptionId' | 'accountId' | 'tenantId' | 'subscriptionEndDate'>, schemaOptions: { title: 'NewSubscription', exclude: [ 'subscriptionId', 'accountId', 'tenantId', 'subscriptionEndDate' ] })",
        "properties": {
          "autoRenew": {
            "type": "boolean"
          },
          "subscriptionStartDate": {
            "type": "string",
            "format": "date"
          },
          "termStartDate": {
            "type": "string",
            "format": "date"
          },
          "termEndDate": {
            "type": "string",
            "format": "date"
          },
          "productId": {
            "type": "string",
            "format": "uuid"
          },
          "originalRatePlanId": {
            "type": "string",
            "format": "uuid"
          },
          "ratePlanName": {
            "type": "string"
          },
          "currency": {
            "type": "string",
            "enum": [
              "INR",
              "USD",
              "CAD",
              "GBP"
            ]
          },
          "billingFrequency": {
            "$ref": "#/components/schemas/TrialPeriodExcluding_subscriptionId-accountId-tenantId-subscriptionEndDate_"
          },
          "billingCycle": {
            "type": "number"
          },
          "features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeatureExcluding_subscriptionId-accountId-tenantId-subscriptionEndDate_"
            }
          }
        },
        "required": [
          "autoRenew",
          "productId",
          "originalRatePlanId",
          "ratePlanName",
          "currency",
          "billingCycle"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Omit<SubscriptionRequest, 'subscriptionId' | 'accountId' | 'tenantId' | 'subscriptionEndDate'>"
      },
      "TemplateVarWithRelations": {
        "title": "TemplateVarWithRelations",
        "type": "object",
        "description": "(tsType: TemplateVarWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "templateId": {
            "type": "string"
          },
          "entity": {
            "type": "string"
          },
          "variable": {
            "type": "string"
          },
          "constant": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "required": [
          "templateId"
        ],
        "additionalProperties": false,
        "x-typescript-type": "TemplateVarWithRelations"
      },
      "NewTemplate": {
        "title": "NewTemplate",
        "type": "object",
        "description": "(tsType: Omit<Template, 'templateId'>, schemaOptions: { title: 'NewTemplate', exclude: [ 'templateId' ] })",
        "properties": {
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "content": {
            "type": "string"
          },
          "isDefault": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "format": {
            "type": "string"
          },
          "version": {
            "type": "number"
          }
        },
        "required": [
          "tenantId",
          "isDefault",
          "format",
          "version"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Omit<Template, 'templateId'>"
      },
      "Template": {
        "title": "Template",
        "type": "object",
        "properties": {
          "templateId": {
            "type": "string",
            "format": "uuid"
          },
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "content": {
            "type": "string"
          },
          "isDefault": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "format": {
            "type": "string"
          },
          "version": {
            "type": "number"
          }
        },
        "required": [
          "tenantId",
          "isDefault",
          "format",
          "version"
        ],
        "additionalProperties": false
      },
      "TemplateWithRelations": {
        "title": "TemplateWithRelations",
        "type": "object",
        "description": "(tsType: TemplateWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "templateId": {
            "type": "string",
            "format": "uuid"
          },
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "content": {
            "type": "string"
          },
          "isDefault": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "format": {
            "type": "string"
          },
          "version": {
            "type": "number"
          }
        },
        "required": [
          "tenantId",
          "isDefault",
          "format",
          "version"
        ],
        "additionalProperties": false,
        "x-typescript-type": "TemplateWithRelations"
      },
      "TenantWithRelations": {
        "title": "TenantWithRelations",
        "type": "object",
        "description": "(tsType: TenantWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "tenantId": {
            "type": "string"
          },
          "orgName": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "pincode": {
            "type": "string"
          },
          "timezone": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        },
        "required": [
          "orgName",
          "city",
          "state",
          "country",
          "pincode",
          "timezone"
        ],
        "additionalProperties": false,
        "x-typescript-type": "TenantWithRelations"
      },
      "Tenant": {
        "title": "Tenant",
        "type": "object",
        "properties": {
          "tenantId": {
            "type": "string"
          },
          "orgName": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "pincode": {
            "type": "string"
          },
          "timezone": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        },
        "required": [
          "orgName",
          "city",
          "state",
          "country",
          "pincode",
          "timezone"
        ],
        "additionalProperties": false
      },
      "UserDto": {
        "title": "UserDto",
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        },
        "required": [
          "firstName",
          "email"
        ],
        "additionalProperties": false
      },
      "NewTenant": {
        "title": "NewTenant",
        "type": "object",
        "description": "(tsType: TenantUser, schemaOptions: { title: 'NewTenant' })",
        "properties": {
          "tenant": {
            "$ref": "#/components/schemas/Tenant"
          },
          "user": {
            "$ref": "#/components/schemas/UserDto"
          }
        },
        "required": [
          "tenant",
          "user"
        ],
        "additionalProperties": false,
        "x-typescript-type": "TenantUser"
      },
      "TenantUser": {
        "title": "TenantUser",
        "type": "object",
        "properties": {
          "tenant": {
            "$ref": "#/components/schemas/Tenant"
          },
          "user": {
            "$ref": "#/components/schemas/UserDto"
          }
        },
        "required": [
          "tenant",
          "user"
        ],
        "additionalProperties": false
      },
      "TenantPartial": {
        "title": "TenantPartial",
        "type": "object",
        "description": "(tsType: Partial<Tenant>, schemaOptions: { partial: true })",
        "properties": {
          "tenantId": {
            "type": "string"
          },
          "orgName": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "pincode": {
            "type": "string"
          },
          "timezone": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "Partial<Tenant>"
      },
      "Transaction": {
        "title": "Transaction",
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "string",
            "format": "uuid"
          },
          "referenceId": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          },
          "currency": {
            "type": "string",
            "enum": [
              "INR",
              "USD",
              "CAD",
              "GBP"
            ]
          },
          "accountId": {
            "type": "string",
            "format": "uuid"
          },
          "accountName": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "Transaction",
              "Refund"
            ]
          },
          "transactionDate": {
            "type": "string",
            "format": "date"
          },
          "mode": {
            "type": "string",
            "enum": [
              "Cash",
              "Cheque",
              "Credit Card",
              "Debit Card",
              "Bank Transfer",
              "Online Payment",
              "Mobile Payment",
              "Electronic Funds Transfer (EFT)"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "Success",
              "Voided",
              "Failure",
              "Timeout",
              "Unknown",
              "In-Progress",
              "Needs Attention"
            ]
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "referenceId",
          "amount",
          "currency",
          "accountId",
          "type",
          "transactionDate",
          "mode",
          "status"
        ],
        "additionalProperties": false
      },
      "NewTransaction": {
        "title": "NewTransaction",
        "type": "object",
        "description": "(tsType: Omit<Transaction, 'transactionId' | 'tenantId' | 'status'>, schemaOptions: { title: 'NewTransaction', exclude: [ 'transactionId', 'tenantId', 'status' ] })",
        "properties": {
          "referenceId": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          },
          "currency": {
            "type": "string",
            "enum": [
              "INR",
              "USD",
              "CAD",
              "GBP"
            ]
          },
          "accountId": {
            "type": "string",
            "format": "uuid"
          },
          "accountName": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "Transaction",
              "Refund"
            ]
          },
          "transactionDate": {
            "type": "string",
            "format": "date"
          },
          "mode": {
            "type": "string",
            "enum": [
              "Cash",
              "Cheque",
              "Credit Card",
              "Debit Card",
              "Bank Transfer",
              "Online Payment",
              "Mobile Payment",
              "Electronic Funds Transfer (EFT)"
            ]
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "referenceId",
          "amount",
          "currency",
          "accountId",
          "type",
          "transactionDate",
          "mode"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Omit<Transaction, 'transactionId' | 'tenantId' | 'status'>"
      },
      "TransactionWithRelations": {
        "title": "TransactionWithRelations",
        "type": "object",
        "description": "(tsType: TransactionWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "transactionId": {
            "type": "string",
            "format": "uuid"
          },
          "referenceId": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          },
          "currency": {
            "type": "string",
            "enum": [
              "INR",
              "USD",
              "CAD",
              "GBP"
            ]
          },
          "accountId": {
            "type": "string",
            "format": "uuid"
          },
          "accountName": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "Transaction",
              "Refund"
            ]
          },
          "transactionDate": {
            "type": "string",
            "format": "date"
          },
          "mode": {
            "type": "string",
            "enum": [
              "Cash",
              "Cheque",
              "Credit Card",
              "Debit Card",
              "Bank Transfer",
              "Online Payment",
              "Mobile Payment",
              "Electronic Funds Transfer (EFT)"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "Success",
              "Voided",
              "Failure",
              "Timeout",
              "Unknown",
              "In-Progress",
              "Needs Attention"
            ]
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "referenceId",
          "amount",
          "currency",
          "accountId",
          "type",
          "transactionDate",
          "mode",
          "status"
        ],
        "additionalProperties": false,
        "x-typescript-type": "TransactionWithRelations"
      },
      "NewUom": {
        "title": "NewUom",
        "type": "object",
        "description": "(tsType: Omit<Uom, 'uomId' | 'status'>, schemaOptions: { title: 'NewUom', exclude: [ 'uomId', 'status' ] })",
        "properties": {
          "name": {
            "type": "string"
          },
          "displayAs": {
            "type": "string"
          },
          "decimalPlaces": {
            "type": "number"
          },
          "roundingMode": {
            "type": "string",
            "enum": [
              "Up",
              "Down"
            ]
          },
          "tenantId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "name",
          "displayAs"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Omit<Uom, 'uomId' | 'status'>"
      },
      "UomPartial": {
        "title": "UomPartial",
        "type": "object",
        "description": "(tsType: Partial<Uom>, schemaOptions: { partial: true })",
        "properties": {
          "uomId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "displayAs": {
            "type": "string"
          },
          "decimalPlaces": {
            "type": "number"
          },
          "status": {
            "type": "string",
            "enum": [
              "Active",
              "Inactive"
            ]
          },
          "roundingMode": {
            "type": "string",
            "enum": [
              "Up",
              "Down"
            ]
          },
          "tenantId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "Partial<Uom>"
      },
      "Usage": {
        "title": "Usage",
        "type": "object",
        "properties": {
          "usageId": {
            "type": "string",
            "format": "uuid"
          },
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "accountId": {
            "type": "string",
            "format": "uuid"
          },
          "accountName": {
            "type": "string"
          },
          "subscriptionId": {
            "type": "string",
            "format": "uuid"
          },
          "chargeId": {
            "type": "string",
            "format": "uuid"
          },
          "chargeName": {
            "type": "string"
          },
          "usageDate": {
            "type": "string",
            "format": "date"
          },
          "quantity": {
            "type": "number"
          },
          "createdTs": {
            "type": "string",
            "format": "date-time"
          },
          "source": {
            "type": "string",
            "enum": [
              "System",
              "Manual"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "Created",
              "Uploaded",
              "Billed"
            ]
          }
        },
        "required": [
          "tenantId",
          "accountId",
          "subscriptionId",
          "chargeId",
          "usageDate",
          "quantity",
          "source",
          "status"
        ],
        "additionalProperties": false
      },
      "NewUsage": {
        "title": "NewUsage",
        "type": "object",
        "description": "(tsType: Omit<Usage, 'usageId' | 'tenantId' | 'createdTs' | 'status' | 'source'>, schemaOptions: { title: 'NewUsage', exclude: [ 'usageId', 'tenantId', 'createdTs', 'status', 'source' ] })",
        "properties": {
          "accountId": {
            "type": "string",
            "format": "uuid"
          },
          "accountName": {
            "type": "string"
          },
          "subscriptionId": {
            "type": "string",
            "format": "uuid"
          },
          "chargeId": {
            "type": "string",
            "format": "uuid"
          },
          "chargeName": {
            "type": "string"
          },
          "usageDate": {
            "type": "string",
            "format": "date"
          },
          "quantity": {
            "type": "number"
          }
        },
        "required": [
          "accountId",
          "subscriptionId",
          "chargeId",
          "usageDate",
          "quantity"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Omit<Usage, 'usageId' | 'tenantId' | 'createdTs' | 'status' | 'source'>"
      },
      "UsageWithRelations": {
        "title": "UsageWithRelations",
        "type": "object",
        "description": "(tsType: UsageWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "usageId": {
            "type": "string",
            "format": "uuid"
          },
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "accountId": {
            "type": "string",
            "format": "uuid"
          },
          "accountName": {
            "type": "string"
          },
          "subscriptionId": {
            "type": "string",
            "format": "uuid"
          },
          "chargeId": {
            "type": "string",
            "format": "uuid"
          },
          "chargeName": {
            "type": "string"
          },
          "usageDate": {
            "type": "string",
            "format": "date"
          },
          "quantity": {
            "type": "number"
          },
          "createdTs": {
            "type": "string",
            "format": "date-time"
          },
          "source": {
            "type": "string",
            "enum": [
              "System",
              "Manual"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "Created",
              "Uploaded",
              "Billed"
            ]
          }
        },
        "required": [
          "tenantId",
          "accountId",
          "subscriptionId",
          "chargeId",
          "usageDate",
          "quantity",
          "source",
          "status"
        ],
        "additionalProperties": false,
        "x-typescript-type": "UsageWithRelations"
      },
      "NewUser": {
        "title": "NewUser",
        "type": "object",
        "description": "(tsType: Omit<User, 'userId' | 'permission' | 'refreshToken' | 'menu' | 'status' | 'role' | 'password'>, schemaOptions: { title: 'NewUser', exclude: [ 'userId', 'permission', 'refreshToken', 'menu', 'status', 'role', 'password' ] })",
        "properties": {
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "roleId": {
            "type": "string"
          },
          "tenantId": {
            "type": "string"
          }
        },
        "required": [
          "firstName",
          "email",
          "roleId"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Omit<User, 'userId' | 'permission' | 'refreshToken' | 'menu' | 'status' | 'role' | 'password'>"
      },
      "WebhookWithRelations": {
        "title": "WebhookWithRelations",
        "type": "object",
        "description": "(tsType: WebhookWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "webhookId": {
            "type": "string",
            "format": "uuid"
          },
          "url": {
            "type": "string",
            "format": "uri"
          },
          "secret": {
            "type": "string"
          },
          "alertEmail": {
            "type": "string",
            "format": "email"
          },
          "activeEvents": {
            "type": "object"
          },
          "tenantId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "url",
          "activeEvents"
        ],
        "additionalProperties": false,
        "x-typescript-type": "WebhookWithRelations"
      },
      "WebhookDTO": {
        "title": "WebhookDTO",
        "type": "object",
        "properties": {
          "webhookId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "methodType": {
            "type": "string"
          },
          "contentType": {
            "type": "string"
          },
          "retry": {
            "type": "boolean"
          },
          "queryParams": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "authorisation": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "headers": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "body": {
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "required": [
          "name",
          "url",
          "methodType",
          "contentType",
          "retry"
        ],
        "additionalProperties": false
      },
      "NewWebhook": {
        "title": "NewWebhook",
        "type": "object",
        "description": "(tsType: Omit<WebhookDTO, 'webhookId'>, schemaOptions: { title: 'NewWebhook', exclude: [ 'webhookId' ] })",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "methodType": {
            "type": "string"
          },
          "contentType": {
            "type": "string"
          },
          "retry": {
            "type": "boolean"
          },
          "queryParams": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "authorisation": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "headers": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "body": {
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "required": [
          "name",
          "url",
          "methodType",
          "contentType",
          "retry"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Omit<WebhookDTO, 'webhookId'>"
      },
      "PaymentMethod.Filter": {
        "type": "object",
        "title": "PaymentMethod.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "PaymentMethod.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "paymentMethodId": {
                    "type": "boolean"
                  },
                  "accountId": {
                    "type": "boolean"
                  },
                  "extCustomerProfileId": {
                    "type": "boolean"
                  },
                  "extCustomerPaymentProfileId": {
                    "type": "boolean"
                  },
                  "isDefault": {
                    "type": "boolean"
                  },
                  "paymentMethodType": {
                    "type": "boolean"
                  },
                  "paymentMethod": {
                    "type": "boolean"
                  },
                  "isAuthorised": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "paymentMethodId",
                    "accountId",
                    "extCustomerProfileId",
                    "extCustomerPaymentProfileId",
                    "isDefault",
                    "paymentMethodType",
                    "paymentMethod",
                    "isAuthorised"
                  ],
                  "example": "paymentMethodId"
                },
                "uniqueItems": true
              }
            ],
            "title": "PaymentMethod.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<PaymentMethod>"
      },
      "Account.Filter": {
        "type": "object",
        "title": "Account.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "tenantId": {
                    "type": "boolean"
                  },
                  "accountId": {
                    "type": "boolean"
                  },
                  "name": {
                    "type": "boolean"
                  },
                  "communicationProfile": {
                    "type": "boolean"
                  },
                  "orgName": {
                    "type": "boolean"
                  },
                  "firstName": {
                    "type": "boolean"
                  },
                  "lastName": {
                    "type": "boolean"
                  },
                  "accountType": {
                    "type": "boolean"
                  },
                  "parentAccountId": {
                    "type": "boolean"
                  },
                  "autoPay": {
                    "type": "boolean"
                  },
                  "currency": {
                    "type": "boolean"
                  },
                  "balance": {
                    "type": "boolean"
                  },
                  "mrr": {
                    "type": "boolean"
                  },
                  "netTermDays": {
                    "type": "boolean"
                  },
                  "createdOn": {
                    "type": "boolean"
                  },
                  "status": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "tenantId",
                    "accountId",
                    "name",
                    "communicationProfile",
                    "orgName",
                    "firstName",
                    "lastName",
                    "accountType",
                    "parentAccountId",
                    "autoPay",
                    "currency",
                    "balance",
                    "mrr",
                    "netTermDays",
                    "createdOn",
                    "status"
                  ],
                  "example": "tenantId"
                },
                "uniqueItems": true
              }
            ],
            "title": "Account.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Account>"
      },
      "Account.Filter1": {
        "type": "object",
        "title": "Account.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "Account.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "tenantId": {
                    "type": "boolean"
                  },
                  "accountId": {
                    "type": "boolean"
                  },
                  "name": {
                    "type": "boolean"
                  },
                  "communicationProfile": {
                    "type": "boolean"
                  },
                  "orgName": {
                    "type": "boolean"
                  },
                  "firstName": {
                    "type": "boolean"
                  },
                  "lastName": {
                    "type": "boolean"
                  },
                  "accountType": {
                    "type": "boolean"
                  },
                  "parentAccountId": {
                    "type": "boolean"
                  },
                  "autoPay": {
                    "type": "boolean"
                  },
                  "currency": {
                    "type": "boolean"
                  },
                  "balance": {
                    "type": "boolean"
                  },
                  "mrr": {
                    "type": "boolean"
                  },
                  "netTermDays": {
                    "type": "boolean"
                  },
                  "createdOn": {
                    "type": "boolean"
                  },
                  "status": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "tenantId",
                    "accountId",
                    "name",
                    "communicationProfile",
                    "orgName",
                    "firstName",
                    "lastName",
                    "accountType",
                    "parentAccountId",
                    "autoPay",
                    "currency",
                    "balance",
                    "mrr",
                    "netTermDays",
                    "createdOn",
                    "status"
                  ],
                  "example": "tenantId"
                },
                "uniqueItems": true
              }
            ],
            "title": "Account.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Account>"
      },
      "Action.Filter": {
        "type": "object",
        "title": "Action.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "Action.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "module": {
                    "type": "boolean"
                  },
                  "method": {
                    "type": "boolean"
                  },
                  "route": {
                    "type": "boolean"
                  },
                  "name": {
                    "type": "boolean"
                  },
                  "notForTenant": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "module",
                    "method",
                    "route",
                    "name",
                    "notForTenant"
                  ],
                  "example": "module"
                },
                "uniqueItems": true
              }
            ],
            "title": "Action.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Action>"
      },
      "Charge.Filter": {
        "type": "object",
        "title": "Charge.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "Charge.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "chargeId": {
                    "type": "boolean"
                  },
                  "name": {
                    "type": "boolean"
                  },
                  "ratePlanId": {
                    "type": "boolean"
                  },
                  "chargeModel": {
                    "type": "boolean"
                  },
                  "chargeType": {
                    "type": "boolean"
                  },
                  "currency": {
                    "type": "boolean"
                  },
                  "price": {
                    "type": "boolean"
                  },
                  "status": {
                    "type": "boolean"
                  },
                  "uom": {
                    "type": "boolean"
                  },
                  "tenantId": {
                    "type": "boolean"
                  },
                  "billingFrequency": {
                    "type": "boolean"
                  },
                  "recurringPeriod": {
                    "type": "boolean"
                  },
                  "originalChargeId": {
                    "type": "boolean"
                  },
                  "chargeLinkType": {
                    "type": "boolean"
                  },
                  "subscriptionId": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "chargeId",
                    "name",
                    "ratePlanId",
                    "chargeModel",
                    "chargeType",
                    "currency",
                    "price",
                    "status",
                    "uom",
                    "tenantId",
                    "billingFrequency",
                    "recurringPeriod",
                    "originalChargeId",
                    "chargeLinkType",
                    "subscriptionId"
                  ],
                  "example": "chargeId"
                },
                "uniqueItems": true
              }
            ],
            "title": "Charge.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Charge>"
      },
      "Feature.Filter": {
        "type": "object",
        "title": "Feature.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "Feature.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "boolean"
                  },
                  "status": {
                    "type": "boolean"
                  },
                  "tenantId": {
                    "type": "boolean"
                  },
                  "featureCode": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "name",
                    "status",
                    "tenantId",
                    "featureCode"
                  ],
                  "example": "name"
                },
                "uniqueItems": true
              }
            ],
            "title": "Feature.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Feature>"
      },
      "Group.Filter": {
        "type": "object",
        "title": "Group.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "Group.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "groupId": {
                    "type": "boolean"
                  },
                  "name": {
                    "type": "boolean"
                  },
                  "roles": {
                    "type": "boolean"
                  },
                  "scope": {
                    "type": "boolean"
                  },
                  "users": {
                    "type": "boolean"
                  },
                  "tenantId": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "groupId",
                    "name",
                    "roles",
                    "scope",
                    "users",
                    "tenantId"
                  ],
                  "example": "groupId"
                },
                "uniqueItems": true
              }
            ],
            "title": "Group.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Group>"
      },
      "Invoice.Filter": {
        "type": "object",
        "title": "Invoice.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "Invoice.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "invoiceId": {
                    "type": "boolean"
                  },
                  "invoiceDate": {
                    "type": "boolean"
                  },
                  "dueDate": {
                    "type": "boolean"
                  },
                  "accountId": {
                    "type": "boolean"
                  },
                  "accountName": {
                    "type": "boolean"
                  },
                  "totalAmount": {
                    "type": "boolean"
                  },
                  "taxAmount": {
                    "type": "boolean"
                  },
                  "discountAmount": {
                    "type": "boolean"
                  },
                  "invoiceAmount": {
                    "type": "boolean"
                  },
                  "tenantId": {
                    "type": "boolean"
                  },
                  "status": {
                    "type": "boolean"
                  },
                  "path": {
                    "type": "boolean"
                  },
                  "paymentLink": {
                    "type": "boolean"
                  },
                  "linkedInvoiceId": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "invoiceId",
                    "invoiceDate",
                    "dueDate",
                    "accountId",
                    "accountName",
                    "totalAmount",
                    "taxAmount",
                    "discountAmount",
                    "invoiceAmount",
                    "tenantId",
                    "status",
                    "path",
                    "paymentLink",
                    "linkedInvoiceId"
                  ],
                  "example": "invoiceId"
                },
                "uniqueItems": true
              }
            ],
            "title": "Invoice.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Invoice>"
      },
      "Menu.Filter": {
        "type": "object",
        "title": "Menu.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "Menu.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "label": {
                    "type": "boolean"
                  },
                  "icon": {
                    "type": "boolean"
                  },
                  "routeTo": {
                    "type": "boolean"
                  },
                  "level": {
                    "type": "boolean"
                  },
                  "sequence": {
                    "type": "boolean"
                  },
                  "upLabel": {
                    "type": "boolean"
                  },
                  "status": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "label",
                    "icon",
                    "routeTo",
                    "level",
                    "sequence",
                    "upLabel",
                    "status"
                  ],
                  "example": "label"
                },
                "uniqueItems": true
              }
            ],
            "title": "Menu.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Menu>"
      },
      "Notification.Filter": {
        "type": "object",
        "title": "Notification.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "Notification.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "notificationId": {
                    "type": "boolean"
                  },
                  "sender": {
                    "type": "boolean"
                  },
                  "subject": {
                    "type": "boolean"
                  },
                  "body": {
                    "type": "boolean"
                  },
                  "receiver": {
                    "type": "boolean"
                  },
                  "type": {
                    "type": "boolean"
                  },
                  "status": {
                    "type": "boolean"
                  },
                  "tenantId": {
                    "type": "boolean"
                  },
                  "sentTs": {
                    "type": "boolean"
                  },
                  "plannedDate": {
                    "type": "boolean"
                  },
                  "name": {
                    "type": "boolean"
                  },
                  "attachments": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "notificationId",
                    "sender",
                    "subject",
                    "body",
                    "receiver",
                    "type",
                    "status",
                    "tenantId",
                    "sentTs",
                    "plannedDate",
                    "name",
                    "attachments"
                  ],
                  "example": "notificationId"
                },
                "uniqueItems": true
              }
            ],
            "title": "Notification.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Notification>"
      },
      "Payment.Filter": {
        "type": "object",
        "title": "Payment.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "Payment.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "paymentId": {
                    "type": "boolean"
                  },
                  "tenantId": {
                    "type": "boolean"
                  },
                  "accountId": {
                    "type": "boolean"
                  },
                  "requestedAmount": {
                    "type": "boolean"
                  },
                  "amountPaid": {
                    "type": "boolean"
                  },
                  "currency": {
                    "type": "boolean"
                  },
                  "status": {
                    "type": "boolean"
                  },
                  "acceptPartial": {
                    "type": "boolean"
                  },
                  "expireBy": {
                    "type": "boolean"
                  },
                  "description": {
                    "type": "boolean"
                  },
                  "customer": {
                    "type": "boolean"
                  },
                  "paymentLink": {
                    "type": "boolean"
                  },
                  "paymentLinkId": {
                    "type": "boolean"
                  },
                  "referenceId": {
                    "type": "boolean"
                  },
                  "updateTs": {
                    "type": "boolean"
                  },
                  "transactionId": {
                    "type": "boolean"
                  },
                  "paymentMethod": {
                    "type": "boolean"
                  },
                  "paymentDetails": {
                    "type": "boolean"
                  },
                  "paymentDate": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "paymentId",
                    "tenantId",
                    "accountId",
                    "requestedAmount",
                    "amountPaid",
                    "currency",
                    "status",
                    "acceptPartial",
                    "expireBy",
                    "description",
                    "customer",
                    "paymentLink",
                    "paymentLinkId",
                    "referenceId",
                    "updateTs",
                    "transactionId",
                    "paymentMethod",
                    "paymentDetails",
                    "paymentDate"
                  ],
                  "example": "paymentId"
                },
                "uniqueItems": true
              }
            ],
            "title": "Payment.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Payment>"
      },
      "PingResponse": {
        "type": "object",
        "title": "PingResponse",
        "properties": {
          "greeting": {
            "type": "string"
          },
          "date": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "headers": {
            "type": "object",
            "properties": {
              "Content-Type": {
                "type": "string"
              }
            },
            "additionalProperties": true
          }
        }
      },
      "Policy.Filter": {
        "type": "object",
        "title": "Policy.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "Policy.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "boolean"
                  },
                  "tenantId": {
                    "type": "boolean"
                  },
                  "permission": {
                    "type": "boolean"
                  },
                  "menu": {
                    "type": "boolean"
                  },
                  "type": {
                    "type": "boolean"
                  },
                  "policyId": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "name",
                    "tenantId",
                    "permission",
                    "menu",
                    "type",
                    "policyId"
                  ],
                  "example": "name"
                },
                "uniqueItems": true
              }
            ],
            "title": "Policy.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Policy>"
      },
      "Product.Filter": {
        "type": "object",
        "title": "Product.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "Product.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "tenantId": {
                    "type": "boolean"
                  },
                  "productId": {
                    "type": "boolean"
                  },
                  "name": {
                    "type": "boolean"
                  },
                  "description": {
                    "type": "boolean"
                  },
                  "effectiveFromDate": {
                    "type": "boolean"
                  },
                  "effectiveToDate": {
                    "type": "boolean"
                  },
                  "logoPath": {
                    "type": "boolean"
                  },
                  "status": {
                    "type": "boolean"
                  },
                  "features": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "tenantId",
                    "productId",
                    "name",
                    "description",
                    "effectiveFromDate",
                    "effectiveToDate",
                    "logoPath",
                    "status",
                    "features"
                  ],
                  "example": "tenantId"
                },
                "uniqueItems": true
              }
            ],
            "title": "Product.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Product>"
      },
      "RatePlan.Filter": {
        "type": "object",
        "title": "RatePlan.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "RatePlan.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "ratePlanId": {
                    "type": "boolean"
                  },
                  "name": {
                    "type": "boolean"
                  },
                  "effectiveFromDate": {
                    "type": "boolean"
                  },
                  "effectiveToDate": {
                    "type": "boolean"
                  },
                  "productId": {
                    "type": "boolean"
                  },
                  "productName": {
                    "type": "boolean"
                  },
                  "currencies": {
                    "type": "boolean"
                  },
                  "features": {
                    "type": "boolean"
                  },
                  "status": {
                    "type": "boolean"
                  },
                  "tenantId": {
                    "type": "boolean"
                  },
                  "isTrial": {
                    "type": "boolean"
                  },
                  "trialPeriod": {
                    "type": "boolean"
                  },
                  "billingFrequencies": {
                    "type": "boolean"
                  },
                  "charges": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "ratePlanId",
                    "name",
                    "effectiveFromDate",
                    "effectiveToDate",
                    "productId",
                    "productName",
                    "currencies",
                    "features",
                    "status",
                    "tenantId",
                    "isTrial",
                    "trialPeriod",
                    "billingFrequencies",
                    "charges"
                  ],
                  "example": "ratePlanId"
                },
                "uniqueItems": true
              }
            ],
            "title": "RatePlan.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<RatePlan>"
      },
      "Role.Filter": {
        "type": "object",
        "title": "Role.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "Role.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "boolean"
                  },
                  "tenantId": {
                    "type": "boolean"
                  },
                  "permission": {
                    "type": "boolean"
                  },
                  "menu": {
                    "type": "boolean"
                  },
                  "type": {
                    "type": "boolean"
                  },
                  "roleId": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "name",
                    "tenantId",
                    "permission",
                    "menu",
                    "type",
                    "roleId"
                  ],
                  "example": "name"
                },
                "uniqueItems": true
              }
            ],
            "title": "Role.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Role>"
      },
      "Setting.Filter": {
        "type": "object",
        "title": "Setting.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "Setting.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "tenantId": {
                    "type": "boolean"
                  },
                  "accessContinuity": {
                    "type": "boolean"
                  },
                  "prePayFlatFee": {
                    "type": "boolean"
                  },
                  "proratedBilling": {
                    "type": "boolean"
                  },
                  "upfrontCostAdjustment": {
                    "type": "boolean"
                  },
                  "netTermDays": {
                    "type": "boolean"
                  },
                  "dunningDays": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "tenantId",
                    "accessContinuity",
                    "prePayFlatFee",
                    "proratedBilling",
                    "upfrontCostAdjustment",
                    "netTermDays",
                    "dunningDays"
                  ],
                  "example": "tenantId"
                },
                "uniqueItems": true
              }
            ],
            "title": "Setting.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Setting>"
      },
      "SmtpServer.Filter": {
        "type": "object",
        "title": "SmtpServer.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "SmtpServer.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "tenantId": {
                    "type": "boolean"
                  },
                  "host": {
                    "type": "boolean"
                  },
                  "port": {
                    "type": "boolean"
                  },
                  "secure": {
                    "type": "boolean"
                  },
                  "tls": {
                    "type": "boolean"
                  },
                  "auth": {
                    "type": "boolean"
                  },
                  "user": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "tenantId",
                    "host",
                    "port",
                    "secure",
                    "tls",
                    "auth",
                    "user"
                  ],
                  "example": "tenantId"
                },
                "uniqueItems": true
              }
            ],
            "title": "SmtpServer.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<SmtpServer>"
      },
      "Subscription.Filter": {
        "type": "object",
        "title": "Subscription.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "Subscription.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "subscriptionId": {
                    "type": "boolean"
                  },
                  "accountId": {
                    "type": "boolean"
                  },
                  "accountName": {
                    "type": "boolean"
                  },
                  "autoRenew": {
                    "type": "boolean"
                  },
                  "subscriptionStartDate": {
                    "type": "boolean"
                  },
                  "subscriptionEndDate": {
                    "type": "boolean"
                  },
                  "termStartDate": {
                    "type": "boolean"
                  },
                  "termEndDate": {
                    "type": "boolean"
                  },
                  "status": {
                    "type": "boolean"
                  },
                  "tenantId": {
                    "type": "boolean"
                  },
                  "productId": {
                    "type": "boolean"
                  },
                  "originalRatePlanId": {
                    "type": "boolean"
                  },
                  "ratePlanName": {
                    "type": "boolean"
                  },
                  "currency": {
                    "type": "boolean"
                  },
                  "billingFrequency": {
                    "type": "boolean"
                  },
                  "billingCycle": {
                    "type": "boolean"
                  },
                  "features": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "subscriptionId",
                    "accountId",
                    "accountName",
                    "autoRenew",
                    "subscriptionStartDate",
                    "subscriptionEndDate",
                    "termStartDate",
                    "termEndDate",
                    "status",
                    "tenantId",
                    "productId",
                    "originalRatePlanId",
                    "ratePlanName",
                    "currency",
                    "billingFrequency",
                    "billingCycle",
                    "features"
                  ],
                  "example": "subscriptionId"
                },
                "uniqueItems": true
              }
            ],
            "title": "Subscription.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Subscription>"
      },
      "TemplateVar.Filter": {
        "type": "object",
        "title": "TemplateVar.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "TemplateVar.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "templateId": {
                    "type": "boolean"
                  },
                  "entity": {
                    "type": "boolean"
                  },
                  "variable": {
                    "type": "boolean"
                  },
                  "constant": {
                    "type": "boolean"
                  },
                  "url": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "templateId",
                    "entity",
                    "variable",
                    "constant",
                    "url"
                  ],
                  "example": "templateId"
                },
                "uniqueItems": true
              }
            ],
            "title": "TemplateVar.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<TemplateVar>"
      },
      "Template.Filter": {
        "type": "object",
        "title": "Template.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "templateId": {
                    "type": "boolean"
                  },
                  "tenantId": {
                    "type": "boolean"
                  },
                  "content": {
                    "type": "boolean"
                  },
                  "isDefault": {
                    "type": "boolean"
                  },
                  "name": {
                    "type": "boolean"
                  },
                  "format": {
                    "type": "boolean"
                  },
                  "version": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "templateId",
                    "tenantId",
                    "content",
                    "isDefault",
                    "name",
                    "format",
                    "version"
                  ],
                  "example": "templateId"
                },
                "uniqueItems": true
              }
            ],
            "title": "Template.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Template>"
      },
      "Template.Filter1": {
        "type": "object",
        "title": "Template.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "Template.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "templateId": {
                    "type": "boolean"
                  },
                  "tenantId": {
                    "type": "boolean"
                  },
                  "content": {
                    "type": "boolean"
                  },
                  "isDefault": {
                    "type": "boolean"
                  },
                  "name": {
                    "type": "boolean"
                  },
                  "format": {
                    "type": "boolean"
                  },
                  "version": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "templateId",
                    "tenantId",
                    "content",
                    "isDefault",
                    "name",
                    "format",
                    "version"
                  ],
                  "example": "templateId"
                },
                "uniqueItems": true
              }
            ],
            "title": "Template.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Template>"
      },
      "Tenant.Filter": {
        "type": "object",
        "title": "Tenant.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "Tenant.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "tenantId": {
                    "type": "boolean"
                  },
                  "orgName": {
                    "type": "boolean"
                  },
                  "address": {
                    "type": "boolean"
                  },
                  "city": {
                    "type": "boolean"
                  },
                  "state": {
                    "type": "boolean"
                  },
                  "country": {
                    "type": "boolean"
                  },
                  "pincode": {
                    "type": "boolean"
                  },
                  "timezone": {
                    "type": "boolean"
                  },
                  "status": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "tenantId",
                    "orgName",
                    "address",
                    "city",
                    "state",
                    "country",
                    "pincode",
                    "timezone",
                    "status"
                  ],
                  "example": "tenantId"
                },
                "uniqueItems": true
              }
            ],
            "title": "Tenant.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Tenant>"
      },
      "Transaction.Filter": {
        "type": "object",
        "title": "Transaction.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "Transaction.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "transactionId": {
                    "type": "boolean"
                  },
                  "referenceId": {
                    "type": "boolean"
                  },
                  "amount": {
                    "type": "boolean"
                  },
                  "currency": {
                    "type": "boolean"
                  },
                  "accountId": {
                    "type": "boolean"
                  },
                  "accountName": {
                    "type": "boolean"
                  },
                  "type": {
                    "type": "boolean"
                  },
                  "transactionDate": {
                    "type": "boolean"
                  },
                  "mode": {
                    "type": "boolean"
                  },
                  "status": {
                    "type": "boolean"
                  },
                  "createdOn": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "transactionId",
                    "referenceId",
                    "amount",
                    "currency",
                    "accountId",
                    "accountName",
                    "type",
                    "transactionDate",
                    "mode",
                    "status",
                    "createdOn"
                  ],
                  "example": "transactionId"
                },
                "uniqueItems": true
              }
            ],
            "title": "Transaction.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Transaction>"
      },
      "Uom.Filter": {
        "type": "object",
        "title": "Uom.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "Uom.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "uomId": {
                    "type": "boolean"
                  },
                  "name": {
                    "type": "boolean"
                  },
                  "displayAs": {
                    "type": "boolean"
                  },
                  "decimalPlaces": {
                    "type": "boolean"
                  },
                  "status": {
                    "type": "boolean"
                  },
                  "roundingMode": {
                    "type": "boolean"
                  },
                  "tenantId": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "uomId",
                    "name",
                    "displayAs",
                    "decimalPlaces",
                    "status",
                    "roundingMode",
                    "tenantId"
                  ],
                  "example": "uomId"
                },
                "uniqueItems": true
              }
            ],
            "title": "Uom.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Uom>"
      },
      "Usage.Filter": {
        "type": "object",
        "title": "Usage.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "Usage.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "usageId": {
                    "type": "boolean"
                  },
                  "tenantId": {
                    "type": "boolean"
                  },
                  "accountId": {
                    "type": "boolean"
                  },
                  "accountName": {
                    "type": "boolean"
                  },
                  "subscriptionId": {
                    "type": "boolean"
                  },
                  "chargeId": {
                    "type": "boolean"
                  },
                  "chargeName": {
                    "type": "boolean"
                  },
                  "usageDate": {
                    "type": "boolean"
                  },
                  "quantity": {
                    "type": "boolean"
                  },
                  "createdTs": {
                    "type": "boolean"
                  },
                  "source": {
                    "type": "boolean"
                  },
                  "status": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "usageId",
                    "tenantId",
                    "accountId",
                    "accountName",
                    "subscriptionId",
                    "chargeId",
                    "chargeName",
                    "usageDate",
                    "quantity",
                    "createdTs",
                    "source",
                    "status"
                  ],
                  "example": "usageId"
                },
                "uniqueItems": true
              }
            ],
            "title": "Usage.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Usage>"
      },
      "User.Filter": {
        "type": "object",
        "title": "User.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "User.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "userId": {
                    "type": "boolean"
                  },
                  "firstName": {
                    "type": "boolean"
                  },
                  "lastName": {
                    "type": "boolean"
                  },
                  "email": {
                    "type": "boolean"
                  },
                  "password": {
                    "type": "boolean"
                  },
                  "roleId": {
                    "type": "boolean"
                  },
                  "role": {
                    "type": "boolean"
                  },
                  "permission": {
                    "type": "boolean"
                  },
                  "menu": {
                    "type": "boolean"
                  },
                  "tenantId": {
                    "type": "boolean"
                  },
                  "refreshToken": {
                    "type": "boolean"
                  },
                  "status": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "userId",
                    "firstName",
                    "lastName",
                    "email",
                    "password",
                    "roleId",
                    "role",
                    "permission",
                    "menu",
                    "tenantId",
                    "refreshToken",
                    "status"
                  ],
                  "example": "userId"
                },
                "uniqueItems": true
              }
            ],
            "title": "User.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<User>"
      },
      "Webhook.Filter": {
        "type": "object",
        "title": "Webhook.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "Webhook.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "webhookId": {
                    "type": "boolean"
                  },
                  "url": {
                    "type": "boolean"
                  },
                  "secret": {
                    "type": "boolean"
                  },
                  "alertEmail": {
                    "type": "boolean"
                  },
                  "activeEvents": {
                    "type": "boolean"
                  },
                  "tenantId": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "webhookId",
                    "url",
                    "secret",
                    "alertEmail",
                    "activeEvents",
                    "tenantId"
                  ],
                  "example": "webhookId"
                },
                "uniqueItems": true
              }
            ],
            "title": "Webhook.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Webhook>"
      },
      "loopback.Count": {
        "type": "object",
        "title": "loopback.Count",
        "x-typescript-type": "@loopback/repository#Count",
        "properties": {
          "count": {
            "type": "number"
          }
        }
      },
      "Contact.Filter": {
        "type": "object",
        "title": "Contact.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "Contact.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "contactId": {
                    "type": "boolean"
                  },
                  "type": {
                    "type": "boolean"
                  },
                  "firstName": {
                    "type": "boolean"
                  },
                  "lastName": {
                    "type": "boolean"
                  },
                  "accountId": {
                    "type": "boolean"
                  },
                  "address": {
                    "type": "boolean"
                  },
                  "city": {
                    "type": "boolean"
                  },
                  "state": {
                    "type": "boolean"
                  },
                  "country": {
                    "type": "boolean"
                  },
                  "postalcode": {
                    "type": "boolean"
                  },
                  "phone": {
                    "type": "boolean"
                  },
                  "email": {
                    "type": "boolean"
                  },
                  "tenantId": {
                    "type": "boolean"
                  },
                  "status": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "contactId",
                    "type",
                    "firstName",
                    "lastName",
                    "accountId",
                    "address",
                    "city",
                    "state",
                    "country",
                    "postalcode",
                    "phone",
                    "email",
                    "tenantId",
                    "status"
                  ],
                  "example": "contactId"
                },
                "uniqueItems": true
              }
            ],
            "title": "Contact.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Contact>"
      }
    }
  },
  "security": [
    {
      "jwt": []
    }
  ],
  "servers": [
    {
      "url": "/"
    }
  ]
}